(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n="addNewProject",r="addNewTask",a="handleMain",i="showNav",o="hideNav",s="toggleAddProjectForm",d="toggelAddTaskForm",c="toggleEditTaskForm",u="toggleTheme",l=(e=[],{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))}});function m(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function h(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=m(t);return!isNaN(Number(n))}const f={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function p(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const g={date:p({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:p({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:p({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},b={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;r=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;r=t.values[a]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function v(t){return(e,n={})=>{const r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;const o=i[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let c;return c=t.valueCallback?t.valueCallback(d):d,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(o.length)}}}var y;const k={code:"en-US",formatDistance:(t,e,n)=>{let r;const a=f[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:g,formatRelative:(t,e,n,r)=>b[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(y={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(y.matchPattern);if(!n)return null;const r=n[0],a=t.match(y.parsePattern);if(!a)return null;let i=y.valueCallback?y.valueCallback(a[0]):a[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(r.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let x={};function E(){return x}Math.pow(10,8);const T=6048e5,A=864e5,C=6e4,D=36e5;function L(t){const e=m(t);return e.setHours(0,0,0,0),e}function N(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function M(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function S(t){const e=m(t);return function(t,e){const n=L(t),r=L(e),a=n.getTime()-N(n),i=r.getTime()-N(r);return Math.round((a-i)/A)}(e,function(t){const e=m(t),n=M(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function P(t,e){const n=E(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=m(t),i=a.getDay(),o=(i<r?7:0)+i-r;return a.setDate(a.getDate()-o),a.setHours(0,0,0,0),a}function j(t){return P(t,{weekStartsOn:1})}function q(t){const e=m(t),n=e.getFullYear(),r=M(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const a=j(r),i=M(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const o=j(i);return e.getTime()>=a.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function Y(t){const e=m(t),n=j(e).getTime()-function(t){const e=q(t),n=M(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),j(n)}(e).getTime();return Math.round(n/T)+1}function O(t,e){const n=m(t),r=n.getFullYear(),a=E(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,o=M(t,0);o.setFullYear(r+1,0,i),o.setHours(0,0,0,0);const s=P(o,e),d=M(t,0);d.setFullYear(r,0,i),d.setHours(0,0,0,0);const c=P(d,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=c.getTime()?r:r-1}function H(t,e){const n=m(t),r=P(n,e).getTime()-function(t,e){const n=E(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=O(t,e),i=M(t,0);return i.setFullYear(a,0,r),i.setHours(0,0,0,0),P(i,e)}(n,e).getTime();return Math.round(r/T)+1}function W(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const F={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return W("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):W(n+1,2)},d:(t,e)=>W(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>W(t.getHours()%12||12,e.length),H:(t,e)=>W(t.getHours(),e.length),m:(t,e)=>W(t.getMinutes(),e.length),s:(t,e)=>W(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return W(Math.floor(r*Math.pow(10,n-3)),e.length)}},Q={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return F.y(t,e)},Y:function(t,e,n,r){const a=O(t,r),i=a>0?a:1-a;return"YY"===e?W(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):W(i,e.length)},R:function(t,e){return W(q(t),e.length)},u:function(t,e){return W(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return W(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return W(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return F.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return W(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const a=H(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):W(a,e.length)},I:function(t,e,n){const r=Y(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):W(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):F.d(t,e)},D:function(t,e,n){const r=S(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):W(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return W(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return W(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return W(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return F.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):F.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):W(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):W(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):F.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):F.s(t,e)},S:function(t,e){return F.S(t,e)},X:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return z(a);case"XXXX":case"XX":return B(a);default:return B(a,":")}},x:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return z(a);case"xxxx":case"xx":return B(a);default:return B(a,":")}},O:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+I(a,":");default:return"GMT"+B(a,":")}},z:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+I(a,":");default:return"GMT"+B(a,":")}},t:function(t,e,n,r){const a=r._originalDate||t;return W(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return W((r._originalDate||t).getTime(),e.length)}};function I(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;return 0===i?n+String(a):n+String(a)+e+W(i,2)}function z(t,e){return t%60==0?(t>0?"-":"+")+W(Math.abs(t)/60,2):B(t,e)}function B(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+W(Math.floor(r/60),2)+e+W(r%60,2)}const R=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},G=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},X={p:G,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return R(t,e);let i;switch(r){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",R(r,e)).replace("{{time}}",G(a,e))}},$=["D","DD"],Z=["YY","YYYY"];function U(t){return-1!==$.indexOf(t)}function K(t){return-1!==Z.indexOf(t)}function V(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const J=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,_=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tt=/^'([^]*?)'?$/,et=/''/g,nt=/[a-zA-Z]/;function rt(t,e,n){const r=E(),a=n?.locale??r.locale??k,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=m(t);if(!h(s))throw new RangeError("Invalid time value");const d={firstWeekContainsDate:i,weekStartsOn:o,locale:a,_originalDate:s};return e.match(_).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,X[e])(t,a.formatLong):t})).join("").match(J).map((function(r){if("''"===r)return"'";const i=r[0];if("'"===i)return function(t){const e=t.match(tt);return e?e[1].replace(et,"'"):t}(r);const o=Q[i];if(o)return!n?.useAdditionalWeekYearTokens&&K(r)&&V(r,e,String(t)),!n?.useAdditionalDayOfYearTokens&&U(r)&&V(r,e,String(t)),o(s,r,a.localize,d);if(i.match(nt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function at(t,e){const n=m(t);return isNaN(e)?M(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function it(t,e){const n=e?.additionalDigits??2,r=function(t){const e={},n=t.split(ot.dateTimeDelimiter);let r;if(n.length>2)return e;if(/:/.test(n[0])?r=n[0]:(e.date=n[0],r=n[1],ot.timeZoneDelimiter.test(e.date)&&(e.date=t.split(ot.timeZoneDelimiter)[0],r=t.substr(e.date.length,t.length))),r){const t=ot.timezone.exec(r);t?(e.time=r.replace(t[1],""),e.timezone=t[1]):e.time=r}return e}(t);let a;if(r.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};const a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:t.slice((r[1]||r[2]).length)}}(r.date,n);a=function(t,e){if(null===e)return new Date(NaN);const n=t.match(st);if(!n)return new Date(NaN);const r=!!n[4],a=ut(n[1]),i=ut(n[2])-1,o=ut(n[3]),s=ut(n[4]),d=ut(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,d)?function(t,e,n){const r=new Date(0);r.setUTCFullYear(t,0,4);const a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,d):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(mt[e]||(ht(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(ht(t)?366:365)}(e,a)?(t.setUTCFullYear(e,i,Math.max(a,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);const i=a.getTime();let o,s=0;if(r.time&&(s=function(t){const e=t.match(dt);if(!e)return NaN;const n=lt(e[1]),r=lt(e[2]),a=lt(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*D+r*C+1e3*a:NaN}(r.time),isNaN(s)))return new Date(NaN);if(!r.timezone){const t=new Date(i+s),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return o=function(t){if("Z"===t)return 0;const e=t.match(ct);if(!e)return 0;const n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*D+a*C):NaN}(r.timezone),isNaN(o)?new Date(NaN):new Date(i+s+o)}const ot={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},st=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,dt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ct=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ut(t){return t?parseInt(t):1}function lt(t){return t&&parseFloat(t.replace(",","."))||0}const mt=[31,null,31,30,31,30,31,31,30,31,30,31];function ht(t){return t%400==0||t%4==0&&t%100!=0}function ft(t,e){const n=m(t),r=m(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function pt(t){return pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pt(t)}function gt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function bt(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?gt(Object(n),!0).forEach((function(e){var r,a,i;r=t,a=e,i=n[e],(a=function(t){var e=function(t,e){if("object"!==pt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==pt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===pt(e)?e:String(e)}(a))in r?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):gt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),r=e.getDueDate();return ft(it(n),it(r))}))},getTaskArray:function(){return n.tasks}}}function wt(t){var e,n=t.target,r=n.tagName.toLowerCase();if("button"===r||"input"===r){var a=n.closest(".task-item");if(a){var i=(e=a.querySelector(".task-item-title").textContent.toLowerCase(),l.getAllTasks().find((function(t){return t.getName()===e}))),o={"task-item-checkbox":function(){return e=i,void(!0===(r=(t=n).checked)?(e.setCompleted(!0),t.setAttribute("data-checked","true")):!1===r&&(e.setCompleted(!1),t.setAttribute("data-checked","false")));var t,e,r},"task-priority-star-button":function(){return e=i,r=(t=n).getAttribute("data-checked"),function(t,e){"false"===e?t.setAttribute("data-checked","true"):"true"===e&&t.setAttribute("data-checked","false")}(t,r),void("false"===r?e.setPriority(!0):"true"===r&&e.setPriority(!1));var t,e,r},"modify-task-button":function(){return De(i)}}[n.className];o&&o()}}}class vt{subPriority=0;validate(t,e){return!0}}class yt extends vt{constructor(t,e,n,r,a){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=r,a&&(this.subPriority=a)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class kt extends vt{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:M(t,function(t,e){const n=e instanceof Date?M(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class xt{run(t,e,n,r){const a=this.parse(t,e,n,r);return a?{setter:new yt(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}validate(t,e,n){return!0}}const Et=/^(1[0-2]|0?\d)/,Tt=/^(3[0-1]|[0-2]?\d)/,At=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Ct=/^(5[0-3]|[0-4]?\d)/,Dt=/^(2[0-3]|[0-1]?\d)/,Lt=/^(2[0-4]|[0-1]?\d)/,Nt=/^(1[0-1]|0?\d)/,Mt=/^(1[0-2]|0?\d)/,St=/^[0-5]?\d/,Pt=/^[0-5]?\d/,jt=/^\d/,qt=/^\d{1,2}/,Yt=/^\d{1,3}/,Ot=/^\d{1,4}/,Ht=/^-?\d+/,Wt=/^-?\d/,Ft=/^-?\d{1,2}/,Qt=/^-?\d{1,3}/,It=/^-?\d{1,4}/,zt=/^([+-])(\d{2})(\d{2})?|Z/,Bt=/^([+-])(\d{2})(\d{2})|Z/,Rt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Gt=/^([+-])(\d{2}):(\d{2})|Z/,Xt=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function $t(t,e){return t?{value:e(t.value),rest:t.rest}:t}function Zt(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function Ut(t,e){const n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};const r="+"===n[1]?1:-1,a=n[2]?parseInt(n[2],10):0,i=n[3]?parseInt(n[3],10):0,o=n[5]?parseInt(n[5],10):0;return{value:r*(a*D+i*C+1e3*o),rest:e.slice(n[0].length)}}function Kt(t){return Zt(Ht,t)}function Vt(t,e){switch(t){case 1:return Zt(jt,e);case 2:return Zt(qt,e);case 3:return Zt(Yt,e);case 4:return Zt(Ot,e);default:return Zt(new RegExp("^\\d{1,"+t+"}"),e)}}function Jt(t,e){switch(t){case 1:return Zt(Wt,e);case 2:return Zt(Ft,e);case 3:return Zt(Qt,e);case 4:return Zt(It,e);default:return Zt(new RegExp("^-?\\d{1,"+t+"}"),e)}}function _t(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function te(t,e){const n=e>0,r=n?e:1-e;let a;if(r<=50)a=t||100;else{const e=r+50;a=t+100*Math.floor(e/100)-(t>=e%100?100:0)}return n?a:1-a}function ee(t){return t%400==0||t%4==0&&t%100!=0}const ne=[31,28,31,30,31,30,31,31,30,31,30,31],re=[31,29,31,30,31,30,31,31,30,31,30,31];function ae(t,e,n){const r=E(),a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,i=m(t),o=i.getDay(),s=7-a;return at(i,e<0||e>6?e-(o+s)%7:((e%7+7)%7+s)%7-(o+s)%7)}function ie(t,e){const n=m(t);return at(n,e-function(t){let e=m(t).getDay();return 0===e&&(e=7),e}(n))}const oe={G:new class extends xt{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends xt{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return $t(Vt(4,t),r);case"yo":return $t(n.ordinalNumber(t,{unit:"year"}),r);default:return $t(Vt(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const r=t.getFullYear();if(n.isTwoDigitYear){const e=te(n.year,r);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const a="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(a,0,1),t.setHours(0,0,0,0),t}},Y:new class extends xt{priority=130;parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return $t(Vt(4,t),r);case"Yo":return $t(n.ordinalNumber(t,{unit:"year"}),r);default:return $t(Vt(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,r){const a=O(t,r);if(n.isTwoDigitYear){const e=te(n.year,a);return t.setFullYear(e,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),P(t,r)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),P(t,r)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends xt{priority=130;parse(t,e){return Jt("R"===e?4:e.length,t)}set(t,e,n){const r=M(t,0);return r.setFullYear(n,0,4),r.setHours(0,0,0,0),j(r)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends xt{priority=130;parse(t,e){return Jt("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends xt{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return Vt(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends xt{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return Vt(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends xt{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"M":return $t(Zt(Et,t),r);case"MM":return $t(Vt(2,t),r);case"Mo":return $t(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends xt{priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"L":return $t(Zt(Et,t),r);case"LL":return $t(Vt(2,t),r);case"Lo":return $t(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends xt{priority=100;parse(t,e,n){switch(e){case"w":return Zt(Ct,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n,r){return P(function(t,e,n){const r=m(t),a=H(r,n)-e;return r.setDate(r.getDate()-7*a),r}(t,n,r),r)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends xt{priority=100;parse(t,e,n){switch(e){case"I":return Zt(Ct,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n){return j(function(t,e){const n=m(t),r=Y(n)-e;return n.setDate(n.getDate()-7*r),n}(t,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends xt{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return Zt(Tt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return Vt(e.length,t)}}validate(t,e){const n=ee(t.getFullYear()),r=t.getMonth();return n?e>=1&&e<=re[r]:e>=1&&e<=ne[r]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends xt{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return Zt(At,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return Vt(e.length,t)}}validate(t,e){return ee(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends xt{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends xt{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return $t(Vt(e.length,t),a);case"eo":return $t(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends xt{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return $t(Vt(e.length,t),a);case"co":return $t(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends xt{priority=90;parse(t,e,n){const r=t=>0===t?7:t;switch(e){case"i":case"ii":return Vt(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return $t(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return $t(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return $t(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return $t(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=ie(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends xt{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends xt{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends xt{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends xt{priority=70;parse(t,e,n){switch(e){case"h":return Zt(Mt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const r=t.getHours()>=12;return r&&n<12?t.setHours(n+12,0,0,0):r||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends xt{priority=70;parse(t,e,n){switch(e){case"H":return Zt(Dt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends xt{priority=70;parse(t,e,n){switch(e){case"K":return Zt(Nt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends xt{priority=70;parse(t,e,n){switch(e){case"k":return Zt(Lt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const r=n<=24?n%24:n;return t.setHours(r,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends xt{priority=60;parse(t,e,n){switch(e){case"m":return Zt(St,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends xt{priority=50;parse(t,e,n){switch(e){case"s":return Zt(Pt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends xt{priority=30;parse(t,e){return $t(Vt(e.length,t),(t=>Math.floor(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends xt{priority=10;parse(t,e){switch(e){case"X":return Ut(zt,t);case"XX":return Ut(Bt,t);case"XXXX":return Ut(Rt,t);case"XXXXX":return Ut(Xt,t);default:return Ut(Gt,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-N(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends xt{priority=10;parse(t,e){switch(e){case"x":return Ut(zt,t);case"xx":return Ut(Bt,t);case"xxxx":return Ut(Rt,t);case"xxxxx":return Ut(Xt,t);default:return Ut(Gt,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-N(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends xt{priority=40;parse(t){return Kt(t)}set(t,e,n){return[M(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends xt{priority=20;parse(t){return Kt(t)}set(t,e,n){return[M(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},se=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,de=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ce=/^'([^]*?)'?$/,ue=/''/g,le=/\S/,me=/[a-zA-Z]/;function he(t,e,n,r){const a=Object.assign({},E()),i=r?.locale??a.locale??k,o=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,s=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0;if(""===e)return""===t?m(n):M(n,NaN);const d={firstWeekContainsDate:o,weekStartsOn:s,locale:i},c=[new kt],u=e.match(de).map((t=>{const e=t[0];return e in X?(0,X[e])(t,i.formatLong):t})).join("").match(se),l=[];for(let a of u){!r?.useAdditionalWeekYearTokens&&K(a)&&V(a,e,t),!r?.useAdditionalDayOfYearTokens&&U(a)&&V(a,e,t);const o=a[0],s=oe[o];if(s){const{incompatibleTokens:e}=s;if(Array.isArray(e)){const t=l.find((t=>e.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${a}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${a}\` and any other token at the same time`);l.push({token:o,fullToken:a});const r=s.run(t,a,i.match,d);if(!r)return M(n,NaN);c.push(r.setter),t=r.rest}else{if(o.match(me))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===a?a="'":"'"===o&&(a=a.match(ce)[1].replace(ue,"'")),0!==t.indexOf(a))return M(n,NaN);t=t.slice(a.length)}}if(t.length>0&&le.test(t))return M(n,NaN);const h=c.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>c.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let f=m(n);if(isNaN(f.getTime()))return M(n,NaN);const p={};for(const t of h){if(!t.validate(f,d))return M(n,NaN);const e=t.set(f,p,d);Array.isArray(e)?(f=e[0],Object.assign(p,e[1])):f=e}return M(n,f)}function fe(t,e){for(var n in e)t.setAttribute(n,e[n])}function pe(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return function(){var t=document.createElement("p");t.setAttribute("id","placeholder-text"),t.classList.add("hvr-wobble-vertical"),t.textContent="nothing to see here...";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}();if(e.length>0){var r=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){r.appendChild(function(t){var e=t.getName().toLowerCase(),n=t.getDetails(),r=t.getDueDate(),a=t.getCompleted(),i=t.getPriority(),o=document.createElement("input");o.setAttribute("type","checkbox"),o.setAttribute("data-checked",a?"true":"false"),o.classList.add("task-item-checkbox"),o.checked=!!a;var s=document.createElement("div");s.classList.add("task-checkbox-container"),s.appendChild(o);var d=document.createElement("h4");d.classList.add("task-item-title"),d.textContent=e;var c=document.createElement("p");c.classList.add("task-item-details"),c.textContent=n;var u,l=document.createElement("p");l.classList.add("task-item-date"),l.textContent="Due ".concat((u={year:"numeric",month:"short",day:"numeric"},he(r,"yyyy-MM-dd",new Date).toLocaleDateString("en-us",u)));var m=document.createElement("span");m.classList.add("task-priority-star-icon","material-symbols-outlined"),m.textContent="star";var h=document.createElement("button");h.classList.add("task-priority-star-button"),fe(h,{"aria-label":"Toggle priority",type:"button","data-checked":i?"true":"false"}),h.appendChild(m);var f=document.createElement("button");f.classList.add("modify-task-button"),f.setAttribute("type","button"),f.setAttribute("aria-label","Edit Task");var p=document.createElement("i");p.classList.add("fa-solid","fa-ellipsis-vertical"),f.appendChild(p);var g=document.createElement("div");g.classList.add("task-item-button-container"),g.appendChild(h),g.appendChild(f);var b=document.createElement("div");b.classList.add("task-right-side-container"),b.appendChild(l),b.appendChild(g);var w=document.createElement("li");return w.classList.add("task-item"),w.appendChild(s),w.appendChild(d),""!==n.trim()&&w.appendChild(c),w.appendChild(b),w}(t))})),r}}function ge(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=pe(t);return n&&e.appendChild(n),e}function be(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}function we(){var t=be("#edit-task-form"),e=t.querySelector("#edit-task-title"),n=t.querySelector("#edit-task-details"),r=t.querySelector("#edit-task-due-date"),a=e.value.trim().toLowerCase(),i=n.value.trim(),o=r.value;return a?o?o<(new Date).toISOString().slice(0,10)?alert("Enter Valid Due Date"):(t.reset(),xe.setName(a),xe.setDetails(i),xe.setDueDate(o),De(),void("project"===Fe.linkType?Me(Fe.projectName):"link"===Fe.linkType&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:activeLink,e=be("#main-content"),n=e.querySelector("#task-list"),r=ge(bt(t,l.getAllTasks()));n.remove(),e.appendChild(r),Ne(r)&&Le(r)}(We))):alert("Enter Task Due Date"):alert("Enter Task Name")}function ve(t){if(t.target.classList.contains("edit-task-button")){var e=t.target.getAttribute("id"),n="cancel-edit-task-button"===e;"save-edit-task-button"===e?we():n&&De()}}function ye(t){t.close(),fe(t,{"data-hidden":"hidden","aria-label":"hidden"})}var ke,xe,Ee={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}},Te=!1;function Ae(t){var e=be(".edit-task-button-container");"hidden"===t?e.removeEventListener("click",ve):"visible"===t&&e.addEventListener("click",ve)}function Ce(t){var e,n,r,a=be("#edit-task-modal"),i=a.getAttribute("data-hidden");"hidden"===i?(ke="visible",function(t){var e=be("#edit-task-modal"),n=e.querySelector("#edit-task-title"),r=e.querySelector("#edit-task-details"),a=e.querySelector("#edit-task-due-date"),i=t.getName(),o=t.getDetails(),s=t.getDueDate();n.value=i,r.value=o,a.value=s}(t),(r=a).showModal(),fe(r,{"data-hidden":"visible","aria-label":"visible"}),Ae(ke)):"visible"===i&&(ke="closing",n=ye,(e=a).setAttribute("data-hidden","closing"),e.addEventListener("animationend",(function t(){n(e),e.removeEventListener("animationend",t),ke="hidden"})),Ae(ke)),xe=t}function De(t){Ee.emit(c,t)}function Le(t){var e,n;e=be("#content"),n=function(){var t=document.createElement("h2");t.setAttribute("id","edit-task-heading"),t.textContent="Edit Task";var e=document.createElement("dialog");return fe(e,{id:"edit-task-modal","aria-label":"hidden","data-hidden":"hidden"}),e.appendChild(t),e.appendChild(function(){var t=document.createElement("label");t.classList.add("edit-task-label"),t.setAttribute("for","edit-task-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("edit-task-input"),e.setAttribute("type","text"),e.setAttribute("id","edit-task-title"),e.setAttribute("required","true"),e.setAttribute("placeholder","what are the vibes?"),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var n=document.createElement("div");n.classList.add("title-container"),n.classList.add("input-container"),n.appendChild(t),n.appendChild(e);var r=document.createElement("label");r.classList.add("edit-task-label"),r.setAttribute("for","edit-task-details"),r.textContent="Details (optional)";var a=document.createElement("input");a.classList.add("edit-task-input"),a.setAttribute("type","text"),a.setAttribute("id","edit-task-details"),a.setAttribute("placeholder","tell me more"),a.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var i=document.createElement("div");i.classList.add("details-container"),i.classList.add("input-container"),i.appendChild(r),i.appendChild(a);var o=document.createElement("label");o.classList.add("edit-task-label"),o.setAttribute("for","edit-task-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("edit-task-input"),s.setAttribute("type","date"),s.setAttribute("id","edit-task-due-date"),s.setAttribute("required",!0),s.setAttribute("placeholder","yyyy-mm-dd"),s.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var d=document.createElement("div");d.classList.add("due-date-container"),d.classList.add("input-container"),d.appendChild(o),d.appendChild(s);var c=document.createElement("button");c.classList.add("edit-task-button"),c.setAttribute("id","save-edit-task-button"),c.setAttribute("type","button"),c.setAttribute("aria-label","Edit Task"),c.setAttribute("form","edit-task-form"),c.textContent="save";var u=document.createElement("button");u.classList.add("edit-task-button"),u.setAttribute("id","cancel-edit-task-button"),u.setAttribute("type","button"),u.setAttribute("aria-label","Cancel Edit Task"),u.textContent="cancel";var l=document.createElement("div");l.classList.add("edit-task-button-container"),l.appendChild(c),l.appendChild(u);var m=document.createElement("form");m.setAttribute("id","edit-task-form"),m.appendChild(n),m.appendChild(i),m.appendChild(d),m.appendChild(l);var h=document.createElement("div");return h.classList.add("edit-task-form-container"),h.appendChild(m),h}()),e}(),e.appendChild(n),function(t){t.addEventListener("click",wt)}(t),function(t){var e,n;(e=t.querySelectorAll(".task-item-details"),n=[],e.forEach((function(t){t.clientWidth<t.scrollWidth&&n.push(t)})),n).forEach((function(t){var e,n,r;n=(e=t).scrollWidth-e.clientWidth,r=-1,function t(a){var i=e.scrollLeft+.5*r;i>=n?r=-1:i<=0&&(r=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))}(t),Te||(Ee.on(c,Ce),Te=!0)}function Ne(t){var e=t.firstChild;return!(e&&e.hasAttribute("id","placeholder-container")||!e)}function Me(t){var e=be("#task-list"),n=e.parentNode,r=l.getProjectObject(t);e.remove();var a=ge(r);n.appendChild(a),Ne(a)&&Le(a)}function Se(){var t=be("#add-task-form"),e=t.querySelector("#task-add-title"),n=t.querySelector("#task-add-details"),r=t.querySelector("#task-add-due-date"),a=e.value.trim().toLowerCase(),i=n.value.trim(),o=r.value,s=(new Date).toISOString().slice(0,10);if(!a)return alert("Enter Task Name");if(!o)return alert("Enter Task Due Date");if(o<s)return alert("Enter Valid Due Date");t.reset();var d=function(t,e,n,r){if("string"!=typeof t&&"string"!=typeof r&&"string"!=typeof n)throw new Error("⚠️ name, details & due-date, must all be strings");var a={name:t,projectName:e,dueDate:n,details:r,priority:!1,completed:!1};return{getName:function(){return a.name},setName:function(t){a.name=t},getDetails:function(){return a.details},setDetails:function(t){a.details=t},getDueDate:function(){return a.dueDate},setDueDate:function(t){a.dueDate=t},getPriority:function(){return a.priority},setPriority:function(t){a.priority=t},getCompleted:function(){return a.completed},setCompleted:function(t){a.completed=t},setProjectName:function(t){a.project=t},getProjectName:function(){return a.projectName}}}(a,c,o,i);d.setProjectName(c);var c=Fe.projectName.toLowerCase();l.addTaskToProject(c,d),Oe(),Me(c)}function Pe(){Ee.emit(r)}var je={formState:"hidden",isAddTaskButtonListenerAttached:!1};function qe(t){je.formState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",qe)}function Ye(){var t,e,n=be(".add-task-form-container"),a=je.formState;"hidden"===a?(fe(n,{"data-hidden":"false","aria-label":"visible"}),je.formState="visible"):"visible"===a&&(fe(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,je.formState="closing",t.addEventListener("animationend",qe)),function(t){var e=be("#add-task-button");"visible"===t?e.addEventListener("click",Pe):"closing"===t&&e.removeEventListener("click",Pe)}(e=je.formState),function(t){"visible"===t?Ee.on(r,Se):"closing"===t&&Ee.off(r,Se)}(e),function(t){!function(t){var e=be("#cancel-add-task-button");"visible"===t?e.addEventListener("click",Oe):"closing"===t&&e.removeEventListener("click",Oe)}(t)}(je.formState)}function Oe(){Ee.emit(d)}function He(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var a=ge(t),i=document.createElement("div");i.setAttribute("id","main-content"),i.appendChild(a);var o,s=document.createElement("div"),d=t.getType();return s.appendChild(e),"project"===d&&s.appendChild(((o=document.createElement("div")).setAttribute("id","add-task-container"),o.appendChild(function(){var t=document.createElement("button");t.setAttribute("id","add-task-form-opener-button"),t.setAttribute("type","button"),t.setAttribute("aria-label","Add Task"),t.textContent="add task";var e=document.createElement("div");return e.setAttribute("id","add-task-form-opener-button-container"),e.appendChild(t),e}()),o.appendChild(function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","task-add-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),e.setAttribute("type","text"),e.setAttribute("id","task-add-title"),e.setAttribute("required","true"),e.setAttribute("placeholder","what are the vibes?"),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(r))}));var n=document.createElement("div");n.classList.add("title-container"),n.classList.add("input-container"),n.appendChild(t),n.appendChild(e);var a=document.createElement("label");a.classList.add("add-task-label"),a.setAttribute("for","task-add-details"),a.textContent="Details (optional)";var i=document.createElement("input");i.classList.add("add-task-input"),i.setAttribute("type","text"),i.setAttribute("id","task-add-details"),i.setAttribute("placeholder","tell me more"),i.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(r))}));var o=document.createElement("div");o.classList.add("details-container"),o.classList.add("input-container"),o.appendChild(a),o.appendChild(i);var s=document.createElement("label");s.classList.add("add-task-label"),s.setAttribute("for","task-add-due-date"),s.textContent="Due Date";var d=document.createElement("input");d.classList.add("add-task-input"),d.setAttribute("type","date"),d.setAttribute("id","task-add-due-date"),d.setAttribute("required",!0),d.setAttribute("placeholder","yyyy-mm-dd"),d.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(r))}));var c=document.createElement("div");c.classList.add("due-date-container"),c.classList.add("input-container"),c.appendChild(s),c.appendChild(d);var u=document.createElement("button");u.classList.add("add-task-button"),u.setAttribute("id","add-task-button"),u.setAttribute("type","button"),u.setAttribute("aria-label","Add Task"),u.setAttribute("name","add-task-button"),u.setAttribute("form","add-task-form"),u.textContent="add";var l=document.createElement("button");l.classList.add("add-task-button"),l.setAttribute("id","cancel-add-task-button"),l.setAttribute("type","button"),l.setAttribute("aria-label","Cancel Add Task"),l.textContent="cancel";var m=document.createElement("div");m.classList.add("add-task-button-container"),m.appendChild(u),m.appendChild(l);var h=document.createElement("form");h.setAttribute("id","add-task-form"),h.appendChild(n),h.appendChild(o),h.appendChild(c),h.appendChild(m);var f=document.createElement("div");return f.classList.add("add-task-form-container"),f.setAttribute("aria-label","hidden"),f.setAttribute("data-hidden",!0),f.appendChild(h),f}()),o)),s.setAttribute("id","main-container"),s.appendChild(i),s}var We,Fe={linkType:null,projectName:null};function Qe(t){var e=function(t){var e=t.hasAttribute("data-project-name"),n=t.hasAttribute("data-page-name");if(e){var r=l.getProjectArray(),a=t.getAttribute("data-project-name"),i=r.find((function(t){return t.getName()===a}));return Fe.linkType="project",i}if(n){var o=t.getAttribute("data-page-name"),s=function(t,e){var n=new Date;return({"all tasks":function(){return e},priorities:function(){return e.filter((function(t){return!0===t.getPriority()}))},today:function(){var t=rt(n,"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()===t}))},"next 7 days":function(){var t=rt(at(n,7),"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()<=t}))}}[t]||function(){return e})()}(o,l.getAllTasks()),d=bt(o,s);return Fe.linkType="link",d}}(t),n=e.getName(),r=e.getType(),a=He(e),i=a.querySelector("#task-list");je.isAddTaskButtonListenerAttached&&(be("#add-task-form-opener-button").removeEventListener("click",Oe),je.isAddTaskButtonListenerAttached=!1,Ee.off(d,Ye));var o,s=be("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(s),s.appendChild(a),"project"===r&&(Fe.projectName=n,function(t){var e=be("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",Oe),je.isAddTaskButtonListenerAttached=!0)}(o=r),function(t){"project"===t&&Ee.on(d,Ye)}(o)),Ne(i)&&Le(i),t.addEventListener("transitionend",en,{once:!0})}function Ie(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(be(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page"),We=t.textContent.toLowerCase()}(e),function(t){Ee.emit(a,t)}(e))}function ze(){var t;!0===Ve.open?Ee.on(a,Qe):!1===Ve.open&&Ee.off(a,Qe),t=be(".zig-zag-nav"),!0===Ve.open?t.addEventListener("click",Ie):!1===Ve.open&&t.removeEventListener("click",Ie)}function Be(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function Re(){var t=be("#add-project-form"),e=t.querySelector("#project-name-input").value.trim().toLowerCase();if(!e)return alert("Enter Project Name");t.reset();var n=function(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),r=e.getDueDate();return ft(it(n),it(r))}))},getTaskArray:function(){return e.tasks}}}(e);l.addProject(n);var r=be("#project-nav-list");(function(t,e){for(var n=t.getProjectArray().slice().reverse();e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),e.setAttribute("type","button"),e.setAttribute("aria-label","Project ".concat(t)),e.setAttribute("data-project-name",t),e.textContent=t;var n=Be(),r=document.createElement("li");return r.classList.add("project-li"),r.classList.add("nav-li"),e.setAttribute("aria-label","Project ".concat(t)),r.appendChild(n),r.appendChild(e),r}(t.getName()))}))})(l,r),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(r),Ue(),Xe.projectFormState="hidden"}function Ge(){Ee.emit(n)}var Xe={projectFormState:"hidden"};function $e(t){Xe.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",$e)}function Ze(){var t,e,r=be("#add-project-form"),a=Xe.projectFormState;if("hidden"===a)fe(r,{"data-hidden":"false","aria-label":"visible"}),Xe.projectFormState="visible";else if("visible"===a){fe(r,{"data-hidden":"closing","aria-label":"hidden"}),t=r,Xe.projectFormState="closing",t.addEventListener("animationend",$e),be("#project-name-input").value=""}(function(t){var e=be("#add-project-button");"visible"===t?e.addEventListener("click",Ge):"closing"===t&&e.removeEventListener("click",Ge)})(e=Xe.projectFormState),function(t){"visible"===t?Ee.on(n,Re):"closing"===t&&Ee.off(n,Re)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",Ue):"closing"===t&&e.removeEventListener("click",Ue)}(t)}(Xe.projectFormState)}function Ue(){Ee.emit(s)}function Ke(){var t=document.getElementById("new-project-button");!0===Ve.open?t.addEventListener("click",Ue):!1===Ve.open&&t.removeEventListener("click",Ue),function(t){!0===t.open?Ee.on(s,Ze):!1===t.open&&Ee.off(s,Ze)}(Ve)}var Ve={open:!1,animating:!1,zigZagNavReference:null};function Je(){Ve.open=!1,Ve.animating=!1,Ve.zigZagNavReference.removeEventListener("animationend",Je),Ve.zigZagNavReference.setAttribute("aria-hidden",!0),Ve.zigZagNavReference.setAttribute("data-visibility",!1),Ke(),ze(),Ee.on(i,tn),Ee.off(o,tn)}function _e(){Ve.animating=!0,Ve.zigZagNavReference.setAttribute("data-visibility","closing"),Ve.zigZagNavReference.addEventListener("animationend",Je)}function tn(){Ve.open=!0,Ve.animating=!1,Ve.zigZagNavReference.setAttribute("aria-hidden",!1),Ve.zigZagNavReference.setAttribute("data-visibility",!0),ze(),Ke(),Ee.on(o,_e),Ee.off(i,tn)}function en(){var t=be(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),Ee.emit(o);else{if(!0===Ve.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),Ee.emit(i)}}var nn={savedTheme:function(t){try{return localStorage.getItem("savedTheme")}catch(t){return console.error("Error accessing localStorage:",t),null}}(),userPrefersLight:window.matchMedia("(prefers-color-scheme: light)").matches};function rn(t){var e=document.head.querySelector('meta[name="color-scheme"]');e||((e=document.createElement("meta")).setAttribute("name","color-scheme"),document.head.appendChild(e)),e.setAttribute("content","light"===t?"light dark":"dark light")}function an(t){var e=t.checked?"light":"dark";nn.savedTheme=e,function(t,e){try{localStorage.setItem("savedTheme",e)}catch(t){console.error("Error setting localStorage item:",t)}}(0,e),document.body.classList.toggle("light-mode","light"===e),rn(e)}var on={Home:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},Projects:{listElements:[]}};const sn=t.p+"f0f19e6f57687481453e.webp";function dn(){var t=document.createElement("header"),e=document.createElement("div");e.classList.add("header-left");var n=document.createElement("img");n.classList.add("header-logo"),n.setAttribute("src",sn),n.setAttribute("alt","Priority Logo");var r=document.createElement("h1");r.classList.add("header-title"),r.textContent="<pr{io}rity>",e.appendChild(n),e.appendChild(r);var a=document.createElement("div");return a.classList.add("header-right"),a.appendChild(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox"),"enabled"===localStorage.getItem("lightMode")?(e.checked=!0,e.setAttribute("data-checked","true"),e.setAttribute("aria-label","Toggle Dark Mode")):null===localStorage.getItem("lightMode")&&(e.checked=!1,e.setAttribute("data-checked","false"),e.setAttribute("aria-label","Toggle Light Mode"));var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var r=document.createElement("i");r.classList.add("fa-solid","fa-sun"),r.setAttribute("id","sun");var a=document.createElement("i");return a.classList.add("fa-solid","fa-moon"),a.setAttribute("id","moon"),n.appendChild(r),n.appendChild(a),t.appendChild(e),t.appendChild(n),t}()),a.appendChild(function(t){var e=document.createElement("div");e.classList.add("nav-toggle-bars");var n=document.createElement("button");return n.classList.add("nav-toggle-button"),fe(n,{"aria-label":"Open Navigation Menu","aria-expanded":!1,"aria-controls":"nav-primary-aria"}),n.appendChild(e),n}()),t.appendChild(e),t.appendChild(a),content.appendChild(t),t}var cn,un,ln,mn,hn,fn;(function(){var t,e,n=be("#content");n.appendChild(dn()),n.appendChild(function(t,e,n,r,a){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=s,i.appendChild(n);var r=document.createElement("ul");r.classList.add("nav-ul");var a=t[s].listElements,o=document.createDocumentFragment();a.forEach((function(t,e){var n=t[0],r=(t[1],document.createElement("button"));r.classList.add("nav-link"),"All Tasks"===n&&r.setAttribute("aria-current","page");var a=document.createElement("li");a.classList.add("nav-li"),r.textContent=n,r.setAttribute("data-page-name",n.toLowerCase()),a.appendChild(r),o.appendChild(a)})),r.appendChild(o),e.appendChild(n),e.appendChild(r),i.appendChild(e)};for(var s in t)o();return i}(on)),n.appendChild((t=He(bt("all tasks",l.getAllTasks())),(e=document.createElement("main")).appendChild(t),e))})(),(fn=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),fn.insertBefore(function(){var t=document.createElement("input");t.setAttribute("id","project-name-input"),t.setAttribute("type","text"),t.setAttribute("placeholder","Enter Project Name"),t.setAttribute("max-length",24),t.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(n))}));var e=document.createElement("button");e.setAttribute("id","add-project-button"),e.setAttribute("type","button"),e.setAttribute("required",!0),e.setAttribute("name","add-project"),e.setAttribute("form","add-project-form"),e.setAttribute("aria-label","Add Project"),e.textContent="add";var r=document.createElement("button");r.setAttribute("id","cancel-add-project-button"),r.setAttribute("type","button"),r.setAttribute("aria-label","Cancel Add Project"),r.textContent="cancel";var a=document.createElement("div");a.setAttribute("id","project-input-container"),a.appendChild(Be()),a.appendChild(t);var i=document.createElement("div");i.setAttribute("id","project-buttons-container"),i.appendChild(e),i.appendChild(r);var o=document.createElement("form");o.setAttribute("id","add-project-form"),o.setAttribute("aria-label","hidden"),o.setAttribute("data-hidden",!0),o.appendChild(a),o.appendChild(i);var s=document.createElement("button");s.setAttribute("id","new-project-button"),s.setAttribute("type","button"),s.setAttribute("aria-label","New Project"),s.textContent="New Project";var d=document.createElement("div");return d.setAttribute("id","add-project-container"),d.appendChild(s),d.appendChild(o),d}(),fn.lastChild),fn.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),hn=be(".zig-zag-nav"),Ve.zigZagNavReference=hn,Ee.on(i,tn),be(".nav-toggle-button").addEventListener("click",en),cn=be("#theme-toggle-checkbox"),un=cn,ln=nn.savedTheme||(nn.userPrefersLight?"light":"dark"),un.checked="light"===ln,document.body.classList.toggle("light-mode","light"===ln),rn(ln),mn=function(){Ee.emit(u,cn)},cn.addEventListener("change",mn),Ee.on(u,an)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,