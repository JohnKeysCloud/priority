(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");if(a.length)for(var r=a.length-1;r>-1&&!e;)e=a[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n="addNewProject",a="addNewTask",r="handleMain",i="showNav",o="hideNav",s="toggleAddProjectForm",c="toggelAddTaskForm",d="toggleEditTaskForm",u="toggleTheme",l="openProjectDeleteDialog",m="openTaskDeleteDialog",f=(e=[],{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))}});function h(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function g(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=h(t);return!isNaN(Number(n))}const b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function p(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const v={date:p({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:p({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:p({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function y(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;a=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;a=t.values[r]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function k(t){return(e,n={})=>{const a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;const o=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(o.length)}}}var x;const E={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=b[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:v,formatRelative:(t,e,n,a)=>w[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(x.matchPattern);if(!n)return null;const a=n[0],r=t.match(x.parsePattern);if(!r)return null;let i=x.valueCallback?x.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(a.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let T={};function D(){return T}Math.pow(10,8);const L=6048e5,C=864e5,N=6e4,j=36e5;function A(t){const e=h(t);return e.setHours(0,0,0,0),e}function S(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function M(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function P(t){const e=h(t);return function(t,e){const n=A(t),a=A(e),r=n.getTime()-S(n),i=a.getTime()-S(a);return Math.round((r-i)/C)}(e,function(t){const e=h(t),n=M(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function q(t,e){const n=D(),a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=h(t),i=r.getDay(),o=(i<a?7:0)+i-a;return r.setDate(r.getDate()-o),r.setHours(0,0,0,0),r}function O(t){return q(t,{weekStartsOn:1})}function Y(t){const e=h(t),n=e.getFullYear(),a=M(t,0);a.setFullYear(n+1,0,4),a.setHours(0,0,0,0);const r=O(a),i=M(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const o=O(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function H(t){const e=h(t),n=O(e).getTime()-function(t){const e=Y(t),n=M(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),O(n)}(e).getTime();return Math.round(n/L)+1}function F(t,e){const n=h(t),a=n.getFullYear(),r=D(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=M(t,0);o.setFullYear(a+1,0,i),o.setHours(0,0,0,0);const s=q(o,e),c=M(t,0);c.setFullYear(a,0,i),c.setHours(0,0,0,0);const d=q(c,e);return n.getTime()>=s.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}function W(t,e){const n=h(t),a=q(n,e).getTime()-function(t,e){const n=D(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=F(t,e),i=M(t,0);return i.setFullYear(r,0,a),i.setHours(0,0,0,0),q(i,e)}(n,e).getTime();return Math.round(a/L)+1}function I(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const z={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return I("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):I(n+1,2)},d:(t,e)=>I(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>I(t.getHours()%12||12,e.length),H:(t,e)=>I(t.getHours(),e.length),m:(t,e)=>I(t.getMinutes(),e.length),s:(t,e)=>I(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return I(Math.floor(a*Math.pow(10,n-3)),e.length)}},Q={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return z.y(t,e)},Y:function(t,e,n,a){const r=F(t,a),i=r>0?r:1-r;return"YY"===e?I(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):I(i,e.length)},R:function(t,e){return I(Y(t),e.length)},u:function(t,e){return I(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return I(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return I(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return z.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return I(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const r=W(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):I(r,e.length)},I:function(t,e,n){const a=H(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):I(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):z.d(t,e)},D:function(t,e,n){const a=P(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):I(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return I(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return I(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return I(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let r;switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let r;switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return z.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):z.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):I(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):I(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):z.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):z.s(t,e)},S:function(t,e){return z.S(t,e)},X:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return R(r);case"XXXX":case"XX":return G(r);default:return G(r,":")}},x:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return R(r);case"xxxx":case"xx":return G(r);default:return G(r,":")}},O:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+B(r,":");default:return"GMT"+G(r,":")}},z:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+B(r,":");default:return"GMT"+G(r,":")}},t:function(t,e,n,a){const r=a._originalDate||t;return I(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return I((a._originalDate||t).getTime(),e.length)}};function B(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;return 0===i?n+String(r):n+String(r)+e+I(i,2)}function R(t,e){return t%60==0?(t>0?"-":"+")+I(Math.abs(t)/60,2):G(t,e)}function G(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+I(Math.floor(a/60),2)+e+I(a%60,2)}const X=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},$=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},Z={p:$,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],r=n[2];if(!r)return X(t,e);let i;switch(a){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",X(a,e)).replace("{{time}}",$(r,e))}},U=["D","DD"],K=["YY","YYYY"];function V(t){return-1!==U.indexOf(t)}function J(t){return-1!==K.indexOf(t)}function _(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const tt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,at=/''/g,rt=/[a-zA-Z]/;function it(t,e,n){const a=D(),r=n?.locale??a.locale??E,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=h(t);if(!g(s))throw new RangeError("Invalid time value");const c={firstWeekContainsDate:i,weekStartsOn:o,locale:r,_originalDate:s};return e.match(et).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,Z[e])(t,r.formatLong):t})).join("").match(tt).map((function(a){if("''"===a)return"'";const i=a[0];if("'"===i)return function(t){const e=t.match(nt);return e?e[1].replace(at,"'"):t}(a);const o=Q[i];if(o)return!n?.useAdditionalWeekYearTokens&&J(a)&&_(a,e,String(t)),!n?.useAdditionalDayOfYearTokens&&V(a)&&_(a,e,String(t)),o(s,a,r.localize,c);if(i.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return a})).join("")}function ot(t,e){const n=h(t);return isNaN(e)?M(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function st(t,e){const n=e?.additionalDigits??2,a=function(t){const e={},n=t.split(ct.dateTimeDelimiter);let a;if(n.length>2)return e;if(/:/.test(n[0])?a=n[0]:(e.date=n[0],a=n[1],ct.timeZoneDelimiter.test(e.date)&&(e.date=t.split(ct.timeZoneDelimiter)[0],a=t.substr(e.date.length,t.length))),a){const t=ct.timezone.exec(a);t?(e.time=a.replace(t[1],""),e.timezone=t[1]):e.time=a}return e}(t);let r;if(a.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};const r=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?r:100*i,restDateString:t.slice((a[1]||a[2]).length)}}(a.date,n);r=function(t,e){if(null===e)return new Date(NaN);const n=t.match(dt);if(!n)return new Date(NaN);const a=!!n[4],r=mt(n[1]),i=mt(n[2])-1,o=mt(n[3]),s=mt(n[4]),c=mt(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,c)?function(t,e,n){const a=new Date(0);a.setUTCFullYear(t,0,4);const r=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,s,c):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(ht[e]||(gt(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(gt(t)?366:365)}(e,r)?(t.setUTCFullYear(e,i,Math.max(r,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);const i=r.getTime();let o,s=0;if(a.time&&(s=function(t){const e=t.match(ut);if(!e)return NaN;const n=ft(e[1]),a=ft(e[2]),r=ft(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,r)?n*j+a*N+1e3*r:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){const t=new Date(i+s),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return o=function(t){if("Z"===t)return 0;const e=t.match(lt);if(!e)return 0;const n="+"===e[1]?-1:1,a=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(a*j+r*N):NaN}(a.timezone),isNaN(o)?new Date(NaN):new Date(i+s+o)}const ct={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},dt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ut=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,lt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function mt(t){return t?parseInt(t):1}function ft(t){return t&&parseFloat(t.replace(",","."))||0}const ht=[31,null,31,30,31,30,31,31,30,31,30,31];function gt(t){return t%400==0||t%4==0&&t%100!=0}function bt(t,e){const n=h(t),a=h(e),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function pt(t){return pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pt(t)}function vt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function wt(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?vt(Object(n),!0).forEach((function(e){var a,r,i;a=t,r=e,i=n[e],(r=function(t){var e=function(t,e){if("object"!==pt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==pt(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===pt(e)?e:String(e)}(r))in a?Object.defineProperty(a,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):a[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):vt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return bt(st(n),st(a))}))},getTaskArray:function(){return n.tasks}}}function yt(t){var e,n=t.target,a=n.tagName.toLowerCase();if("button"===a||"input"===a){var r=n.closest(".task-item");if(r){var i=(e=r.querySelector(".task-item-title").textContent.toLowerCase(),f.getAllTasks().find((function(t){return t.getName()===e}))),o={"task-item-checkbox":function(){return e=i,void(!0===(a=(t=n).checked)?(e.setCompleted(!0),t.setAttribute("data-checked","true")):!1===a&&(e.setCompleted(!1),t.setAttribute("data-checked","false")));var t,e,a},"task-priority-star-button":function(){return e=i,a=(t=n).getAttribute("data-checked"),function(t,e){"false"===e?t.setAttribute("data-checked","true"):"true"===e&&t.setAttribute("data-checked","false")}(t,a),void("false"===a?e.setPriority(!0):"true"===a&&e.setPriority(!1));var t,e,a},"modify-task-button":function(){return Oe(i)}}[n.className];o&&o()}}}function kt(){var t=document.createElement("p");t.classList.add("hvr-wobble-vertical"),t.setAttribute("id","placeholder-text"),t.textContent="nothing to see here...";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}function xt(t){var e=t.firstChild;return!(e&&e.hasAttribute("id","placeholder-container")||!e)}function Et(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}var Tt={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}};function Dt(t,e){for(var n in e)t.setAttribute(n,e[n])}function Lt(t){t.showModal(),Dt(t,{"data-hidden":"visible","aria-label":"visible"})}function Ct(t){t.close(),Dt(t,{"data-hidden":"hidden","aria-label":"hidden"})}var Nt=!1;function jt(t){var e,n,a="delete"===t.target.textContent,r="cancel"===t.target.textContent;if(a||r){var i=this.parentNode.parentNode;a?(n=(e=Se).getProjectName(),f.getProjectObject(n).deleteTask(e),function(t){var e=Et('[data-task-name="'.concat(t.getName(),'"]'));e&&e.remove();var n=Et("#task-list"),a=xt(n);"link"!==ln.linkType||a||n.appendChild(kt())}(e),Ct(i),Tt.off(m,At),Nt=!1):r&&(Ct(i),Tt.off(m,At),Nt=!1)}}function At(){Lt(Et(".delete-confirmation-dialog")),Et(".delete-confirmation-button-container").addEventListener("click",jt)}class St{subPriority=0;validate(t,e){return!0}}class Mt extends St{constructor(t,e,n,a,r){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=a,r&&(this.subPriority=r)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class Pt extends St{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:M(t,function(t,e){const n=e instanceof Date?M(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class qt{run(t,e,n,a){const r=this.parse(t,e,n,a);return r?{setter:new Mt(r.value,this.validate,this.set,this.priority,this.subPriority),rest:r.rest}:null}validate(t,e,n){return!0}}const Ot=/^(1[0-2]|0?\d)/,Yt=/^(3[0-1]|[0-2]?\d)/,Ht=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Ft=/^(5[0-3]|[0-4]?\d)/,Wt=/^(2[0-3]|[0-1]?\d)/,It=/^(2[0-4]|[0-1]?\d)/,zt=/^(1[0-1]|0?\d)/,Qt=/^(1[0-2]|0?\d)/,Bt=/^[0-5]?\d/,Rt=/^[0-5]?\d/,Gt=/^\d/,Xt=/^\d{1,2}/,$t=/^\d{1,3}/,Zt=/^\d{1,4}/,Ut=/^-?\d+/,Kt=/^-?\d/,Vt=/^-?\d{1,2}/,Jt=/^-?\d{1,3}/,_t=/^-?\d{1,4}/,te=/^([+-])(\d{2})(\d{2})?|Z/,ee=/^([+-])(\d{2})(\d{2})|Z/,ne=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,ae=/^([+-])(\d{2}):(\d{2})|Z/,re=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function ie(t,e){return t?{value:e(t.value),rest:t.rest}:t}function oe(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function se(t,e){const n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};const a="+"===n[1]?1:-1,r=n[2]?parseInt(n[2],10):0,i=n[3]?parseInt(n[3],10):0,o=n[5]?parseInt(n[5],10):0;return{value:a*(r*j+i*N+1e3*o),rest:e.slice(n[0].length)}}function ce(t){return oe(Ut,t)}function de(t,e){switch(t){case 1:return oe(Gt,e);case 2:return oe(Xt,e);case 3:return oe($t,e);case 4:return oe(Zt,e);default:return oe(new RegExp("^\\d{1,"+t+"}"),e)}}function ue(t,e){switch(t){case 1:return oe(Kt,e);case 2:return oe(Vt,e);case 3:return oe(Jt,e);case 4:return oe(_t,e);default:return oe(new RegExp("^-?\\d{1,"+t+"}"),e)}}function le(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function me(t,e){const n=e>0,a=n?e:1-e;let r;if(a<=50)r=t||100;else{const e=a+50;r=t+100*Math.floor(e/100)-(t>=e%100?100:0)}return n?r:1-r}function fe(t){return t%400==0||t%4==0&&t%100!=0}const he=[31,28,31,30,31,30,31,31,30,31,30,31],ge=[31,29,31,30,31,30,31,31,30,31,30,31];function be(t,e,n){const a=D(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,i=h(t),o=i.getDay(),s=7-r;return ot(i,e<0||e>6?e-(o+s)%7:((e%7+7)%7+s)%7-(o+s)%7)}function pe(t,e){const n=h(t);return ot(n,e-function(t){let e=h(t).getDay();return 0===e&&(e=7),e}(n))}const ve={G:new class extends qt{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends qt{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return ie(de(4,t),a);case"yo":return ie(n.ordinalNumber(t,{unit:"year"}),a);default:return ie(de(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const a=t.getFullYear();if(n.isTwoDigitYear){const e=me(n.year,a);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const r="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(r,0,1),t.setHours(0,0,0,0),t}},Y:new class extends qt{priority=130;parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return ie(de(4,t),a);case"Yo":return ie(n.ordinalNumber(t,{unit:"year"}),a);default:return ie(de(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,a){const r=F(t,a);if(n.isTwoDigitYear){const e=me(n.year,r);return t.setFullYear(e,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),q(t,a)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),q(t,a)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends qt{priority=130;parse(t,e){return ue("R"===e?4:e.length,t)}set(t,e,n){const a=M(t,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),O(a)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends qt{priority=130;parse(t,e){return ue("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends qt{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return de(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends qt{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return de(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends qt{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"M":return ie(oe(Ot,t),a);case"MM":return ie(de(2,t),a);case"Mo":return ie(n.ordinalNumber(t,{unit:"month"}),a);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends qt{priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"L":return ie(oe(Ot,t),a);case"LL":return ie(de(2,t),a);case"Lo":return ie(n.ordinalNumber(t,{unit:"month"}),a);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends qt{priority=100;parse(t,e,n){switch(e){case"w":return oe(Ft,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return de(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n,a){return q(function(t,e,n){const a=h(t),r=W(a,n)-e;return a.setDate(a.getDate()-7*r),a}(t,n,a),a)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends qt{priority=100;parse(t,e,n){switch(e){case"I":return oe(Ft,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return de(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n){return O(function(t,e){const n=h(t),a=H(n)-e;return n.setDate(n.getDate()-7*a),n}(t,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends qt{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return oe(Yt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return de(e.length,t)}}validate(t,e){const n=fe(t.getFullYear()),a=t.getMonth();return n?e>=1&&e<=ge[a]:e>=1&&e<=he[a]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends qt{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return oe(Ht,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return de(e.length,t)}}validate(t,e){return fe(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends qt{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=be(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends qt{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return ie(de(e.length,t),r);case"eo":return ie(n.ordinalNumber(t,{unit:"day"}),r);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=be(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends qt{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return ie(de(e.length,t),r);case"co":return ie(n.ordinalNumber(t,{unit:"day"}),r);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=be(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends qt{priority=90;parse(t,e,n){const a=t=>0===t?7:t;switch(e){case"i":case"ii":return de(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return ie(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiii":return ie(n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiiii":return ie(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);default:return ie(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=pe(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends qt{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(le(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends qt{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(le(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends qt{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(le(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends qt{priority=70;parse(t,e,n){switch(e){case"h":return oe(Qt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const a=t.getHours()>=12;return a&&n<12?t.setHours(n+12,0,0,0):a||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends qt{priority=70;parse(t,e,n){switch(e){case"H":return oe(Wt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends qt{priority=70;parse(t,e,n){switch(e){case"K":return oe(zt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends qt{priority=70;parse(t,e,n){switch(e){case"k":return oe(It,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const a=n<=24?n%24:n;return t.setHours(a,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends qt{priority=60;parse(t,e,n){switch(e){case"m":return oe(Bt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return de(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends qt{priority=50;parse(t,e,n){switch(e){case"s":return oe(Rt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return de(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends qt{priority=30;parse(t,e){return ie(de(e.length,t),(t=>Math.floor(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends qt{priority=10;parse(t,e){switch(e){case"X":return se(te,t);case"XX":return se(ee,t);case"XXXX":return se(ne,t);case"XXXXX":return se(re,t);default:return se(ae,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-S(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends qt{priority=10;parse(t,e){switch(e){case"x":return se(te,t);case"xx":return se(ee,t);case"xxxx":return se(ne,t);case"xxxxx":return se(re,t);default:return se(ae,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-S(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends qt{priority=40;parse(t){return ce(t)}set(t,e,n){return[M(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends qt{priority=20;parse(t){return ce(t)}set(t,e,n){return[M(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},we=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ye=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ke=/^'([^]*?)'?$/,xe=/''/g,Ee=/\S/,Te=/[a-zA-Z]/;function De(t,e,n,a){const r=Object.assign({},D()),i=a?.locale??r.locale??E,o=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,s=a?.weekStartsOn??a?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0;if(""===e)return""===t?h(n):M(n,NaN);const c={firstWeekContainsDate:o,weekStartsOn:s,locale:i},d=[new Pt],u=e.match(ye).map((t=>{const e=t[0];return e in Z?(0,Z[e])(t,i.formatLong):t})).join("").match(we),l=[];for(let r of u){!a?.useAdditionalWeekYearTokens&&J(r)&&_(r,e,t),!a?.useAdditionalDayOfYearTokens&&V(r)&&_(r,e,t);const o=r[0],s=ve[o];if(s){const{incompatibleTokens:e}=s;if(Array.isArray(e)){const t=l.find((t=>e.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${r}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${r}\` and any other token at the same time`);l.push({token:o,fullToken:r});const a=s.run(t,r,i.match,c);if(!a)return M(n,NaN);d.push(a.setter),t=a.rest}else{if(o.match(Te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===r?r="'":"'"===o&&(r=r.match(ke)[1].replace(xe,"'")),0!==t.indexOf(r))return M(n,NaN);t=t.slice(r.length)}}if(t.length>0&&Ee.test(t))return M(n,NaN);const m=d.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>d.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let f=h(n);if(isNaN(f.getTime()))return M(n,NaN);const g={};for(const t of m){if(!t.validate(f,c))return M(n,NaN);const e=t.set(f,g,c);Array.isArray(e)?(f=e[0],Object.assign(g,e[1])):f=e}return M(n,f)}function Le(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=function(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return kt();if(e.length>0){var a=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){a.appendChild(function(t){var e=t.getName().toLowerCase(),n=t.getDetails(),a=t.getDueDate(),r=t.getCompleted(),i=t.getPriority(),o=document.createElement("input");Dt(o,{"data-checked":r?"true":"false",type:"checkbox"}),o.classList.add("task-item-checkbox"),o.checked=!!r;var s=document.createElement("div");s.classList.add("task-checkbox-container"),s.appendChild(o);var c=document.createElement("h4");c.classList.add("task-item-title"),c.textContent=e;var d=document.createElement("p");d.classList.add("task-item-details"),d.textContent=n;var u,l=document.createElement("p");l.classList.add("task-item-date"),l.textContent="Due ".concat((u={year:"numeric",month:"short",day:"numeric"},De(a,"yyyy-MM-dd",new Date).toLocaleDateString("en-us",u)));var m=document.createElement("span");m.classList.add("task-priority-star-icon","material-symbols-outlined"),m.textContent="star";var f=document.createElement("button");f.classList.add("task-priority-star-button"),Dt(f,{"aria-label":"Toggle priority","data-checked":i?"true":"false",type:"button"}),f.appendChild(m);var h=document.createElement("button");h.classList.add("modify-task-button"),Dt(h,{"aria-label":"Edit Task",type:"button"});var g=document.createElement("i");g.classList.add("fa-solid","fa-ellipsis-vertical"),h.appendChild(g);var b=document.createElement("div");b.classList.add("task-item-button-container"),b.append(f,h);var p=document.createElement("div");p.classList.add("task-right-side-container"),p.append(l,b);var v=document.createElement("li");return v.classList.add("task-item"),v.setAttribute("data-task-name",e),v.append(s,c),""!==n.trim()&&v.appendChild(d),v.appendChild(p),v}(t))})),a}}(t);return n&&e.appendChild(n),e}function Ce(){var t=Et("#edit-task-form"),e=t.querySelector("#edit-task-title"),n=t.querySelector("#edit-task-details"),a=t.querySelector("#edit-task-due-date"),r=e.value.trim().toLowerCase(),i=n.value.trim(),o=a.value;return r?o?o<(new Date).toISOString().slice(0,10)?alert("Enter Valid Due Date"):(t.reset(),Se.setName(r),Se.setDetails(i),Se.setDueDate(o),Oe(),void("project"===ln.linkType?Fe(ln.linkOrProjectName):"link"===ln.linkType&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:activeLink,e=Et("#main-content"),n=e.querySelector("#task-list"),a=Le(wt(t,f.getAllTasks()));n.remove(),e.appendChild(a),xt(a)&&Ye(a)}(un))):alert("Enter Task Due Date"):alert("Enter Task Name")}function Ne(t){if(t.target.classList.contains("edit-task-button")){var e,n=t.target.getAttribute("id"),a="cancel-edit-task-button"===n,r="delete-edit-task-button"===n;"save-edit-task-button"===n?Ce():a?Oe():r&&(e=Et(".delete-confirmation-dialog"),Oe(),Lt(e),!0!==Nt&&(Nt=!0,Tt.on(m,At)),Tt.emit(m))}}function je(t){"Enter"===t.key&&(t.preventDefault(),Ce())}var Ae,Se,Me=!1;function Pe(t){var e=Et(".edit-task-button-container");"hidden"===t?e.removeEventListener("click",Ne):"visible"===t&&e.addEventListener("click",Ne)}function qe(t){var e,n,a,r=Et("#edit-task-dialog"),i=r.getAttribute("data-hidden");"hidden"===i?(Ae="visible",Se=t,function(t){var e=Et("#edit-task-dialog"),n=e.querySelector("#edit-task-title"),a=e.querySelector("#edit-task-details"),r=e.querySelector("#edit-task-due-date"),i=t.getName(),o=t.getDetails(),s=t.getDueDate();n.value=i,a.value=o,r.value=s}(t),Lt(r),Pe(Ae)):"visible"===i&&(Ae="closing",n=Ct,(e=r).setAttribute("data-hidden","closing"),e.addEventListener("animationend",(function t(){n(e),e.removeEventListener("animationend",t),Ae="hidden"})),Pe(Ae)),a=Ae,function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",je)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",je)}))}(r.querySelectorAll(".edit-task-input"),a)}function Oe(t){Tt.emit(d,t)}function Ye(t){var e,n;e=Et("#main-container"),n=function(){var t=document.createElement("h2");t.setAttribute("id","edit-task-heading"),t.textContent="Edit Task";var e=document.createElement("dialog");return Dt(e,{id:"edit-task-dialog","aria-label":"hidden","data-hidden":"hidden"}),e.append(t,function(){var t=document.createElement("label");t.classList.add("edit-task-label"),t.setAttribute("for","edit-task-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("edit-task-input"),Dt(e,{type:"text",id:"edit-task-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("edit-task-label"),a.setAttribute("for","edit-task-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("edit-task-input"),Dt(r,{type:"text",id:"edit-task-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("edit-task-label"),o.setAttribute("for","edit-task-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("edit-task-input"),Dt(s,{type:"date",id:"edit-task-due-date",required:!0,placeholder:"yyyy-mm-dd"});var c=document.createElement("div");c.classList.add("due-date-container","input-container"),c.append(o,s);var d=document.createElement("button");d.classList.add("edit-task-button","bubble-button"),Dt(d,{id:"save-edit-task-button",type:"button","aria-label":"Edit Task",form:"edit-task-form"}),d.textContent="save";var u=document.createElement("button");u.classList.add("edit-task-button","bubble-button"),Dt(u,{id:"cancel-edit-task-button",type:"button","aria-label":"Cancel Edit Task"}),u.textContent="cancel";var l=document.createElement("button");l.classList.add("edit-task-button","no-bubble-button","delete-button"),Dt(l,{id:"delete-edit-task-button",type:"button","aria-label":"Delete Task"}),l.textContent="delete task";var m=document.createElement("div");m.classList.add("edit-task-button-container"),m.append(d,u,l);var f=document.createElement("form");f.setAttribute("id","edit-task-form"),f.append(n,i,c,m);var h=document.createElement("div");return h.classList.add("edit-task-form-container"),h.appendChild(f),h}()),e}(),e.appendChild(n),function(t){t.addEventListener("click",yt)}(t),function(t){var e,n;(e=t.querySelectorAll(".task-item-details"),n=[],e.forEach((function(t){t.clientWidth<t.scrollWidth&&n.push(t)})),n).forEach((function(t){var e,n,a;n=(e=t).scrollWidth-e.clientWidth,a=-1,function t(r){var i=e.scrollLeft+.5*a;i>=n?a=-1:i<=0&&(a=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))}(t),Me||(Tt.on(d,qe),Me=!0)}var He={projectObject:null,taskListElement:null,taskListHasTaskItems:function(){return this.projectObject&&this.projectObject.getTaskArray().length>0}};function Fe(t){He.taskListElement=Et("#task-list"),He.projectObject=f.getProjectObject(t);var e=He.taskListElement.parentNode;He.taskListElement.remove();var n=Le(He.projectObject);He.taskListElement=n,e.appendChild(n),He.taskListHasTaskItems&&Ye(n)}function We(){var t=Et("#add-task-form"),e=t.querySelector("#task-add-title"),n=t.querySelector("#task-add-details"),a=t.querySelector("#task-add-due-date"),r=e.value.trim().toLowerCase(),i=ln.linkOrProjectName,o=n.value.trim(),s=a.value,c=(new Date).toISOString().slice(0,10);if(!r)return alert("Enter Task Name");if(!s)return alert("Enter Task Due Date");if(s<c)return alert("Enter Valid Due Date");t.reset();var d=function(t,e,n,a){if("string"!=typeof t&&"string"!=typeof a&&"string"!=typeof n)throw new Error("⚠️ name, details & due-date, must all be strings");var r={name:t,projectName:e,dueDate:n,details:a,priority:!1,completed:!1};return{getName:function(){return r.name},setName:function(t){r.name=t},getDetails:function(){return r.details},setDetails:function(t){r.details=t},getDueDate:function(){return r.dueDate},setDueDate:function(t){r.dueDate=t},getPriority:function(){return r.priority},setPriority:function(t){r.priority=t},getCompleted:function(){return r.completed},setCompleted:function(t){r.completed=t},setProjectName:function(t){r.project=t},getProjectName:function(){return r.projectName}}}(r,i,s,o);f.addTaskToProject(i,d),Re(),Fe(i)}function Ie(){Tt.emit(a)}function ze(t){"Enter"===t.key&&(t.preventDefault(),Tt.emit(a))}function Qe(t){ln.addTaskFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",Qe)}function Be(){var t,e,n=Et(".add-task-form-container"),r=ln.addTaskFormState;"hidden"===r?(Dt(n,{"data-hidden":"false","aria-label":"visible"}),ln.addTaskFormState="visible"):"visible"===r&&(Dt(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,ln.addTaskFormState="closing",t.addEventListener("animationend",Qe)),function(t,e){!function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",ze)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",ze)}))}(t.querySelectorAll(".add-task-input"),e)}(n,ln.addTaskFormState),function(t){var e=Et("#add-task-button");"visible"===t?e.addEventListener("click",Ie):"closing"===t&&e.removeEventListener("click",Ie)}(e=ln.addTaskFormState),function(t){"visible"===t?Tt.on(a,We):"closing"===t&&Tt.off(a,We)}(e),function(t){!function(t){var e=Et("#cancel-add-task-button");"visible"===t?e.addEventListener("click",Re):"closing"===t&&e.removeEventListener("click",Re)}(t)}(ln.addTaskFormState)}function Re(){Tt.emit(c)}function Ge(t){"Enter"===t.key&&(t.preventDefault(),Tt.emit(n))}var Xe={projectFormState:"hidden"};function $e(t){Xe.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",$e)}function Ze(){var t,e,a=Et("#add-project-form"),r=Xe.projectFormState,i=Et("#project-name-input");"hidden"===r?(Dt(a,{"data-hidden":"false","aria-label":"visible"}),Xe.projectFormState="visible"):"visible"===r&&(Dt(a,{"data-hidden":"closing","aria-label":"hidden"}),t=a,Xe.projectFormState="closing",t.addEventListener("animationend",$e),i.value=""),function(t,e){!function(t,e){"visible"===e?t.addEventListener("keydown",Ge):"closing"===e&&t.removeEventListener("keydown",Ge)}(t,e)}(i,Xe.projectFormState),function(t){var e=Et("#add-project-button");"visible"===t?e.addEventListener("click",tn):"closing"===t&&e.removeEventListener("click",tn)}(e=Xe.projectFormState),function(t){"visible"===t?Tt.on(n,_e):"closing"===t&&Tt.off(n,_e)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",Ue):"closing"===t&&e.removeEventListener("click",Ue)}(t)}(Xe.projectFormState)}function Ue(){Tt.emit(s)}function Ke(){var t=Et("#new-project-button");!0===gn.open?t.addEventListener("click",Ue):!1===gn.open&&t.removeEventListener("click",Ue),function(t){!0===t.open?Tt.on(s,Ze):!1===t.open&&Tt.off(s,Ze)}(gn)}function Ve(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function Je(t,e){for(var n=t.getProjectArray().slice().reverse();e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),Dt(e,{type:"button","aria-label":"Project ".concat(t),"data-project-name":t}),e.textContent=t;var n=Ve(),a=document.createElement("li");return a.classList.add("project-li","nav-li"),e.setAttribute("aria-label","Project ".concat(t)),a.append(n,e),a}(t.getName()))}))}function _e(){var t=Et("#add-project-form"),e=t.querySelector("#project-name-input").value.trim().toLowerCase();if(!e)return alert("Enter Project Name");t.reset();var n=function(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},deleteTask:function(t){e.tasks.splice(e.tasks.indexOf(t),1)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return bt(st(n),st(a))}))},getTaskArray:function(){return e.tasks}}}(e);f.addProject(n);var a=Et("#project-nav-list");Je(f,a),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(a),Ue(),Xe.projectFormState="hidden"}function tn(){Tt.emit(n)}function en(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var a=Le(t),r=document.createElement("div");r.setAttribute("id","main-content"),r.appendChild(a);var i,o=document.createElement("div"),s=t.getType();return o.setAttribute("id","main-container"),o.appendChild(e),"project"===s&&o.appendChild(((i=document.createElement("div")).setAttribute("id","project-handling-container"),i.append(function(){var t=document.createElement("button");t.classList.add("no-bubble-button","add-button"),Dt(t,{id:"add-task-form-opener-button",type:"button","aria-label":"Add Task"}),t.textContent="add task";var e=document.createElement("button");e.classList.add("no-bubble-button","delete-button"),Dt(e,{id:"delete-project-button",type:"button","aria-label":"Delete Project"}),e.textContent="delete project";var n=document.createElement("div");return n.setAttribute("id","project-button-container"),n.append(e,t),n}(),function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","task-add-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),Dt(e,{type:"text",id:"task-add-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("add-task-label"),a.setAttribute("for","task-add-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("add-task-input"),Dt(r,{type:"text",id:"task-add-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("add-task-label"),o.setAttribute("for","task-add-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("add-task-input"),Dt(s,{type:"date",id:"task-add-due-date",required:!0});var c=document.createElement("div");c.classList.add("due-date-container","input-container"),c.append(o,s);var d=document.createElement("button");d.classList.add("add-task-button","bubble-button"),Dt(d,{id:"add-task-button",type:"button","aria-label":"Add Task",name:"add-task-button",form:"add-task-form"}),d.textContent="add";var u=document.createElement("button");u.classList.add("add-task-button","bubble-button"),Dt(u,{id:"cancel-add-task-button",type:"button","aria-label":"Cancel Add Task"}),u.textContent="cancel";var l=document.createElement("div");l.classList.add("add-task-button-container"),l.append(d,u);var m=document.createElement("form");m.setAttribute("id","add-task-form"),m.append(n,i,c,l);var f=document.createElement("div");return f.classList.add("add-task-form-container"),Dt(f,{id:"add-task-form-container","data-hidden":!0,"aria-label":"hidden"}),f.appendChild(m),f}()),i)),o.appendChild(r),o.appendChild(function(){var t=document.createElement("h2");t.classList.add("delete-confirmation-heading"),t.textContent="please confirm:";var e=document.createElement("button");e.classList.add("delete-confirmation-button","bubble-button"),e.textContent="delete";var n=document.createElement("button");n.classList.add("delete-confirmation-button","bubble-button"),n.textContent="cancel";var a=document.createElement("div");a.classList.add("delete-confirmation-button-container"),a.appendChild(e),a.appendChild(n);var r=document.createElement("div");r.classList.add("delete-confirmation-modal"),r.appendChild(t),r.appendChild(a);var i=document.createElement("dialog");return i.classList.add("delete-confirmation-dialog"),i.setAttribute("aria-hidden","true"),i.appendChild(r),i}()),o}var nn=!1;function an(){var t,e,n,a=He.projectObject,r=Et("#project-nav-list");f.deleteProject(a),He.taskListHasTaskItems()&&(Tt.off(d,qe),Me=!1),t=Et("#main-container"),e=t.parentNode,n=en(wt("all tasks",f.getAllTasks())),t.remove(),e.appendChild(n),function(){var t=Et("#project-nav-list"),e=t.closest(".zig-zag-nav").querySelector('.nav-link[data-page-name="all tasks"]');Je(f,t),e.setAttribute("aria-current","true")}(),Je(f,r),ln.isAddTaskButtonListenerAttached=!1}function rn(t){var e="delete"===t.target.textContent,n="cancel"===t.target.textContent;if(e||n){var a=this.parentNode.parentNode;e?(an(),Ct(a),Tt.off(c,Be),Tt.off(l,on),nn=!1):n&&(Ct(a),Tt.off(l,on),nn=!1)}}function on(){Lt(Et(".delete-confirmation-dialog")),Et(".delete-confirmation-button-container").addEventListener("click",rn)}function sn(){!0!==nn&&(nn=!0,Tt.on(l,on)),Tt.emit(l)}function cn(t){return cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},cn(t)}function dn(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==cn(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==cn(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===cn(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var un,ln=dn(dn(dn(dn({linkOrProjectName:null,linkType:null},"linkOrProjectName",null),"addTaskFormState","hidden"),"isDeleteProjectButtonListenerAttached",!1),"isAddTaskButtonListenerAttached",!1);function mn(t){var e=function(t){var e=t.hasAttribute("data-project-name"),n=t.hasAttribute("data-page-name");if(e){var a=f.getProjectArray(),r=t.getAttribute("data-project-name"),i=a.find((function(t){return t.getName()===r}));return ln.linkType="project",i}if(n){var o=t.getAttribute("data-page-name"),s=function(t,e){var n=new Date;return({"all tasks":function(){return e},priorities:function(){return e.filter((function(t){return!0===t.getPriority()}))},today:function(){var t=it(n,"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()===t}))},"next 7 days":function(){var t=it(ot(n,7),"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()<=t}))}}[t]||function(){return e})()}(o,f.getAllTasks()),c=wt(o,s);return ln.linkType="link",c}}(t),n=e.getName(),a=e.getType(),r=en(e),i=r.querySelector("#task-list");ln.isAddTaskButtonListenerAttached&&(Et("#add-task-form-opener-button").removeEventListener("click",Re),ln.isAddTaskButtonListenerAttached=!1,Tt.off(c,Be));var o,s,d=Et("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(d),d.appendChild(r),ln.linkOrProjectName=n,"project"===a&&(o=e,He.projectObject=f.getProjectObject(o),Et("#delete-project-button").addEventListener("click",sn),ln.isDeleteProjectButtonListenerAttached=!0,function(t){var e=Et("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",Re),ln.isAddTaskButtonListenerAttached=!0)}(s=a),function(t){"project"===t&&Tt.on(c,Be)}(s)),xt(i)&&Ye(i),t.addEventListener("transitionend",wn,{once:!0})}function fn(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(Et(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page"),un=t.textContent.toLowerCase()}(e),function(t){Tt.emit(r,t)}(e))}function hn(){var t;!0===gn.open?Tt.on(r,mn):!1===gn.open&&Tt.off(r,mn),t=Et(".zig-zag-nav"),!0===gn.open?t.addEventListener("click",fn):!1===gn.open&&t.removeEventListener("click",fn)}var gn={open:!1,animating:!1,zigZagNavReference:null};function bn(){gn.open=!1,gn.animating=!1,gn.zigZagNavReference.removeEventListener("animationend",bn),gn.zigZagNavReference.setAttribute("aria-hidden",!0),gn.zigZagNavReference.setAttribute("data-visibility",!1),Ke(),hn(),Tt.on(i,vn),Tt.off(o,vn)}function pn(){gn.animating=!0,gn.zigZagNavReference.setAttribute("data-visibility","closing"),gn.zigZagNavReference.addEventListener("animationend",bn)}function vn(){gn.open=!0,gn.animating=!1,gn.zigZagNavReference.setAttribute("aria-hidden",!1),gn.zigZagNavReference.setAttribute("data-visibility",!0),hn(),Ke(),Tt.on(o,pn),Tt.off(i,vn)}function wn(){var t=Et(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),Tt.emit(o);else{if(!0===gn.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),Tt.emit(i)}}var yn={savedTheme:function(t){try{return localStorage.getItem("savedTheme")}catch(t){return console.error("Error accessing localStorage:",t),null}}(),userPrefersLight:window.matchMedia("(prefers-color-scheme: light)").matches};function kn(t){var e=document.head.querySelector('meta[name="color-scheme"]');e||((e=document.createElement("meta")).setAttribute("name","color-scheme"),document.head.appendChild(e)),e.setAttribute("content","light"===t?"light dark":"dark light")}function xn(t){var e=t.checked?"light":"dark";yn.savedTheme=e,function(t,e){try{localStorage.setItem("savedTheme",e)}catch(t){console.error("Error setting localStorage item:",t)}}(0,e),document.body.classList.toggle("light-mode","light"===e),kn(e)}var En={menu:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},projects:{listElements:[]}};const Tn=t.p+"f0f19e6f57687481453e.webp";var Dn,Ln,Cn,Nn,jn,An,Sn,Mn;Et("#content").append(function(){var t=document.createElement("img");t.classList.add("header-logo"),Dt(t,{alt:"Priority Logo","aria-label":"Priority Logo",src:Tn});var e=document.createElement("h1");e.classList.add("header-title"),e.textContent="<pr{io}rity>";var n=document.createElement("div");n.classList.add("header-left"),n.append(t,e);var a=document.createElement("div");a.classList.add("header-right"),a.append(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox"),"enabled"===localStorage.getItem("lightMode")?(e.checked=!0,e.setAttribute("data-checked","true"),e.setAttribute("aria-label","Toggle Dark Mode")):null===localStorage.getItem("lightMode")&&(e.checked=!1,e.setAttribute("data-checked","false"),e.setAttribute("aria-label","Toggle Light Mode"));var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var a=document.createElement("i");a.classList.add("fa-solid","fa-sun"),a.setAttribute("id","sun");var r=document.createElement("i");return r.classList.add("fa-solid","fa-moon"),r.setAttribute("id","moon"),n.appendChild(a),n.appendChild(r),t.appendChild(e),t.appendChild(n),t}(),function(t){var e=document.createElement("div");e.classList.add("nav-toggle-bars");var n=document.createElement("button");return n.classList.add("nav-toggle-button"),Dt(n,{"aria-label":"Open Navigation Menu","aria-expanded":!1,"aria-controls":"nav-primary-aria"}),n.appendChild(e),n}());var r=document.createElement("header");return r.append(n,a),r}(),function(t,e,n,a,r){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=s,i.appendChild(n);var a=document.createElement("ul");a.classList.add("nav-ul");var r=t[s].listElements,o=document.createDocumentFragment();r.forEach((function(t,e){var n=t[0],a=(t[1],document.createElement("button"));a.classList.add("nav-link"),"All Tasks"===n&&a.setAttribute("aria-current","page");var r=document.createElement("li");r.classList.add("nav-li"),a.textContent=n,a.setAttribute("data-page-name",n.toLowerCase()),r.appendChild(a),o.appendChild(r)})),a.appendChild(o),e.appendChild(n),e.appendChild(a),i.appendChild(e)};for(var s in t)o();return i}(En),(Sn=en(wt("all tasks",f.getAllTasks())),(Mn=document.createElement("main")).appendChild(Sn),Mn)),(An=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),An.insertBefore(function(){var t=document.createElement("input");Dt(t,{id:"project-name-input",type:"text",placeholder:"Enter Project Name","max-length":"24"});var e=document.createElement("button");Dt(e,{id:"add-project-button",class:"bubble-button",type:"button",required:!0,name:"add-project",form:"add-project-form","aria-label":"Add Project"}),e.textContent="add";var n=document.createElement("button");Dt(n,{id:"cancel-add-project-button",class:"bubble-button",type:"button","aria-label":"Cancel Add Project"}),n.textContent="cancel";var a=document.createElement("div");a.setAttribute("id","project-input-container"),a.append(Ve(),t);var r=document.createElement("div");r.setAttribute("id","project-buttons-container"),r.append(e,n);var i=document.createElement("form");Dt(i,{id:"add-project-form","aria-label":"hidden","data-hidden":!0}),i.append(a,r);var o=document.createElement("button");o.classList.add("no-bubble-button","add-button"),Dt(o,{id:"new-project-button",type:"button","aria-label":"New Project"}),o.textContent="New Project";var s=document.createElement("div");return s.setAttribute("id","add-project-container"),s.append(o,i),s}(),An.lastChild),An.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),jn=Et(".zig-zag-nav"),gn.zigZagNavReference=jn,Tt.on(i,vn),Et(".nav-toggle-button").addEventListener("click",wn),Dn=Et("#theme-toggle-checkbox"),Ln=Dn,Cn=yn.savedTheme||(yn.userPrefersLight?"light":"dark"),Ln.checked="light"===Cn,document.body.classList.toggle("light-mode","light"===Cn),kn(Cn),Nn=function(){Tt.emit(u,Dn)},Dn.addEventListener("change",Nn),Tt.on(u,xn)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,