(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");if(a.length)for(var r=a.length-1;r>-1&&!e;)e=a[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n="addNewProject",a="addNewTask",r="handleMain",i="showNav",o="hideNav",s="toggleAddProjectForm",c="toggelAddTaskForm",d="toggleEditTaskForm",u="toggleTheme",l="deleteProject",m=(e=[],{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))}});function h(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function f(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=h(t);return!isNaN(Number(n))}const g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function p(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const b={date:p({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:p({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:p({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},v={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;a=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;a=t.values[r]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function y(t){return(e,n={})=>{const a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;const o=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(o.length)}}}var k;const x={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=g[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:b,formatRelative:(t,e,n,a)=>v[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(k.matchPattern);if(!n)return null;const a=n[0],r=t.match(k.parsePattern);if(!r)return null;let i=k.valueCallback?k.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(a.length)}}),era:y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let E={};function T(){return E}Math.pow(10,8);const D=6048e5,L=864e5,C=6e4,N=36e5;function A(t){const e=h(t);return e.setHours(0,0,0,0),e}function j(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function M(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function S(t){const e=h(t);return function(t,e){const n=A(t),a=A(e),r=n.getTime()-j(n),i=a.getTime()-j(a);return Math.round((r-i)/L)}(e,function(t){const e=h(t),n=M(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function P(t,e){const n=T(),a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=h(t),i=r.getDay(),o=(i<a?7:0)+i-a;return r.setDate(r.getDate()-o),r.setHours(0,0,0,0),r}function q(t){return P(t,{weekStartsOn:1})}function Y(t){const e=h(t),n=e.getFullYear(),a=M(t,0);a.setFullYear(n+1,0,4),a.setHours(0,0,0,0);const r=q(a),i=M(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const o=q(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function O(t){const e=h(t),n=q(e).getTime()-function(t){const e=Y(t),n=M(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),q(n)}(e).getTime();return Math.round(n/D)+1}function H(t,e){const n=h(t),a=n.getFullYear(),r=T(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=M(t,0);o.setFullYear(a+1,0,i),o.setHours(0,0,0,0);const s=P(o,e),c=M(t,0);c.setFullYear(a,0,i),c.setHours(0,0,0,0);const d=P(c,e);return n.getTime()>=s.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}function F(t,e){const n=h(t),a=P(n,e).getTime()-function(t,e){const n=T(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=H(t,e),i=M(t,0);return i.setFullYear(r,0,a),i.setHours(0,0,0,0),P(i,e)}(n,e).getTime();return Math.round(a/D)+1}function W(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const I={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return W("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):W(n+1,2)},d:(t,e)=>W(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>W(t.getHours()%12||12,e.length),H:(t,e)=>W(t.getHours(),e.length),m:(t,e)=>W(t.getMinutes(),e.length),s:(t,e)=>W(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return W(Math.floor(a*Math.pow(10,n-3)),e.length)}},z={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return I.y(t,e)},Y:function(t,e,n,a){const r=H(t,a),i=r>0?r:1-r;return"YY"===e?W(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):W(i,e.length)},R:function(t,e){return W(Y(t),e.length)},u:function(t,e){return W(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return W(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return W(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return I.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return W(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const r=F(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):W(r,e.length)},I:function(t,e,n){const a=O(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):W(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):I.d(t,e)},D:function(t,e,n){const a=S(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):W(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return W(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return W(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return W(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let r;switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let r;switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return I.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):I.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):W(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):W(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):I.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):I.s(t,e)},S:function(t,e){return I.S(t,e)},X:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return B(r);case"XXXX":case"XX":return R(r);default:return R(r,":")}},x:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return B(r);case"xxxx":case"xx":return R(r);default:return R(r,":")}},O:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Q(r,":");default:return"GMT"+R(r,":")}},z:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Q(r,":");default:return"GMT"+R(r,":")}},t:function(t,e,n,a){const r=a._originalDate||t;return W(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return W((a._originalDate||t).getTime(),e.length)}};function Q(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;return 0===i?n+String(r):n+String(r)+e+W(i,2)}function B(t,e){return t%60==0?(t>0?"-":"+")+W(Math.abs(t)/60,2):R(t,e)}function R(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+W(Math.floor(a/60),2)+e+W(a%60,2)}const G=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},X=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},$={p:X,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],r=n[2];if(!r)return G(t,e);let i;switch(a){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",G(a,e)).replace("{{time}}",X(r,e))}},Z=["D","DD"],U=["YY","YYYY"];function K(t){return-1!==Z.indexOf(t)}function V(t){return-1!==U.indexOf(t)}function J(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const _=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,et=/^'([^]*?)'?$/,nt=/''/g,at=/[a-zA-Z]/;function rt(t,e,n){const a=T(),r=n?.locale??a.locale??x,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=h(t);if(!f(s))throw new RangeError("Invalid time value");const c={firstWeekContainsDate:i,weekStartsOn:o,locale:r,_originalDate:s};return e.match(tt).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,$[e])(t,r.formatLong):t})).join("").match(_).map((function(a){if("''"===a)return"'";const i=a[0];if("'"===i)return function(t){const e=t.match(et);return e?e[1].replace(nt,"'"):t}(a);const o=z[i];if(o)return!n?.useAdditionalWeekYearTokens&&V(a)&&J(a,e,String(t)),!n?.useAdditionalDayOfYearTokens&&K(a)&&J(a,e,String(t)),o(s,a,r.localize,c);if(i.match(at))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return a})).join("")}function it(t,e){const n=h(t);return isNaN(e)?M(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function ot(t,e){const n=e?.additionalDigits??2,a=function(t){const e={},n=t.split(st.dateTimeDelimiter);let a;if(n.length>2)return e;if(/:/.test(n[0])?a=n[0]:(e.date=n[0],a=n[1],st.timeZoneDelimiter.test(e.date)&&(e.date=t.split(st.timeZoneDelimiter)[0],a=t.substr(e.date.length,t.length))),a){const t=st.timezone.exec(a);t?(e.time=a.replace(t[1],""),e.timezone=t[1]):e.time=a}return e}(t);let r;if(a.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};const r=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?r:100*i,restDateString:t.slice((a[1]||a[2]).length)}}(a.date,n);r=function(t,e){if(null===e)return new Date(NaN);const n=t.match(ct);if(!n)return new Date(NaN);const a=!!n[4],r=lt(n[1]),i=lt(n[2])-1,o=lt(n[3]),s=lt(n[4]),c=lt(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,c)?function(t,e,n){const a=new Date(0);a.setUTCFullYear(t,0,4);const r=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,s,c):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(ht[e]||(ft(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(ft(t)?366:365)}(e,r)?(t.setUTCFullYear(e,i,Math.max(r,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);const i=r.getTime();let o,s=0;if(a.time&&(s=function(t){const e=t.match(dt);if(!e)return NaN;const n=mt(e[1]),a=mt(e[2]),r=mt(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,r)?n*N+a*C+1e3*r:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){const t=new Date(i+s),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return o=function(t){if("Z"===t)return 0;const e=t.match(ut);if(!e)return 0;const n="+"===e[1]?-1:1,a=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(a*N+r*C):NaN}(a.timezone),isNaN(o)?new Date(NaN):new Date(i+s+o)}const st={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ct=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,dt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ut=/^([+-])(\d{2})(?::?(\d{2}))?$/;function lt(t){return t?parseInt(t):1}function mt(t){return t&&parseFloat(t.replace(",","."))||0}const ht=[31,null,31,30,31,30,31,31,30,31,30,31];function ft(t){return t%400==0||t%4==0&&t%100!=0}function gt(t,e){const n=h(t),a=h(e),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function pt(t){return pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pt(t)}function bt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function vt(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?bt(Object(n),!0).forEach((function(e){var a,r,i;a=t,r=e,i=n[e],(r=function(t){var e=function(t,e){if("object"!==pt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==pt(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===pt(e)?e:String(e)}(r))in a?Object.defineProperty(a,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):a[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):bt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return gt(ot(n),ot(a))}))},getTaskArray:function(){return n.tasks}}}function wt(t){var e,n=t.target,a=n.tagName.toLowerCase();if("button"===a||"input"===a){var r=n.closest(".task-item");if(r){var i=(e=r.querySelector(".task-item-title").textContent.toLowerCase(),m.getAllTasks().find((function(t){return t.getName()===e}))),o={"task-item-checkbox":function(){return e=i,void(!0===(a=(t=n).checked)?(e.setCompleted(!0),t.setAttribute("data-checked","true")):!1===a&&(e.setCompleted(!1),t.setAttribute("data-checked","false")));var t,e,a},"task-priority-star-button":function(){return e=i,a=(t=n).getAttribute("data-checked"),function(t,e){"false"===e?t.setAttribute("data-checked","true"):"true"===e&&t.setAttribute("data-checked","false")}(t,a),void("false"===a?e.setPriority(!0):"true"===a&&e.setPriority(!1));var t,e,a},"modify-task-button":function(){return Me(i)}}[n.className];o&&o()}}}class yt{subPriority=0;validate(t,e){return!0}}class kt extends yt{constructor(t,e,n,a,r){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=a,r&&(this.subPriority=r)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class xt extends yt{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:M(t,function(t,e){const n=e instanceof Date?M(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class Et{run(t,e,n,a){const r=this.parse(t,e,n,a);return r?{setter:new kt(r.value,this.validate,this.set,this.priority,this.subPriority),rest:r.rest}:null}validate(t,e,n){return!0}}const Tt=/^(1[0-2]|0?\d)/,Dt=/^(3[0-1]|[0-2]?\d)/,Lt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Ct=/^(5[0-3]|[0-4]?\d)/,Nt=/^(2[0-3]|[0-1]?\d)/,At=/^(2[0-4]|[0-1]?\d)/,jt=/^(1[0-1]|0?\d)/,Mt=/^(1[0-2]|0?\d)/,St=/^[0-5]?\d/,Pt=/^[0-5]?\d/,qt=/^\d/,Yt=/^\d{1,2}/,Ot=/^\d{1,3}/,Ht=/^\d{1,4}/,Ft=/^-?\d+/,Wt=/^-?\d/,It=/^-?\d{1,2}/,zt=/^-?\d{1,3}/,Qt=/^-?\d{1,4}/,Bt=/^([+-])(\d{2})(\d{2})?|Z/,Rt=/^([+-])(\d{2})(\d{2})|Z/,Gt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Xt=/^([+-])(\d{2}):(\d{2})|Z/,$t=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Zt(t,e){return t?{value:e(t.value),rest:t.rest}:t}function Ut(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function Kt(t,e){const n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};const a="+"===n[1]?1:-1,r=n[2]?parseInt(n[2],10):0,i=n[3]?parseInt(n[3],10):0,o=n[5]?parseInt(n[5],10):0;return{value:a*(r*N+i*C+1e3*o),rest:e.slice(n[0].length)}}function Vt(t){return Ut(Ft,t)}function Jt(t,e){switch(t){case 1:return Ut(qt,e);case 2:return Ut(Yt,e);case 3:return Ut(Ot,e);case 4:return Ut(Ht,e);default:return Ut(new RegExp("^\\d{1,"+t+"}"),e)}}function _t(t,e){switch(t){case 1:return Ut(Wt,e);case 2:return Ut(It,e);case 3:return Ut(zt,e);case 4:return Ut(Qt,e);default:return Ut(new RegExp("^-?\\d{1,"+t+"}"),e)}}function te(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function ee(t,e){const n=e>0,a=n?e:1-e;let r;if(a<=50)r=t||100;else{const e=a+50;r=t+100*Math.floor(e/100)-(t>=e%100?100:0)}return n?r:1-r}function ne(t){return t%400==0||t%4==0&&t%100!=0}const ae=[31,28,31,30,31,30,31,31,30,31,30,31],re=[31,29,31,30,31,30,31,31,30,31,30,31];function ie(t,e,n){const a=T(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,i=h(t),o=i.getDay(),s=7-r;return it(i,e<0||e>6?e-(o+s)%7:((e%7+7)%7+s)%7-(o+s)%7)}function oe(t,e){const n=h(t);return it(n,e-function(t){let e=h(t).getDay();return 0===e&&(e=7),e}(n))}const se={G:new class extends Et{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends Et{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return Zt(Jt(4,t),a);case"yo":return Zt(n.ordinalNumber(t,{unit:"year"}),a);default:return Zt(Jt(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const a=t.getFullYear();if(n.isTwoDigitYear){const e=ee(n.year,a);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const r="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(r,0,1),t.setHours(0,0,0,0),t}},Y:new class extends Et{priority=130;parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return Zt(Jt(4,t),a);case"Yo":return Zt(n.ordinalNumber(t,{unit:"year"}),a);default:return Zt(Jt(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,a){const r=H(t,a);if(n.isTwoDigitYear){const e=ee(n.year,r);return t.setFullYear(e,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),P(t,a)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),P(t,a)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends Et{priority=130;parse(t,e){return _t("R"===e?4:e.length,t)}set(t,e,n){const a=M(t,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),q(a)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends Et{priority=130;parse(t,e){return _t("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends Et{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return Jt(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends Et{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return Jt(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends Et{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"M":return Zt(Ut(Tt,t),a);case"MM":return Zt(Jt(2,t),a);case"Mo":return Zt(n.ordinalNumber(t,{unit:"month"}),a);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends Et{priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"L":return Zt(Ut(Tt,t),a);case"LL":return Zt(Jt(2,t),a);case"Lo":return Zt(n.ordinalNumber(t,{unit:"month"}),a);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends Et{priority=100;parse(t,e,n){switch(e){case"w":return Ut(Ct,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return Jt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n,a){return P(function(t,e,n){const a=h(t),r=F(a,n)-e;return a.setDate(a.getDate()-7*r),a}(t,n,a),a)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends Et{priority=100;parse(t,e,n){switch(e){case"I":return Ut(Ct,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return Jt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n){return q(function(t,e){const n=h(t),a=O(n)-e;return n.setDate(n.getDate()-7*a),n}(t,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends Et{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return Ut(Dt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return Jt(e.length,t)}}validate(t,e){const n=ne(t.getFullYear()),a=t.getMonth();return n?e>=1&&e<=re[a]:e>=1&&e<=ae[a]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends Et{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return Ut(Lt,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return Jt(e.length,t)}}validate(t,e){return ne(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends Et{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=ie(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends Et{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return Zt(Jt(e.length,t),r);case"eo":return Zt(n.ordinalNumber(t,{unit:"day"}),r);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=ie(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends Et{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return Zt(Jt(e.length,t),r);case"co":return Zt(n.ordinalNumber(t,{unit:"day"}),r);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=ie(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends Et{priority=90;parse(t,e,n){const a=t=>0===t?7:t;switch(e){case"i":case"ii":return Jt(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return Zt(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiii":return Zt(n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiiii":return Zt(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);default:return Zt(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=oe(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends Et{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(te(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends Et{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(te(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends Et{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(te(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends Et{priority=70;parse(t,e,n){switch(e){case"h":return Ut(Mt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return Jt(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const a=t.getHours()>=12;return a&&n<12?t.setHours(n+12,0,0,0):a||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends Et{priority=70;parse(t,e,n){switch(e){case"H":return Ut(Nt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return Jt(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends Et{priority=70;parse(t,e,n){switch(e){case"K":return Ut(jt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return Jt(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends Et{priority=70;parse(t,e,n){switch(e){case"k":return Ut(At,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return Jt(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const a=n<=24?n%24:n;return t.setHours(a,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends Et{priority=60;parse(t,e,n){switch(e){case"m":return Ut(St,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return Jt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends Et{priority=50;parse(t,e,n){switch(e){case"s":return Ut(Pt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return Jt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends Et{priority=30;parse(t,e){return Zt(Jt(e.length,t),(t=>Math.floor(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends Et{priority=10;parse(t,e){switch(e){case"X":return Kt(Bt,t);case"XX":return Kt(Rt,t);case"XXXX":return Kt(Gt,t);case"XXXXX":return Kt($t,t);default:return Kt(Xt,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-j(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends Et{priority=10;parse(t,e){switch(e){case"x":return Kt(Bt,t);case"xx":return Kt(Rt,t);case"xxxx":return Kt(Gt,t);case"xxxxx":return Kt($t,t);default:return Kt(Xt,t)}}set(t,e,n){return e.timestampIsSet?t:M(t,t.getTime()-j(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends Et{priority=40;parse(t){return Vt(t)}set(t,e,n){return[M(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends Et{priority=20;parse(t){return Vt(t)}set(t,e,n){return[M(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,de=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ue=/^'([^]*?)'?$/,le=/''/g,me=/\S/,he=/[a-zA-Z]/;function fe(t,e,n,a){const r=Object.assign({},T()),i=a?.locale??r.locale??x,o=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,s=a?.weekStartsOn??a?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0;if(""===e)return""===t?h(n):M(n,NaN);const c={firstWeekContainsDate:o,weekStartsOn:s,locale:i},d=[new xt],u=e.match(de).map((t=>{const e=t[0];return e in $?(0,$[e])(t,i.formatLong):t})).join("").match(ce),l=[];for(let r of u){!a?.useAdditionalWeekYearTokens&&V(r)&&J(r,e,t),!a?.useAdditionalDayOfYearTokens&&K(r)&&J(r,e,t);const o=r[0],s=se[o];if(s){const{incompatibleTokens:e}=s;if(Array.isArray(e)){const t=l.find((t=>e.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${r}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${r}\` and any other token at the same time`);l.push({token:o,fullToken:r});const a=s.run(t,r,i.match,c);if(!a)return M(n,NaN);d.push(a.setter),t=a.rest}else{if(o.match(he))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===r?r="'":"'"===o&&(r=r.match(ue)[1].replace(le,"'")),0!==t.indexOf(r))return M(n,NaN);t=t.slice(r.length)}}if(t.length>0&&me.test(t))return M(n,NaN);const m=d.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>d.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let f=h(n);if(isNaN(f.getTime()))return M(n,NaN);const g={};for(const t of m){if(!t.validate(f,c))return M(n,NaN);const e=t.set(f,g,c);Array.isArray(e)?(f=e[0],Object.assign(g,e[1])):f=e}return M(n,f)}function ge(t,e){for(var n in e)t.setAttribute(n,e[n])}function pe(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return function(){var t=document.createElement("p");t.classList.add("hvr-wobble-vertical"),t.setAttribute("id","placeholder-text"),t.textContent="nothing to see here...";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}();if(e.length>0){var a=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){a.appendChild(function(t){var e=t.getName().toLowerCase(),n=t.getDetails(),a=t.getDueDate(),r=t.getCompleted(),i=t.getPriority(),o=document.createElement("input");ge(o,{"data-checked":r?"true":"false",type:"checkbox"}),o.classList.add("task-item-checkbox"),o.checked=!!r;var s=document.createElement("div");s.classList.add("task-checkbox-container"),s.appendChild(o);var c=document.createElement("h4");c.classList.add("task-item-title"),c.textContent=e;var d=document.createElement("p");d.classList.add("task-item-details"),d.textContent=n;var u,l=document.createElement("p");l.classList.add("task-item-date"),l.textContent="Due ".concat((u={year:"numeric",month:"short",day:"numeric"},fe(a,"yyyy-MM-dd",new Date).toLocaleDateString("en-us",u)));var m=document.createElement("span");m.classList.add("task-priority-star-icon","material-symbols-outlined"),m.textContent="star";var h=document.createElement("button");h.classList.add("task-priority-star-button"),ge(h,{"aria-label":"Toggle priority","data-checked":i?"true":"false",type:"button"}),h.appendChild(m);var f=document.createElement("button");f.classList.add("modify-task-button"),ge(f,{"aria-label":"Edit Task",type:"button"});var g=document.createElement("i");g.classList.add("fa-solid","fa-ellipsis-vertical"),f.appendChild(g);var p=document.createElement("div");p.classList.add("task-item-button-container"),p.append(h,f);var b=document.createElement("div");b.classList.add("task-right-side-container"),b.append(l,p);var v=document.createElement("li");return v.classList.add("task-item"),v.append(s,c),""!==n.trim()&&v.appendChild(d),v.appendChild(b),v}(t))})),a}}function be(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=pe(t);return n&&e.appendChild(n),e}function ve(t){var e=t.firstChild;return!(e&&e.hasAttribute("id","placeholder-container")||!e)}function we(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}function ye(){var t=we("#edit-task-form"),e=t.querySelector("#edit-task-title"),n=t.querySelector("#edit-task-details"),a=t.querySelector("#edit-task-due-date"),r=e.value.trim().toLowerCase(),i=n.value.trim(),o=a.value;return r?o?o<(new Date).toISOString().slice(0,10)?alert("Enter Valid Due Date"):(t.reset(),Ce.setName(r),Ce.setDetails(i),Ce.setDueDate(o),Me(),void("project"===on.linkType?qe(on.projectName):"link"===on.linkType&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:activeLink,e=we("#main-content"),n=e.querySelector("#task-list"),a=be(vt(t,m.getAllTasks()));n.remove(),e.appendChild(a),ve(a)&&Se(a)}(rn))):alert("Enter Task Due Date"):alert("Enter Task Name")}function ke(t){if(t.target.classList.contains("edit-task-button")){var e=t.target.getAttribute("id"),n="cancel-edit-task-button"===e;"save-edit-task-button"===e?ye():n&&Me()}}function xe(t){t.showModal(),ge(t,{"data-hidden":"visible","aria-label":"visible"})}function Ee(t){t.close(),ge(t,{"data-hidden":"hidden","aria-label":"hidden"})}var Te,De={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}};function Le(t){"Enter"===t.key&&(t.preventDefault(),ye())}var Ce,Ne=!1;function Ae(t){var e=we(".edit-task-button-container");"hidden"===t?e.removeEventListener("click",ke):"visible"===t&&e.addEventListener("click",ke)}function je(t){var e,n,a=we("#edit-task-modal"),r=a.getAttribute("data-hidden");"hidden"===r?(Te="visible",function(t){var e=we("#edit-task-modal"),n=e.querySelector("#edit-task-title"),a=e.querySelector("#edit-task-details"),r=e.querySelector("#edit-task-due-date"),i=t.getName(),o=t.getDetails(),s=t.getDueDate();n.value=i,a.value=o,r.value=s}(t),xe(a),Ae(Te)):"visible"===r&&(Te="closing",n=Ee,(e=a).setAttribute("data-hidden","closing"),e.addEventListener("animationend",(function t(){n(e),e.removeEventListener("animationend",t),Te="hidden"})),Ae(Te)),function(t,e){!function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",Le)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",Le)}))}(t.querySelectorAll(".edit-task-input"),e)}(a,Te),Ce=t}function Me(t){De.emit(d,t)}function Se(t){var e,n;e=we("#main-container"),n=function(){var t=document.createElement("h2");t.setAttribute("id","edit-task-heading"),t.textContent="Edit Task";var e=document.createElement("dialog");return ge(e,{id:"edit-task-modal","aria-label":"hidden","data-hidden":"hidden"}),e.append(t,function(){var t=document.createElement("label");t.classList.add("edit-task-label"),t.setAttribute("for","edit-task-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("edit-task-input"),ge(e,{type:"text",id:"edit-task-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("edit-task-label"),a.setAttribute("for","edit-task-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("edit-task-input"),ge(r,{type:"text",id:"edit-task-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("edit-task-label"),o.setAttribute("for","edit-task-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("edit-task-input"),ge(s,{type:"date",id:"edit-task-due-date",required:!0,placeholder:"yyyy-mm-dd"});var c=document.createElement("div");c.classList.add("due-date-container","input-container"),c.append(o,s);var d=document.createElement("button");d.classList.add("edit-task-button","bubble-button"),ge(d,{id:"save-edit-task-button",type:"button","aria-label":"Edit Task",form:"edit-task-form"}),d.textContent="save";var u=document.createElement("button");u.classList.add("edit-task-button","bubble-button"),ge(u,{id:"cancel-edit-task-button",type:"button","aria-label":"Cancel Edit Task"}),u.textContent="cancel";var l=document.createElement("div");l.classList.add("edit-task-button-container"),l.append(d,u);var m=document.createElement("form");m.setAttribute("id","edit-task-form"),m.append(n,i,c,l);var h=document.createElement("div");return h.classList.add("edit-task-form-container"),h.appendChild(m),h}()),e}(),e.appendChild(n),function(t){t.addEventListener("click",wt)}(t),function(t){var e,n;(e=t.querySelectorAll(".task-item-details"),n=[],e.forEach((function(t){t.clientWidth<t.scrollWidth&&n.push(t)})),n).forEach((function(t){var e,n,a;n=(e=t).scrollWidth-e.clientWidth,a=-1,function t(r){var i=e.scrollLeft+.5*a;i>=n?a=-1:i<=0&&(a=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))}(t),Ne||(De.on(d,je),Ne=!0)}var Pe={projectObject:null,taskListElement:null,taskListHasTaskItems:function(){return this.projectObject&&this.projectObject.getTaskArray().length>0}};function qe(t){Pe.taskListElement=we("#task-list"),Pe.projectObject=m.getProjectObject(t);var e=Pe.taskListElement.parentNode;Pe.taskListElement.remove();var n=be(Pe.projectObject);Pe.taskListElement=n,e.appendChild(n),Pe.taskListHasTaskItems&&Se(n)}function Ye(){var t=we("#add-task-form"),e=t.querySelector("#task-add-title"),n=t.querySelector("#task-add-details"),a=t.querySelector("#task-add-due-date"),r=e.value.trim().toLowerCase(),i=n.value.trim(),o=a.value,s=(new Date).toISOString().slice(0,10);if(!r)return alert("Enter Task Name");if(!o)return alert("Enter Task Due Date");if(o<s)return alert("Enter Valid Due Date");t.reset();var c=function(t,e,n,a){if("string"!=typeof t&&"string"!=typeof a&&"string"!=typeof n)throw new Error("⚠️ name, details & due-date, must all be strings");var r={name:t,projectName:e,dueDate:n,details:a,priority:!1,completed:!1};return{getName:function(){return r.name},setName:function(t){r.name=t},getDetails:function(){return r.details},setDetails:function(t){r.details=t},getDueDate:function(){return r.dueDate},setDueDate:function(t){r.dueDate=t},getPriority:function(){return r.priority},setPriority:function(t){r.priority=t},getCompleted:function(){return r.completed},setCompleted:function(t){r.completed=t},setProjectName:function(t){r.project=t},getProjectName:function(){return r.projectName}}}(r,d,o,i);c.setProjectName(d);var d=on.projectName.toLowerCase();m.addTaskToProject(d,c),Ie(),qe(d)}function Oe(){De.emit(a)}function He(t){"Enter"===t.key&&(t.preventDefault(),De.emit(a))}function Fe(t){on.addTaskFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",Fe)}function We(){var t,e,n=we(".add-task-form-container"),r=on.addTaskFormState;"hidden"===r?(ge(n,{"data-hidden":"false","aria-label":"visible"}),on.addTaskFormState="visible"):"visible"===r&&(ge(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,on.addTaskFormState="closing",t.addEventListener("animationend",Fe)),function(t,e){!function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",He)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",He)}))}(t.querySelectorAll(".add-task-input"),e)}(n,on.addTaskFormState),function(t){var e=we("#add-task-button");"visible"===t?e.addEventListener("click",Oe):"closing"===t&&e.removeEventListener("click",Oe)}(e=on.addTaskFormState),function(t){"visible"===t?De.on(a,Ye):"closing"===t&&De.off(a,Ye)}(e),function(t){!function(t){var e=we("#cancel-add-task-button");"visible"===t?e.addEventListener("click",Ie):"closing"===t&&e.removeEventListener("click",Ie)}(t)}(on.addTaskFormState)}function Ie(){De.emit(c)}function ze(t){"Enter"===t.key&&(t.preventDefault(),De.emit(n))}var Qe={projectFormState:"hidden"};function Be(t){Qe.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",Be)}function Re(){var t,e,a=we("#add-project-form"),r=Qe.projectFormState,i=we("#project-name-input");"hidden"===r?(ge(a,{"data-hidden":"false","aria-label":"visible"}),Qe.projectFormState="visible"):"visible"===r&&(ge(a,{"data-hidden":"closing","aria-label":"hidden"}),t=a,Qe.projectFormState="closing",t.addEventListener("animationend",Be),i.value=""),function(t,e){!function(t,e){"visible"===e?t.addEventListener("keydown",ze):"closing"===e&&t.removeEventListener("keydown",ze)}(t,e)}(i,Qe.projectFormState),function(t){var e=we("#add-project-button");"visible"===t?e.addEventListener("click",Ke):"closing"===t&&e.removeEventListener("click",Ke)}(e=Qe.projectFormState),function(t){"visible"===t?De.on(n,Ue):"closing"===t&&De.off(n,Ue)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",Ge):"closing"===t&&e.removeEventListener("click",Ge)}(t)}(Qe.projectFormState)}function Ge(){De.emit(s)}function Xe(){var t=we("#new-project-button");!0===un.open?t.addEventListener("click",Ge):!1===un.open&&t.removeEventListener("click",Ge),function(t){!0===t.open?De.on(s,Re):!1===t.open&&De.off(s,Re)}(un)}function $e(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function Ze(t,e){for(var n=t.getProjectArray().slice().reverse();e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),ge(e,{type:"button","aria-label":"Project ".concat(t),"data-project-name":t}),e.textContent=t;var n=$e(),a=document.createElement("li");return a.classList.add("project-li","nav-li"),e.setAttribute("aria-label","Project ".concat(t)),a.append(n,e),a}(t.getName()))}))}function Ue(){var t=we("#add-project-form"),e=t.querySelector("#project-name-input").value.trim().toLowerCase();if(!e)return alert("Enter Project Name");t.reset();var n=function(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return gt(ot(n),ot(a))}))},getTaskArray:function(){return e.tasks}}}(e);m.addProject(n);var a=we("#project-nav-list");Ze(m,a),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(a),Ge(),Qe.projectFormState="hidden"}function Ke(){De.emit(n)}function Ve(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var a=be(t),r=document.createElement("div");r.setAttribute("id","main-content"),r.appendChild(a);var i,o=document.createElement("div"),s=t.getType();return o.setAttribute("id","main-container"),o.appendChild(e),"project"===s&&o.appendChild(((i=document.createElement("div")).setAttribute("id","project-handling-container"),i.append(function(){var t=document.createElement("button");ge(t,{id:"add-task-form-opener-button",type:"button","aria-label":"Add Task"}),t.textContent="add task";var e=document.createElement("button");ge(e,{id:"delete-project-button",type:"button","aria-label":"Delete Project"}),e.textContent="delete project";var n=document.createElement("div");return n.setAttribute("id","project-button-container"),n.append(e,t),n}(),function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","task-add-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),ge(e,{type:"text",id:"task-add-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("add-task-label"),a.setAttribute("for","task-add-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("add-task-input"),ge(r,{type:"text",id:"task-add-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("add-task-label"),o.setAttribute("for","task-add-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("add-task-input"),ge(s,{type:"date",id:"task-add-due-date",required:!0,placeholder:"yyyy-mm-dd"});var c=document.createElement("div");c.classList.add("due-date-container","input-container"),c.append(o,s);var d=document.createElement("button");d.classList.add("add-task-button","bubble-button"),ge(d,{id:"add-task-button",type:"button","aria-label":"Add Task",name:"add-task-button",form:"add-task-form"}),d.textContent="add";var u=document.createElement("button");u.classList.add("add-task-button","bubble-button"),ge(u,{id:"cancel-add-task-button",type:"button","aria-label":"Cancel Add Task"}),u.textContent="cancel";var l=document.createElement("div");l.classList.add("add-task-button-container"),l.append(d,u);var m=document.createElement("form");m.setAttribute("id","add-task-form"),m.append(n,i,c,l);var h=document.createElement("div");return h.classList.add("add-task-form-container"),ge(h,{id:"add-task-form-container","data-hidden":!0,"aria-label":"hidden"}),h.appendChild(m),h}()),i)),o.appendChild(r),o}var Je=!1;function _e(){var t,e,n,a=Pe.projectObject,r=we("#project-nav-list");m.deleteProject(a),Pe.taskListHasTaskItems()&&(console.log("called"),De.off(d,je),Ne=!1),De.off(c,We),De.off(l,en),Je=!1,t=we("#main-container"),e=t.parentNode,n=Ve(vt("all tasks",m.getAllTasks())),t.remove(),e.appendChild(n),function(){var t=we("#project-nav-list"),e=t.closest(".zig-zag-nav").querySelector('.nav-link[data-page-name="all tasks"]');Ze(m,t),e.setAttribute("aria-current","true")}(),Ze(m,r),on.isAddTaskButtonListenerAttached=!1}function tn(t){var e="delete"===t.target.textContent,n="cancel"===t.target.textContent;if(e||n){var a=this.parentNode.parentNode;e?(_e(),Ee(a)):n&&Ee(a)}}function en(){xe(we(".delete-confirmation-dialog")),we(".delete-confirmation-button-container").addEventListener("click",tn)}function nn(){De.emit(l)}function an(){var t,e;we("#delete-project-button").addEventListener("click",nn),on.isDeleteProjectButtonListenerAttached=!0,!0!==Je&&(Je=!0,De.on(l,en)),t=we("#project-button-container"),e=function(){var t=document.createElement("h2");t.classList.add("delete-confirmation-heading"),t.textContent="please confirm:";var e=document.createElement("button");e.classList.add("delete-confirmation-button","bubble-button"),e.textContent="delete";var n=document.createElement("button");n.classList.add("delete-confirmation-button","bubble-button"),n.textContent="cancel";var a=document.createElement("div");a.classList.add("delete-confirmation-button-container"),a.appendChild(e),a.appendChild(n);var r=document.createElement("div");r.classList.add("delete-confirmation-modal"),r.appendChild(t),r.appendChild(a);var i=document.createElement("dialog");return i.classList.add("delete-confirmation-dialog"),i.setAttribute("aria-hidden","true"),i.appendChild(r),i}(),t.appendChild(e)}var rn,on={linkType:null,projectName:null,addTaskFormState:"hidden",isDeleteProjectButtonListenerAttached:!1,isAddTaskButtonListenerAttached:!1};function sn(t){var e=function(t){var e=t.hasAttribute("data-project-name"),n=t.hasAttribute("data-page-name");if(e){var a=m.getProjectArray(),r=t.getAttribute("data-project-name"),i=a.find((function(t){return t.getName()===r}));return on.linkType="project",i}if(n){var o=t.getAttribute("data-page-name"),s=function(t,e){var n=new Date;return({"all tasks":function(){return e},priorities:function(){return e.filter((function(t){return!0===t.getPriority()}))},today:function(){var t=rt(n,"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()===t}))},"next 7 days":function(){var t=rt(it(n,7),"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()<=t}))}}[t]||function(){return e})()}(o,m.getAllTasks()),c=vt(o,s);return on.linkType="link",c}}(t),n=e.getName(),a=e.getType(),r=Ve(e),i=r.querySelector("#task-list");on.isAddTaskButtonListenerAttached&&(we("#add-task-form-opener-button").removeEventListener("click",Ie),on.isAddTaskButtonListenerAttached=!1,De.off(c,We));var o,s,d=we("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(d),d.appendChild(r),"project"===a&&(on.projectName=n,o=e,Pe.projectObject=m.getProjectObject(o),an(),function(t){var e=we("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",Ie),on.isAddTaskButtonListenerAttached=!0)}(s=a),function(t){"project"===t&&De.on(c,We)}(s)),ve(i)&&Se(i),t.addEventListener("transitionend",fn,{once:!0})}function cn(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(we(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page"),rn=t.textContent.toLowerCase()}(e),function(t){De.emit(r,t)}(e))}function dn(){var t;!0===un.open?De.on(r,sn):!1===un.open&&De.off(r,sn),t=we(".zig-zag-nav"),!0===un.open?t.addEventListener("click",cn):!1===un.open&&t.removeEventListener("click",cn)}var un={open:!1,animating:!1,zigZagNavReference:null};function ln(){un.open=!1,un.animating=!1,un.zigZagNavReference.removeEventListener("animationend",ln),un.zigZagNavReference.setAttribute("aria-hidden",!0),un.zigZagNavReference.setAttribute("data-visibility",!1),Xe(),dn(),De.on(i,hn),De.off(o,hn)}function mn(){un.animating=!0,un.zigZagNavReference.setAttribute("data-visibility","closing"),un.zigZagNavReference.addEventListener("animationend",ln)}function hn(){un.open=!0,un.animating=!1,un.zigZagNavReference.setAttribute("aria-hidden",!1),un.zigZagNavReference.setAttribute("data-visibility",!0),dn(),Xe(),De.on(o,mn),De.off(i,hn)}function fn(){var t=we(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),De.emit(o);else{if(!0===un.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),De.emit(i)}}var gn={savedTheme:function(t){try{return localStorage.getItem("savedTheme")}catch(t){return console.error("Error accessing localStorage:",t),null}}(),userPrefersLight:window.matchMedia("(prefers-color-scheme: light)").matches};function pn(t){var e=document.head.querySelector('meta[name="color-scheme"]');e||((e=document.createElement("meta")).setAttribute("name","color-scheme"),document.head.appendChild(e)),e.setAttribute("content","light"===t?"light dark":"dark light")}function bn(t){var e=t.checked?"light":"dark";gn.savedTheme=e,function(t,e){try{localStorage.setItem("savedTheme",e)}catch(t){console.error("Error setting localStorage item:",t)}}(0,e),document.body.classList.toggle("light-mode","light"===e),pn(e)}var vn={Home:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},Projects:{listElements:[]}};const wn=t.p+"f0f19e6f57687481453e.webp";var yn,kn,xn,En,Tn,Dn,Ln,Cn;we("#content").append(function(){var t=document.createElement("img");t.classList.add("header-logo"),ge(t,{alt:"Priority Logo","aria-label":"Priority Logo",src:wn});var e=document.createElement("h1");e.classList.add("header-title"),e.textContent="<pr{io}rity>";var n=document.createElement("div");n.classList.add("header-left"),n.append(t,e);var a=document.createElement("div");a.classList.add("header-right"),a.append(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox"),"enabled"===localStorage.getItem("lightMode")?(e.checked=!0,e.setAttribute("data-checked","true"),e.setAttribute("aria-label","Toggle Dark Mode")):null===localStorage.getItem("lightMode")&&(e.checked=!1,e.setAttribute("data-checked","false"),e.setAttribute("aria-label","Toggle Light Mode"));var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var a=document.createElement("i");a.classList.add("fa-solid","fa-sun"),a.setAttribute("id","sun");var r=document.createElement("i");return r.classList.add("fa-solid","fa-moon"),r.setAttribute("id","moon"),n.appendChild(a),n.appendChild(r),t.appendChild(e),t.appendChild(n),t}(),function(t){var e=document.createElement("div");e.classList.add("nav-toggle-bars");var n=document.createElement("button");return n.classList.add("nav-toggle-button"),ge(n,{"aria-label":"Open Navigation Menu","aria-expanded":!1,"aria-controls":"nav-primary-aria"}),n.appendChild(e),n}());var r=document.createElement("header");return r.append(n,a),r}(),function(t,e,n,a,r){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=s,i.appendChild(n);var a=document.createElement("ul");a.classList.add("nav-ul");var r=t[s].listElements,o=document.createDocumentFragment();r.forEach((function(t,e){var n=t[0],a=(t[1],document.createElement("button"));a.classList.add("nav-link"),"All Tasks"===n&&a.setAttribute("aria-current","page");var r=document.createElement("li");r.classList.add("nav-li"),a.textContent=n,a.setAttribute("data-page-name",n.toLowerCase()),r.appendChild(a),o.appendChild(r)})),a.appendChild(o),e.appendChild(n),e.appendChild(a),i.appendChild(e)};for(var s in t)o();return i}(vn),(Ln=Ve(vt("all tasks",m.getAllTasks())),(Cn=document.createElement("main")).appendChild(Ln),Cn)),(Dn=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),Dn.insertBefore(function(){var t=document.createElement("input");ge(t,{id:"project-name-input",type:"text",placeholder:"Enter Project Name","max-length":"24"});var e=document.createElement("button");ge(e,{id:"add-project-button",class:"bubble-button",type:"button",required:!0,name:"add-project",form:"add-project-form","aria-label":"Add Project"}),e.textContent="add";var n=document.createElement("button");ge(n,{id:"cancel-add-project-button",class:"bubble-button",type:"button","aria-label":"Cancel Add Project"}),n.textContent="cancel";var a=document.createElement("div");a.setAttribute("id","project-input-container"),a.append($e(),t);var r=document.createElement("div");r.setAttribute("id","project-buttons-container"),r.append(e,n);var i=document.createElement("form");ge(i,{id:"add-project-form","aria-label":"hidden","data-hidden":!0}),i.append(a,r);var o=document.createElement("button");ge(o,{id:"new-project-button",type:"button","aria-label":"New Project"}),o.textContent="New Project";var s=document.createElement("div");return s.setAttribute("id","add-project-container"),s.append(o,i),s}(),Dn.lastChild),Dn.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),Tn=we(".zig-zag-nav"),un.zigZagNavReference=Tn,De.on(i,hn),we(".nav-toggle-button").addEventListener("click",fn),yn=we("#theme-toggle-checkbox"),kn=yn,xn=gn.savedTheme||(gn.userPrefersLight?"light":"dark"),kn.checked="light"===xn,document.body.classList.toggle("light-mode","light"===xn),pn(xn),En=function(){De.emit(u,yn)},yn.addEventListener("change",En),De.on(u,bn)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,