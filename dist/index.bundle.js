(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");if(a.length)for(var r=a.length-1;r>-1&&!e;)e=a[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n=(e=[],{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))}});Math.pow(10,8);const a=6e4,r=36e5,i=43200,o=1440;function d(t,e){const n=e?.additionalDigits??2,i=function(t){const e={},n=t.split(s.dateTimeDelimiter);let a;if(n.length>2)return e;if(/:/.test(n[0])?a=n[0]:(e.date=n[0],a=n[1],s.timeZoneDelimiter.test(e.date)&&(e.date=t.split(s.timeZoneDelimiter)[0],a=t.substr(e.date.length,t.length))),a){const t=s.timezone.exec(a);t?(e.time=a.replace(t[1],""),e.timezone=t[1]):e.time=a}return e}(t);let o;if(i.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};const r=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?r:100*i,restDateString:t.slice((a[1]||a[2]).length)}}(i.date,n);o=function(t,e){if(null===e)return new Date(NaN);const n=t.match(u);if(!n)return new Date(NaN);const a=!!n[4],r=m(n[1]),i=m(n[2])-1,o=m(n[3]),d=m(n[4]),s=m(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,d,s)?function(t,e,n){const a=new Date(0);a.setUTCFullYear(t,0,4);const r=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,d,s):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(p[e]||(h(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(h(t)?366:365)}(e,r)?(t.setUTCFullYear(e,i,Math.max(r,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);const d=o.getTime();let b,v=0;if(i.time&&(v=function(t){const e=t.match(c);if(!e)return NaN;const n=f(e[1]),i=f(e[2]),o=f(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,i,o)?n*r+i*a+1e3*o:NaN}(i.time),isNaN(v)))return new Date(NaN);if(!i.timezone){const t=new Date(d+v),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return b=function(t){if("Z"===t)return 0;const e=t.match(l);if(!e)return 0;const n="+"===e[1]?-1:1,i=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,o)?n*(i*r+o*a):NaN}(i.timezone),isNaN(b)?new Date(NaN):new Date(d+v+b)}const s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(t){return t?parseInt(t):1}function f(t){return t&&parseFloat(t.replace(",","."))||0}const p=[31,null,31,30,31,30,31,31,30,31,30,31];function h(t){return t%400==0||t%4==0&&t%100!=0}function b(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function v(t,e){const n=b(t),a=b(e),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function A(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?y(Object(n),!0).forEach((function(e){var a,r,i;a=t,r=e,i=n[e],(r=function(t){var e=function(t,e){if("object"!==g(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==g(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===g(e)?e:String(e)}(r))in a?Object.defineProperty(a,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):a[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return v(d(n),d(a))}))},getTaskArray:function(){return n.tasks}}}const k=t.p+"f0f19e6f57687481453e.webp";var C="showNav",E="hideNav",w="handleMain",j="toggleAddProjectForm",D="addNewProject",T="toggelAddTaskForm",L="addNewTask";function N(t){const e=b(t);return+function(t){const e=b(t);return e.setHours(23,59,59,999),e}(e)==+function(t){const e=b(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e)}function M(t,e){const n=b(t),a=b(e),r=v(n,a),i=Math.abs(function(t,e){const n=b(t),a=b(e);return 12*(n.getFullYear()-a.getFullYear())+(n.getMonth()-a.getMonth())}(n,a));let o;if(i<1)o=0;else{1===n.getMonth()&&n.getDate()>27&&n.setDate(30),n.setMonth(n.getMonth()-r*i);let e=v(n,a)===-r;N(b(t))&&1===i&&1===v(t,a)&&(e=!1),o=r*(i-Number(e))}return 0===o?0:o}function S(t,e,n){const a=function(t,e){return b(t).getTime()-b(e).getTime()}(t,e)/1e3;return(r=n?.roundingMethod,r?Math[r]:Math.trunc)(a);var r}const P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function x(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const W={date:x({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:x({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:x({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},F={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function O(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;a=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;a=t.values[r]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function q(t){return(e,n={})=>{const a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;const o=i[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(d):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(d);let u;return u=t.valueCallback?t.valueCallback(s):s,u=n.valueCallback?n.valueCallback(u):u,{value:u,rest:e.slice(o.length)}}}var z;const X={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=P[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:W,formatRelative:(t,e,n,a)=>F[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:O({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:O({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:O({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:O({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:O({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(z.matchPattern);if(!n)return null;const a=n[0],r=t.match(z.parsePattern);if(!r)return null;let i=z.valueCallback?z.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(a.length)}}),era:q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let Y={};function U(){return Y}function B(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function H(t,e){return function(t,e,n){const a=U(),r=n?.locale??a.locale??X,d=v(t,e);if(isNaN(d))throw new RangeError("Invalid time value");const s=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:d});let u,c;d>0?(u=b(e),c=b(t)):(u=b(t),c=b(e));const l=S(c,u),m=(B(c)-B(u))/1e3,f=Math.round((l-m)/60);let p;if(f<2)return n?.includeSeconds?l<5?r.formatDistance("lessThanXSeconds",5,s):l<10?r.formatDistance("lessThanXSeconds",10,s):l<20?r.formatDistance("lessThanXSeconds",20,s):l<40?r.formatDistance("halfAMinute",0,s):l<60?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",1,s):0===f?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",f,s);if(f<45)return r.formatDistance("xMinutes",f,s);if(f<90)return r.formatDistance("aboutXHours",1,s);if(f<o){const t=Math.round(f/60);return r.formatDistance("aboutXHours",t,s)}if(f<2520)return r.formatDistance("xDays",1,s);if(f<i){const t=Math.round(f/o);return r.formatDistance("xDays",t,s)}if(f<2*i)return p=Math.round(f/i),r.formatDistance("aboutXMonths",p,s);if(p=M(c,u),p<12){const t=Math.round(f/i);return r.formatDistance("xMonths",t,s)}{const t=p%12,e=Math.floor(p/12);return t<3?r.formatDistance("aboutXYears",e,s):t<9?r.formatDistance("overXYears",e,s):r.formatDistance("almostXYears",e+1,s)}}(t,Date.now(),e)}function I(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=function(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return function(){var t=document.createElement("p");t.setAttribute("id","placeholder-text"),t.classList.add("hvr-wobble-vertical"),t.textContent="create a project in the above menu";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}();if(e.length>0){var a=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){a.appendChild(function(t){var e=document.createElement("div");e.classList.add("task-checkbox-container");var n=document.createElement("input");n.setAttribute("type","checkbox"),n.classList.add("task-item-checkbox"),e.appendChild(n);var a=document.createElement("h4");a.classList.add("task-item-title"),a.textContent=t.getName();var r=document.createElement("p");r.classList.add("task-item-details"),r.textContent=t.getDetails();var i=document.createElement("p");i.classList.add("task-item-date");var o=H(t.getDueDate(),{addSuffix:!0});i.textContent="Due ".concat(o);var d=document.createElement("input");d.classList.add("task-priority-checkbox"),d.setAttribute("type","checkbox"),d.setAttribute("aria-label","Prioritize Task");var s=document.createElement("button");s.classList.add("modify-task-button"),s.setAttribute("type","button"),s.setAttribute("aria-label","Edit Task");var u=document.createElement("i");u.classList.add("fa-solid","fa-ellipsis-vertical"),s.appendChild(u);var c=document.createElement("div");c.classList.add("task-item-button-container"),c.appendChild(d),c.appendChild(s);var l=document.createElement("div");l.classList.add("task-right-side-container"),l.appendChild(i),l.appendChild(c);var m=document.createElement("li");m.classList.add("task-item"),m.appendChild(e),m.appendChild(a),console.log(t.getDetails()),""!==t.getDetails()&&m.appendChild(r),m.appendChild(l);var f=document.createElement("dialog");f.classList.add("task-edit-modal");var p=document.createElement("button");p.classList.add("task-edit-button"),p.setAttribute("type","button"),p.setAttribute("aria-label","Edit Task"),f.appendChild(p);var h=document.createElement("button");return h.classList.add("task-delete-button"),h.setAttribute("type","button"),h.setAttribute("aria-label","Delete Task"),f.appendChild(h),m}(t))})),a}}(t);return n&&e.appendChild(n),e}function J(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}var $={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}};function Z(){var t=J("#add-task-form"),e=t.querySelector("#title"),a=t.querySelector("#details"),r=t.querySelector("#due-date"),i=e.value.trim(),o=a.value.trim(),d=r.value;if(!i)return alert("Enter Task Name");if(!d)return alert("Enter Task Due Date");t.reset();var s=et.projectName,u=function(t,e,n,a){if("string"!=typeof t&&"string"!=typeof n&&"string"!=typeof a)throw new Error("⚠️ name, details & due-date, must all be strings");var r={name:t,projectName:e,details:n,dueDate:a,priority:!1,completed:!1};return{getName:function(){return r.name},setName:function(t){r.name=t},getDetails:function(){return r.details},setDetails:function(t){r.details=t},getDueDate:function(){return r.dueDate},setDueDate:function(t){r.dueDate=t},getPriority:function(){return r.priority},setPriority:function(t){r.priority=t},getCompleted:function(){return r.completed},setCompleted:function(t){r.completed=t},setProjectName:function(t){r.project=t},getProjectName:function(){return r.projectName}}}(i,s,o,d);u.setProjectName(s),n.addTaskToProject(s,u),_(),function(t){var e=J("#task-list"),a=e.parentNode,r=n.getProjectObject(t);e.remove(),a.appendChild(I(r))}(s)}function Q(){$.emit(L)}function V(t,e){for(var n in e)t.setAttribute(n,e[n])}var R={formState:"hidden",isAddTaskButtonListenerAttached:!1};function G(t){R.formState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",G)}function K(){var t,e,n=J("#add-task-form-container"),a=R.formState;"hidden"===a?(V(n,{"data-hidden":"false","aria-label":"visible"}),R.formState="visible"):"visible"===a&&(V(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,R.formState="closing",t.addEventListener("animationend",G)),function(t){var e=J("#add-task-button");"visible"===t?e.addEventListener("click",Q):"closing"===t&&e.removeEventListener("click",Q)}(e=R.formState),function(t){"visible"===t?$.on(L,Z):"closing"===t&&$.off(L,Z)}(e),function(t){!function(t){var e=J("#cancel-add-task-button");"visible"===t?e.addEventListener("click",_):"closing"===t&&e.removeEventListener("click",_)}(t)}(R.formState)}function _(){$.emit(T)}function tt(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var a,r=document.createElement("div");r.setAttribute("id","main-content"),r.appendChild(I(t)),"project"===t.getType()&&r.appendChild(((a=document.createElement("div")).setAttribute("id","add-task-container"),a.appendChild(function(){var t=document.createElement("button");t.setAttribute("id","add-task-form-opener-button"),t.setAttribute("type","button"),t.setAttribute("aria-label","Add Task"),t.textContent="Add Task";var e=document.createElement("div");return e.setAttribute("id","add-task-form-opener-button-container"),e.appendChild(t),e}()),a.appendChild(function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),e.setAttribute("type","text"),e.setAttribute("id","title"),e.setAttribute("name","title"),e.setAttribute("required","true"),e.setAttribute("placeholder","what are the vibes?"),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),$.emit(L))}));var n=document.createElement("div");n.setAttribute("id","title-container"),n.classList.add("input-container"),n.appendChild(t),n.appendChild(e);var a=document.createElement("label");a.classList.add("add-task-label"),a.setAttribute("for","details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("add-task-input"),r.setAttribute("type","text"),r.setAttribute("id","details"),r.setAttribute("name","details"),r.setAttribute("placeholder","tell me more"),r.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),$.emit(L))}));var i=document.createElement("div");i.setAttribute("id","details-container"),i.classList.add("input-container"),i.appendChild(a),i.appendChild(r);var o=document.createElement("label");o.classList.add("add-task-label"),o.setAttribute("for","due-date"),o.textContent="Due Date";var d=document.createElement("input");d.classList.add("add-task-input"),d.setAttribute("type","date"),d.setAttribute("id","due-date"),d.setAttribute("name","due-date"),d.setAttribute("required",!0),d.setAttribute("placeholder","yyyy-mm-dd"),d.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),$.emit(L))}));var s=document.createElement("div");s.setAttribute("id","due-date-container"),s.classList.add("input-container"),s.appendChild(o),s.appendChild(d);var u=document.createElement("button");u.classList.add("add-task-button"),u.setAttribute("id","add-task-button"),u.setAttribute("type","button"),u.setAttribute("aria-label","Add Task"),u.setAttribute("name","add-task-button"),u.setAttribute("form","add-task-form"),u.textContent="Add Task";var c=document.createElement("button");c.classList.add("add-task-button"),c.setAttribute("id","cancel-add-task-button"),c.setAttribute("type","button"),c.setAttribute("aria-label","Cancel Add Task"),c.textContent="Cancel";var l=document.createElement("div");l.setAttribute("id","add-task-button-container"),l.appendChild(u),l.appendChild(c);var m=document.createElement("form");m.setAttribute("id","add-task-form"),m.appendChild(n),m.appendChild(i),m.appendChild(s),m.appendChild(l);var f=document.createElement("div");return f.setAttribute("id","add-task-form-container"),f.setAttribute("aria-label","hidden"),f.setAttribute("data-hidden",!0),f.appendChild(m),f}()),a));var i=document.createElement("div");return i.setAttribute("id","main-container"),i.appendChild(e),i.appendChild(r),i}var et={updateObjectType:null,projectName:null};function nt(t){var e=function(t){var e=t.hasAttribute("data-project-name"),a=t.hasAttribute("data-page-name");if(e){var r=n.getProjectArray(),i=t.getAttribute("data-project-name"),o=r.find((function(t){return t.getName()===i}));return et.updateObjectType="project",o}if(a){var d=A(t.getAttribute("data-page-name"),n.getAllTasks());return et.updateObjectType="link",d}}(t),a=e.getName(),r=e.getType(),i=tt(e);R.isAddTaskButtonListenerAttached&&(J("#add-task-form-opener-button").removeEventListener("click",_),R.isAddTaskButtonListenerAttached=!1,$.off(T,K));var o,d=J("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(d),d.appendChild(i),"project"===r&&(et.projectName=a,function(t){var e=J("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",_),R.isAddTaskButtonListenerAttached=!0)}(o=r),function(t){"project"===t&&$.on(T,K)}(o)),function(t){t.addEventListener("transitionend",vt,{once:!0})}(t)}function at(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(J(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page")}(e),function(t){$.emit(w,t)}(e))}function rt(){var t;!0===ft.open?$.on(w,nt):!1===ft.open&&$.off(w,nt),t=J(".zig-zag-nav"),!0===ft.open?t.addEventListener("click",at):!1===ft.open&&t.removeEventListener("click",at)}function it(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function ot(){var t=J("#add-project-form"),e=t.querySelector("#project-name-input").value.trim();if(!e)return alert("Enter Project Name");t.reset();var a=function(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return v(d(n),d(a))}))},getTaskArray:function(){return e.tasks}}}(e);n.addProject(a);var r=J("#project-nav-list");(function(t,e){for(var n=t.getProjectArray().slice().reverse();e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),e.setAttribute("type","button"),e.setAttribute("aria-label","Project ".concat(t)),e.setAttribute("data-project-name",t),e.textContent=t;var n=it(),a=document.createElement("li");return a.classList.add("project-li"),a.classList.add("nav-li"),e.setAttribute("aria-label","Project ".concat(t)),a.appendChild(n),a.appendChild(e),a}(t.getName()))}))})(n,r),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(r),lt(),st.projectFormState="hidden"}function dt(){$.emit(D)}var st={projectFormState:"hidden"};function ut(t){st.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",ut)}function ct(){var t,e,n=J("#add-project-form"),a=st.projectFormState;if("hidden"===a)V(n,{"data-hidden":"false","aria-label":"visible"}),st.projectFormState="visible";else if("visible"===a){V(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,st.projectFormState="closing",t.addEventListener("animationend",ut),J("#project-name-input").value=""}(function(t){var e=J("#add-project-button");"visible"===t?e.addEventListener("click",dt):"closing"===t&&e.removeEventListener("click",dt)})(e=st.projectFormState),function(t){"visible"===t?$.on(D,ot):"closing"===t&&$.off(D,ot)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",lt):"closing"===t&&e.removeEventListener("click",lt)}(t)}(st.projectFormState)}function lt(){$.emit(j)}function mt(){var t=document.getElementById("new-project-button");!0===ft.open?t.addEventListener("click",lt):!1===ft.open&&t.removeEventListener("click",lt),function(t){!0===t.open?$.on(j,ct):!1===t.open&&$.off(j,ct)}(ft)}var ft={open:!1,animating:!1};function pt(){ft.open=!1,ft.animating=!1;var t=document.querySelector(".zig-zag-nav");t.removeEventListener("animationend",pt),t.setAttribute("aria-hidden",!0),t.setAttribute("data-visibility",!1),mt(),rt()}function ht(){ft.animating=!0;var t=document.querySelector(".zig-zag-nav");t.setAttribute("data-visibility","closing"),t.addEventListener("animationend",pt)}function bt(){ft.open=!0,ft.animating=!1;var t=document.querySelector(".zig-zag-nav");t.setAttribute("aria-hidden",!1),t.setAttribute("data-visibility",!0),rt(),mt()}function vt(){var t=J(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),$.emit(E);else{if(!0===ft.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),$.emit(C)}}var gt,yt,At,kt=document.getElementById("content");!function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=document.createElement("script");for(var a in n.setAttribute("src",t),n.setAttribute("type","text/javascript"),e)n.setAttribute(a,e[a]);document.head.appendChild(n)}("https://kit.fontawesome.com/24176ab973.js",{crossorigin:"anonymous"}),kt.appendChild(function(){var t=document.createElement("header"),e=document.createElement("div");e.classList.add("header-left");var n=document.createElement("img");n.classList.add("header-logo"),n.setAttribute("src",k),n.setAttribute("alt","Priority Logo");var a=document.createElement("h1");a.classList.add("header-title"),a.textContent="<pr{io}rity>",e.appendChild(n),e.appendChild(a);var r=document.createElement("div");return r.classList.add("header-right"),r.appendChild(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox");var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var a=document.createElement("i");a.classList.add("fa-solid","fa-sun"),a.setAttribute("id","sun");var r=document.createElement("i");return r.classList.add("fa-solid","fa-moon"),r.setAttribute("id","moon"),n.appendChild(a),n.appendChild(r),t.appendChild(e),t.appendChild(n),t}()),r.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-toggle-button"),e.setAttribute("aria-label","Open Navigation Menu"),e.setAttribute("aria-expanded",!1),e.setAttribute("aria-controls","nav-primary-aria");var n=document.createElement("div");return n.classList.add("nav-toggle-bars"),e.appendChild(n),e.addEventListener("click",vt),e}()),t.appendChild(e),t.appendChild(r),content.appendChild(t),t}()),kt.appendChild(function(t,e,n,a,r){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=d,i.appendChild(n);var a=document.createElement("ul");a.classList.add("nav-ul");var r=t[d].listElements,o=document.createDocumentFragment();r.forEach((function(t,e){var n=t[0],a=(t[1],document.createElement("button"));a.classList.add("nav-link"),"All Tasks"===n&&a.setAttribute("aria-current","page");var r=document.createElement("li");r.classList.add("nav-li"),a.textContent=n,a.setAttribute("data-page-name",n.toLowerCase()),r.appendChild(a),o.appendChild(r)})),a.appendChild(o),e.appendChild(n),e.appendChild(a),i.appendChild(e)};for(var d in t)o();return $.on(C,bt),$.on(E,ht),i}({Home:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},Projects:{listElements:[]}})),(gt=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),gt.insertBefore(function(){var t=document.createElement("input");t.setAttribute("id","project-name-input"),t.setAttribute("type","text"),t.setAttribute("placeholder","Enter Project Name"),t.setAttribute("max-length",24),t.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),$.emit(D))}));var e=document.createElement("button");e.setAttribute("id","add-project-button"),e.setAttribute("type","button"),e.setAttribute("required",!0),e.setAttribute("name","add-project"),e.setAttribute("form","add-project-form"),e.setAttribute("aria-label","Add Project"),e.textContent="add";var n=document.createElement("button");n.setAttribute("id","cancel-add-project-button"),n.setAttribute("type","button"),n.setAttribute("aria-label","Cancel Add Project"),n.textContent="cancel";var a=document.createElement("div");a.setAttribute("id","project-input-container"),a.appendChild(it()),a.appendChild(t);var r=document.createElement("div");r.setAttribute("id","project-buttons-container"),r.appendChild(e),r.appendChild(n);var i=document.createElement("form");i.setAttribute("id","add-project-form"),i.setAttribute("aria-label","hidden"),i.setAttribute("data-hidden",!0),i.appendChild(a),i.appendChild(r);var o=document.createElement("button");o.setAttribute("id","new-project-button"),o.setAttribute("type","button"),o.setAttribute("aria-label","New Project"),o.textContent="New Project";var d=document.createElement("div");return d.setAttribute("id","add-project-container"),d.appendChild(o),d.appendChild(i),d}(),gt.lastChild),gt.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),kt.appendChild((yt=tt(A("all tasks",n.getAllTasks())),(At=document.createElement("main")).appendChild(yt),At)),document.querySelectorAll(".task-item-details").forEach((function(t){var e,n,a;n=(e=t).scrollWidth-e.clientWidth,a=-1,function t(r){var i=e.scrollLeft+.5*a;i>=n?a=-1:i<=0&&(a=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,