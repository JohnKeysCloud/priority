(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");if(a.length)for(var r=a.length-1;r>-1&&!e;)e=a[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n,a=(e=[],n=null,{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},setProjectArray:function(t){e.length=0,t.forEach((function(t){return e.push(t)}))},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))},setSavedTheme:function(t){n=t},getSavedTheme:function(){return n}}),r="addNewProject",i="addNewTask",o="handleMain",s="showNav",d="hideNav",c="toggleAddProjectForm",u="toggelAddTaskForm",l="toggleEditTaskForm",m="toggleTheme",f="openProjectDeleteDialog",h="openTaskDeleteDialog";function g(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function p(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=g(t);return!isNaN(Number(n))}const b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const w={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;a=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;a=t.values[r]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function E(t){return(e,n={})=>{const a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;const o=i[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let c;return c=t.valueCallback?t.valueCallback(d):d,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(o.length)}}}var x;const T={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=b[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:w,formatRelative:(t,e,n,a)=>y[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(x.matchPattern);if(!n)return null;const a=n[0],r=t.match(x.parsePattern);if(!r)return null;let i=x.valueCallback?x.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(a.length)}}),era:E({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:E({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:E({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:E({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:E({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let C={};function D(){return C}Math.pow(10,8);const L=6048e5,S=864e5,j=6e4,A=36e5;function N(t){const e=g(t);return e.setHours(0,0,0,0),e}function M(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function P(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function O(t){const e=g(t);return function(t,e){const n=N(t),a=N(e),r=n.getTime()-M(n),i=a.getTime()-M(a);return Math.round((r-i)/S)}(e,function(t){const e=g(t),n=P(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function q(t,e){const n=D(),a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=g(t),i=r.getDay(),o=(i<a?7:0)+i-a;return r.setDate(r.getDate()-o),r.setHours(0,0,0,0),r}function Y(t){return q(t,{weekStartsOn:1})}function F(t){const e=g(t),n=e.getFullYear(),a=P(t,0);a.setFullYear(n+1,0,4),a.setHours(0,0,0,0);const r=Y(a),i=P(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const o=Y(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function H(t){const e=g(t),n=Y(e).getTime()-function(t){const e=F(t),n=P(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),Y(n)}(e).getTime();return Math.round(n/L)+1}function W(t,e){const n=g(t),a=n.getFullYear(),r=D(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=P(t,0);o.setFullYear(a+1,0,i),o.setHours(0,0,0,0);const s=q(o,e),d=P(t,0);d.setFullYear(a,0,i),d.setHours(0,0,0,0);const c=q(d,e);return n.getTime()>=s.getTime()?a+1:n.getTime()>=c.getTime()?a:a-1}function I(t,e){const n=g(t),a=q(n,e).getTime()-function(t,e){const n=D(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=W(t,e),i=P(t,0);return i.setFullYear(r,0,a),i.setHours(0,0,0,0),q(i,e)}(n,e).getTime();return Math.round(a/L)+1}function Q(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const z={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return Q("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):Q(n+1,2)},d:(t,e)=>Q(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>Q(t.getHours()%12||12,e.length),H:(t,e)=>Q(t.getHours(),e.length),m:(t,e)=>Q(t.getMinutes(),e.length),s:(t,e)=>Q(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return Q(Math.floor(a*Math.pow(10,n-3)),e.length)}},R={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return z.y(t,e)},Y:function(t,e,n,a){const r=W(t,a),i=r>0?r:1-r;return"YY"===e?Q(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):Q(i,e.length)},R:function(t,e){return Q(F(t),e.length)},u:function(t,e){return Q(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return Q(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return Q(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return z.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return Q(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const r=I(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):Q(r,e.length)},I:function(t,e,n){const a=H(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):Q(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):z.d(t,e)},D:function(t,e,n){const a=O(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):Q(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Q(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const r=t.getDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Q(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return Q(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let r;switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let r;switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return z.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):z.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):Q(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):Q(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):z.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):z.s(t,e)},S:function(t,e){return z.S(t,e)},X:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return G(r);case"XXXX":case"XX":return X(r);default:return X(r,":")}},x:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return G(r);case"xxxx":case"xx":return X(r);default:return X(r,":")}},O:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+B(r,":");default:return"GMT"+X(r,":")}},z:function(t,e,n,a){const r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+B(r,":");default:return"GMT"+X(r,":")}},t:function(t,e,n,a){const r=a._originalDate||t;return Q(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return Q((a._originalDate||t).getTime(),e.length)}};function B(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;return 0===i?n+String(r):n+String(r)+e+Q(i,2)}function G(t,e){return t%60==0?(t>0?"-":"+")+Q(Math.abs(t)/60,2):X(t,e)}function X(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+Q(Math.floor(a/60),2)+e+Q(a%60,2)}const $=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Z=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},U={p:Z,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],r=n[2];if(!r)return $(t,e);let i;switch(a){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",$(a,e)).replace("{{time}}",Z(r,e))}},_=["D","DD"],J=["YY","YYYY"];function K(t){return-1!==_.indexOf(t)}function V(t){return-1!==J.indexOf(t)}function tt(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const et=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,nt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,at=/^'([^]*?)'?$/,rt=/''/g,it=/[a-zA-Z]/;function ot(t,e,n){const a=D(),r=n?.locale??a.locale??T,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=g(t);if(!p(s))throw new RangeError("Invalid time value");const d={firstWeekContainsDate:i,weekStartsOn:o,locale:r,_originalDate:s};return e.match(nt).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,U[e])(t,r.formatLong):t})).join("").match(et).map((function(a){if("''"===a)return"'";const i=a[0];if("'"===i)return function(t){const e=t.match(at);return e?e[1].replace(rt,"'"):t}(a);const o=R[i];if(o)return!n?.useAdditionalWeekYearTokens&&V(a)&&tt(a,e,String(t)),!n?.useAdditionalDayOfYearTokens&&K(a)&&tt(a,e,String(t)),o(s,a,r.localize,d);if(i.match(it))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return a})).join("")}function st(t,e){const n=g(t);return isNaN(e)?P(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function dt(t,e){const n=e?.additionalDigits??2,a=function(t){const e={},n=t.split(ct.dateTimeDelimiter);let a;if(n.length>2)return e;if(/:/.test(n[0])?a=n[0]:(e.date=n[0],a=n[1],ct.timeZoneDelimiter.test(e.date)&&(e.date=t.split(ct.timeZoneDelimiter)[0],a=t.substr(e.date.length,t.length))),a){const t=ct.timezone.exec(a);t?(e.time=a.replace(t[1],""),e.timezone=t[1]):e.time=a}return e}(t);let r;if(a.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};const r=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?r:100*i,restDateString:t.slice((a[1]||a[2]).length)}}(a.date,n);r=function(t,e){if(null===e)return new Date(NaN);const n=t.match(ut);if(!n)return new Date(NaN);const a=!!n[4],r=ft(n[1]),i=ft(n[2])-1,o=ft(n[3]),s=ft(n[4]),d=ft(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,d)?function(t,e,n){const a=new Date(0);a.setUTCFullYear(t,0,4);const r=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,s,d):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(gt[e]||(pt(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(pt(t)?366:365)}(e,r)?(t.setUTCFullYear(e,i,Math.max(r,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);const i=r.getTime();let o,s=0;if(a.time&&(s=function(t){const e=t.match(lt);if(!e)return NaN;const n=ht(e[1]),a=ht(e[2]),r=ht(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,r)?n*A+a*j+1e3*r:NaN}(a.time),isNaN(s)))return new Date(NaN);if(!a.timezone){const t=new Date(i+s),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return o=function(t){if("Z"===t)return 0;const e=t.match(mt);if(!e)return 0;const n="+"===e[1]?-1:1,a=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(a*A+r*j):NaN}(a.timezone),isNaN(o)?new Date(NaN):new Date(i+s+o)}const ct={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ut=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,lt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,mt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ft(t){return t?parseInt(t):1}function ht(t){return t&&parseFloat(t.replace(",","."))||0}const gt=[31,null,31,30,31,30,31,31,30,31,30,31];function pt(t){return t%400==0||t%4==0&&t%100!=0}function bt(t,e){const n=g(t),a=g(e),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function vt(t){return vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},vt(t)}function wt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function yt(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?wt(Object(n),!0).forEach((function(e){var a,r,i;a=t,r=e,i=n[e],(r=function(t){var e=function(t,e){if("object"!==vt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==vt(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===vt(e)?e:String(e)}(r))in a?Object.defineProperty(a,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):a[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):wt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return bt(dt(n),dt(a))}))},getTaskArray:function(){return n.tasks}}}function kt(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},deleteTask:function(t){e.tasks.splice(e.tasks.indexOf(t),1)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),a=e.getDueDate();return bt(dt(n),dt(a))}))},getTaskArray:function(){return e.tasks}}}function Et(t,e,n,a){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if("string"!=typeof t&&"string"!=typeof a&&"string"!=typeof n)throw new Error("⚠️ name, details & due-date, must all be strings");var o={name:t,projectName:e,dueDate:n,details:a,priority:r,completed:i};return{getName:function(){return o.name},setName:function(t){o.name=t},getDetails:function(){return o.details},setDetails:function(t){o.details=t},getDueDate:function(){return o.dueDate},setDueDate:function(t){o.dueDate=t},getPriority:function(){return o.priority},setPriority:function(t){o.priority=t},getCompleted:function(){return o.completed},setCompleted:function(t){o.completed=t},setProjectName:function(t){o.project=t},getProjectName:function(){return o.projectName}}}function xt(t){var e;try{e=window[t];var n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}function Tt(){var t,e,n;n=(t=a.getProjectArray(),e=[],t.forEach((function(t){var n=t.getTaskArray(),a=[];n.forEach((function(t){var e={name:t.getName(),details:t.getDetails(),dueDate:t.getDueDate(),priority:t.getPriority(),completed:t.getCompleted()};a.push(e)}));var r={name:t.getName(),taskArray:a,type:"project"};e.push(r)})),JSON.stringify(e)),xt("localStorage")?localStorage.setItem("projectArray",n):alert("Your current browser does not support local storage.")}function Ct(t){var e=t.target;"input"===e.tagName.toLowerCase()&&e.classList.contains("task-item-checkbox")&&"Enter"===t.key&&(t.preventDefault(),e.click())}function Dt(t){var e,n=t.target,r=n.tagName.toLowerCase();if("button"===r||"input"===r){var i=n.closest(".task-item");if(i){var o=(e=i.querySelector(".task-item-title").textContent.toLowerCase(),a.getAllTasks().find((function(t){return t.getName()===e}))),s={"task-item-checkbox":function(){return e=o,!0===(a=(t=n).checked)?(e.setCompleted(!0),t.setAttribute("data-checked","true")):!1===a&&(e.setCompleted(!1),t.setAttribute("data-checked","false")),void Tt();var t,e,a},"task-priority-star-button":function(){return e=o,a=(t=n).getAttribute("data-checked"),function(t,e){"false"===e?t.setAttribute("data-checked","true"):"true"===e&&t.setAttribute("data-checked","false")}(t,a),"false"===a?e.setPriority(!0):"true"===a&&e.setPriority(!1),void Tt();var t,e,a},"modify-task-button":function(){return Qe(o)}}[n.className];s&&s()}}}function Lt(){var t=document.createElement("p");t.classList.add("hvr-wobble-vertical"),t.setAttribute("id","placeholder-text"),t.textContent="nothing to see here...";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}function St(t){var e=t.firstChild;return!(e&&e.hasAttribute("id","placeholder-container")||!e)}function jt(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}var At={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}};function Nt(t,e){for(var n in e)t.setAttribute(n,e[n])}function Mt(t){t.showModal(),Nt(t,{"data-hidden":"visible","aria-label":"visible"})}function Pt(t){t.close(),Nt(t,{"data-hidden":"hidden","aria-label":"hidden"})}var Ot=!1;function qt(t){var e,n,r="delete"===t.target.textContent,i="cancel"===t.target.textContent;if(r||i){var o=this.parentNode.parentNode;r?(e=He.taskToEditObjectState,n=e.getProjectName(),a.getProjectObject(n).deleteTask(e),Tt(),function(t){var e=jt('[data-task-name="'.concat(t.getName(),'"]'));e&&e.remove();var n=jt("#task-list"),a=St(n);"link"!==dn.linkType||a||n.appendChild(Lt())}(e),Pt(o),At.off(h,Yt),Ot=!1):i&&(Pt(o),At.off(h,Yt),Ot=!1)}}function Yt(){Mt(jt(".delete-confirmation-dialog")),jt(".delete-confirmation-button-container").addEventListener("click",qt)}class Ft{subPriority=0;validate(t,e){return!0}}class Ht extends Ft{constructor(t,e,n,a,r){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=a,r&&(this.subPriority=r)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class Wt extends Ft{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:P(t,function(t,e){const n=e instanceof Date?P(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class It{run(t,e,n,a){const r=this.parse(t,e,n,a);return r?{setter:new Ht(r.value,this.validate,this.set,this.priority,this.subPriority),rest:r.rest}:null}validate(t,e,n){return!0}}const Qt=/^(1[0-2]|0?\d)/,zt=/^(3[0-1]|[0-2]?\d)/,Rt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Bt=/^(5[0-3]|[0-4]?\d)/,Gt=/^(2[0-3]|[0-1]?\d)/,Xt=/^(2[0-4]|[0-1]?\d)/,$t=/^(1[0-1]|0?\d)/,Zt=/^(1[0-2]|0?\d)/,Ut=/^[0-5]?\d/,_t=/^[0-5]?\d/,Jt=/^\d/,Kt=/^\d{1,2}/,Vt=/^\d{1,3}/,te=/^\d{1,4}/,ee=/^-?\d+/,ne=/^-?\d/,ae=/^-?\d{1,2}/,re=/^-?\d{1,3}/,ie=/^-?\d{1,4}/,oe=/^([+-])(\d{2})(\d{2})?|Z/,se=/^([+-])(\d{2})(\d{2})|Z/,de=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,ce=/^([+-])(\d{2}):(\d{2})|Z/,ue=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function le(t,e){return t?{value:e(t.value),rest:t.rest}:t}function me(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function fe(t,e){const n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};const a="+"===n[1]?1:-1,r=n[2]?parseInt(n[2],10):0,i=n[3]?parseInt(n[3],10):0,o=n[5]?parseInt(n[5],10):0;return{value:a*(r*A+i*j+1e3*o),rest:e.slice(n[0].length)}}function he(t){return me(ee,t)}function ge(t,e){switch(t){case 1:return me(Jt,e);case 2:return me(Kt,e);case 3:return me(Vt,e);case 4:return me(te,e);default:return me(new RegExp("^\\d{1,"+t+"}"),e)}}function pe(t,e){switch(t){case 1:return me(ne,e);case 2:return me(ae,e);case 3:return me(re,e);case 4:return me(ie,e);default:return me(new RegExp("^-?\\d{1,"+t+"}"),e)}}function be(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function ve(t,e){const n=e>0,a=n?e:1-e;let r;if(a<=50)r=t||100;else{const e=a+50;r=t+100*Math.floor(e/100)-(t>=e%100?100:0)}return n?r:1-r}function we(t){return t%400==0||t%4==0&&t%100!=0}const ye=[31,28,31,30,31,30,31,31,30,31,30,31],ke=[31,29,31,30,31,30,31,31,30,31,30,31];function Ee(t,e,n){const a=D(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,i=g(t),o=i.getDay(),s=7-r;return st(i,e<0||e>6?e-(o+s)%7:((e%7+7)%7+s)%7-(o+s)%7)}function xe(t,e){const n=g(t);return st(n,e-function(t){let e=g(t).getDay();return 0===e&&(e=7),e}(n))}const Te={G:new class extends It{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends It{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return le(ge(4,t),a);case"yo":return le(n.ordinalNumber(t,{unit:"year"}),a);default:return le(ge(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const a=t.getFullYear();if(n.isTwoDigitYear){const e=ve(n.year,a);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const r="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(r,0,1),t.setHours(0,0,0,0),t}},Y:new class extends It{priority=130;parse(t,e,n){const a=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return le(ge(4,t),a);case"Yo":return le(n.ordinalNumber(t,{unit:"year"}),a);default:return le(ge(e.length,t),a)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,a){const r=W(t,a);if(n.isTwoDigitYear){const e=ve(n.year,r);return t.setFullYear(e,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),q(t,a)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,a.firstWeekContainsDate),t.setHours(0,0,0,0),q(t,a)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends It{priority=130;parse(t,e){return pe("R"===e?4:e.length,t)}set(t,e,n){const a=P(t,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),Y(a)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends It{priority=130;parse(t,e){return pe("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends It{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return ge(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends It{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return ge(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends It{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"M":return le(me(Qt,t),a);case"MM":return le(ge(2,t),a);case"Mo":return le(n.ordinalNumber(t,{unit:"month"}),a);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends It{priority=110;parse(t,e,n){const a=t=>t-1;switch(e){case"L":return le(me(Qt,t),a);case"LL":return le(ge(2,t),a);case"Lo":return le(n.ordinalNumber(t,{unit:"month"}),a);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends It{priority=100;parse(t,e,n){switch(e){case"w":return me(Bt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return ge(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n,a){return q(function(t,e,n){const a=g(t),r=I(a,n)-e;return a.setDate(a.getDate()-7*r),a}(t,n,a),a)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends It{priority=100;parse(t,e,n){switch(e){case"I":return me(Bt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return ge(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n){return Y(function(t,e){const n=g(t),a=H(n)-e;return n.setDate(n.getDate()-7*a),n}(t,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends It{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return me(zt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return ge(e.length,t)}}validate(t,e){const n=we(t.getFullYear()),a=t.getMonth();return n?e>=1&&e<=ke[a]:e>=1&&e<=ye[a]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends It{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return me(Rt,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return ge(e.length,t)}}validate(t,e){return we(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends It{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=Ee(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends It{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return le(ge(e.length,t),r);case"eo":return le(n.ordinalNumber(t,{unit:"day"}),r);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=Ee(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends It{priority=90;parse(t,e,n,a){const r=t=>{const e=7*Math.floor((t-1)/7);return(t+a.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return le(ge(e.length,t),r);case"co":return le(n.ordinalNumber(t,{unit:"day"}),r);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,a){return(t=Ee(t,n,a)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends It{priority=90;parse(t,e,n){const a=t=>0===t?7:t;switch(e){case"i":case"ii":return ge(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return le(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiii":return le(n.day(t,{width:"narrow",context:"formatting"}),a);case"iiiiii":return le(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a);default:return le(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),a)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=xe(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends It{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(be(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends It{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(be(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends It{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(be(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends It{priority=70;parse(t,e,n){switch(e){case"h":return me(Zt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return ge(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const a=t.getHours()>=12;return a&&n<12?t.setHours(n+12,0,0,0):a||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends It{priority=70;parse(t,e,n){switch(e){case"H":return me(Gt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return ge(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends It{priority=70;parse(t,e,n){switch(e){case"K":return me($t,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return ge(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends It{priority=70;parse(t,e,n){switch(e){case"k":return me(Xt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return ge(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const a=n<=24?n%24:n;return t.setHours(a,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends It{priority=60;parse(t,e,n){switch(e){case"m":return me(Ut,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return ge(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends It{priority=50;parse(t,e,n){switch(e){case"s":return me(_t,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return ge(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends It{priority=30;parse(t,e){return le(ge(e.length,t),(t=>Math.floor(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends It{priority=10;parse(t,e){switch(e){case"X":return fe(oe,t);case"XX":return fe(se,t);case"XXXX":return fe(de,t);case"XXXXX":return fe(ue,t);default:return fe(ce,t)}}set(t,e,n){return e.timestampIsSet?t:P(t,t.getTime()-M(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends It{priority=10;parse(t,e){switch(e){case"x":return fe(oe,t);case"xx":return fe(se,t);case"xxxx":return fe(de,t);case"xxxxx":return fe(ue,t);default:return fe(ce,t)}}set(t,e,n){return e.timestampIsSet?t:P(t,t.getTime()-M(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends It{priority=40;parse(t){return he(t)}set(t,e,n){return[P(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends It{priority=20;parse(t){return he(t)}set(t,e,n){return[P(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},Ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,De=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Le=/^'([^]*?)'?$/,Se=/''/g,je=/\S/,Ae=/[a-zA-Z]/;function Ne(t,e,n,a){const r=Object.assign({},D()),i=a?.locale??r.locale??T,o=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,s=a?.weekStartsOn??a?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0;if(""===e)return""===t?g(n):P(n,NaN);const d={firstWeekContainsDate:o,weekStartsOn:s,locale:i},c=[new Wt],u=e.match(De).map((t=>{const e=t[0];return e in U?(0,U[e])(t,i.formatLong):t})).join("").match(Ce),l=[];for(let r of u){!a?.useAdditionalWeekYearTokens&&V(r)&&tt(r,e,t),!a?.useAdditionalDayOfYearTokens&&K(r)&&tt(r,e,t);const o=r[0],s=Te[o];if(s){const{incompatibleTokens:e}=s;if(Array.isArray(e)){const t=l.find((t=>e.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${r}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${r}\` and any other token at the same time`);l.push({token:o,fullToken:r});const a=s.run(t,r,i.match,d);if(!a)return P(n,NaN);c.push(a.setter),t=a.rest}else{if(o.match(Ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===r?r="'":"'"===o&&(r=r.match(Le)[1].replace(Se,"'")),0!==t.indexOf(r))return P(n,NaN);t=t.slice(r.length)}}if(t.length>0&&je.test(t))return P(n,NaN);const m=c.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>c.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let f=g(n);if(isNaN(f.getTime()))return P(n,NaN);const h={};for(const t of m){if(!t.validate(f,d))return P(n,NaN);const e=t.set(f,h,d);Array.isArray(e)?(f=e[0],Object.assign(h,e[1])):f=e}return P(n,f)}function Me(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=function(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return Lt();if(e.length>0){var a=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){a.appendChild(function(t){var e=t.getName().toLowerCase(),n=t.getDetails(),a=t.getDueDate(),r=t.getCompleted(),i=t.getPriority(),o=document.createElement("input");Nt(o,{"data-checked":r?"true":"false",type:"checkbox"}),o.classList.add("task-item-checkbox"),o.checked=!!r;var s=document.createElement("div");s.classList.add("task-checkbox-container"),s.appendChild(o);var d=document.createElement("h4");d.classList.add("task-item-title"),d.textContent=e;var c=document.createElement("p");c.classList.add("task-item-details"),c.textContent=n;var u,l=document.createElement("p");l.classList.add("task-item-date"),l.textContent="Due ".concat((u={year:"numeric",month:"short",day:"numeric"},Ne(a,"yyyy-MM-dd",new Date).toLocaleDateString("en-us",u)));var m=document.createElement("span");m.classList.add("task-priority-star-icon","material-symbols-outlined"),m.textContent="star";var f=document.createElement("button");f.classList.add("task-priority-star-button"),Nt(f,{"aria-label":"Toggle priority","data-checked":i?"true":"false",type:"button"}),f.appendChild(m);var h=document.createElement("button");h.classList.add("modify-task-button"),Nt(h,{"aria-label":"Edit Task",type:"button"});var g=document.createElement("i");g.classList.add("fa-solid","fa-ellipsis-vertical"),h.appendChild(g);var p=document.createElement("div");p.classList.add("task-item-button-container"),p.append(f,h);var b=document.createElement("div");b.classList.add("task-right-side-container"),b.append(l,p);var v=document.createElement("li");return v.classList.add("task-item"),v.setAttribute("data-task-name",e),v.append(s,d),""!==n.trim()&&v.appendChild(c),v.appendChild(b),v}(t))})),a}}(t);return n&&e.appendChild(n),e}function Pe(){var t=jt("#edit-task-form"),e=t.querySelector("#edit-task-title"),n=t.querySelector("#edit-task-details"),r=t.querySelector("#edit-task-due-date"),i=e.value.trim().toLowerCase(),o=n.value.trim(),s=r.value;return i?s?s<(new Date).toISOString().slice(0,10)?alert("Enter Valid Due Date"):(t.reset(),He.taskToEditObjectState.setName(i),He.taskToEditObjectState.setDetails(o),He.taskToEditObjectState.setDueDate(s),Tt(),Qe(),void("project"===dn.linkType?Be(dn.linkOrProjectName):"link"===dn.linkType&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:activeLink,e=jt("#main-content"),n=e.querySelector("#task-list"),r=Me(yt(t,a.getAllTasks()));n.remove(),e.appendChild(r),St(r)&&ze(r)}(un))):alert("Enter Task Due Date"):alert("Enter Task Name")}function Oe(t){if(t.target.classList.contains("edit-task-button")){var e,n=t.target.getAttribute("id"),a="cancel-edit-task-button"===n,r="delete-edit-task-button"===n;"save-edit-task-button"===n?Pe():a?Qe():r&&(e=jt(".delete-confirmation-dialog"),Qe(),Mt(e),!0!==Ot&&(Ot=!0,At.on(h,Yt)),At.emit(h))}}function qe(t){t.target.value||("text"===t.target.type?t.target.type="date":"date"===t.target.type&&(t.target.type="text"))}function Ye(t,e){"visible"===e?(t.addEventListener("focus",qe),t.addEventListener("blur",qe)):"closing"===e&&(t.removeEventListener("focus",qe),t.removeEventListener("blur",qe))}function Fe(t){"Enter"===t.key&&(t.preventDefault(),Pe())}var He={modalState:"hidden",isEditTaskFormEventPublished:!1,taskToEditObjectState:null};function We(){var t=jt(".edit-task-button-container");"hidden"===He.modalState?t.removeEventListener("click",Oe):"visible"===He.modalState&&t.addEventListener("click",Oe)}function Ie(t){var e,n,a,r,i,o=jt("#edit-task-dialog"),s=o.getAttribute("data-hidden");"hidden"===s?(He.modalState="visible",He.taskToEditObjectState=t,function(t){var e=jt("#edit-task-dialog"),n=e.querySelector("#edit-task-title"),a=e.querySelector("#edit-task-details"),r=e.querySelector("#edit-task-due-date"),i=t.getName(),o=t.getDetails(),s=t.getDueDate();n.value=i,a.value=o,r.value=s}(t),Mt(o),We(He.modalState)):"visible"===s&&(He.modalState="closing",n=Pt,(e=o).setAttribute("data-hidden","closing"),e.addEventListener("animationend",(function t(){n(e),e.removeEventListener("animationend",t),He.modalState="hidden"})),We(He.modalState)),a=o,r=He.modalState,function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",Fe)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",Fe)}))}(i=a.querySelectorAll(".edit-task-input"),r),Ye(Array.from(i).find((function(t){return"edit-task-due-date"===t.id})),r)}function Qe(t){At.emit(l,t)}function ze(t){var e,n;e=jt("#main-container"),n=function(){var t=document.createElement("h2");t.setAttribute("id","edit-task-heading"),t.textContent="Edit Task";var e=document.createElement("dialog");return Nt(e,{id:"edit-task-dialog","aria-label":"hidden","data-hidden":"hidden"}),e.append(t,function(){var t=document.createElement("label");t.classList.add("edit-task-label"),t.setAttribute("for","edit-task-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("edit-task-input"),Nt(e,{type:"text",id:"edit-task-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("edit-task-label"),a.setAttribute("for","edit-task-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("edit-task-input"),Nt(r,{type:"text",id:"edit-task-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("edit-task-label"),o.setAttribute("for","edit-task-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("edit-task-input"),Nt(s,{type:"date",id:"edit-task-due-date",required:!0,placeholder:"Select a date"});var d=document.createElement("div");d.classList.add("due-date-container","input-container"),d.append(o,s);var c=document.createElement("button");c.classList.add("edit-task-button","bubble-button"),Nt(c,{id:"save-edit-task-button",type:"button","aria-label":"Edit Task",form:"edit-task-form"}),c.textContent="save";var u=document.createElement("button");u.classList.add("edit-task-button","bubble-button"),Nt(u,{id:"cancel-edit-task-button",type:"button","aria-label":"Cancel Edit Task"}),u.textContent="cancel";var l=document.createElement("button");l.classList.add("edit-task-button","no-bubble-button","delete-button"),Nt(l,{id:"delete-edit-task-button",type:"button","aria-label":"Delete Task"}),l.textContent="delete task";var m=document.createElement("div");m.classList.add("edit-task-button-container"),m.append(c,u,l);var f=document.createElement("form");f.setAttribute("id","edit-task-form"),f.append(n,i,d,m);var h=document.createElement("div");return h.classList.add("edit-task-form-container"),h.appendChild(f),h}()),e}(),e.appendChild(n),function(t){t.addEventListener("click",Dt),t.addEventListener("keydown",Ct)}(t),function(t){var e,n;(e=t.querySelectorAll(".task-item-details"),n=[],e.forEach((function(t){t.clientWidth<t.scrollWidth&&n.push(t)})),n).forEach((function(t){var e,n,a;n=(e=t).scrollWidth-e.clientWidth,a=-1,function t(r){var i=e.scrollLeft+.5*a;i>=n?a=-1:i<=0&&(a=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))}(t),He.isEditTaskFormEventPublished||(At.on(l,Ie),He.isEditTaskFormEventPublished=!0,He.isEditTaskFormEventPublished)}var Re={projectObject:null,taskListElement:null,taskListHasTaskItems:function(){return this.projectObject&&this.projectObject.getTaskArray().length>0}};function Be(t){Re.taskListElement=jt("#task-list"),Re.projectObject=a.getProjectObject(t);var e=Re.taskListElement.parentNode;Re.taskListElement.remove();var n=Me(Re.projectObject);Re.taskListElement=n,e.appendChild(n),Re.taskListHasTaskItems&&ze(n)}function Ge(){var t=jt("#add-task-form"),e=t.querySelector("#task-add-title"),n=t.querySelector("#task-add-details"),r=t.querySelector("#task-add-due-date"),i=e.value.trim().toLowerCase(),o=dn.linkOrProjectName,s=n.value.trim(),d=r.value,c=(new Date).toISOString().slice(0,10);if(!i)return alert("Enter Task Name");if(!d)return alert("Enter Task Due Date");if(d<c)return alert("Enter Valid Due Date");t.reset();var u=Et(i,o,d,s);a.addTaskToProject(o,u),Tt(),_e(),Be(o)}function Xe(){At.emit(i)}function $e(t){"Enter"===t.key&&(t.preventDefault(),At.emit(i))}function Ze(t){dn.addTaskFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",Ze)}function Ue(){var t,e,n=jt(".add-task-form-container"),a=dn.addTaskFormState;"hidden"===a?(Nt(n,{"data-hidden":"false","aria-label":"visible"}),dn.addTaskFormState="visible"):"visible"===a&&(Nt(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,dn.addTaskFormState="closing",t.addEventListener("animationend",Ze)),function(t,e){var n=t.querySelectorAll(".add-task-input");!function(t,e){"visible"===e?t.forEach((function(t){t.addEventListener("keydown",$e)})):"closing"===e&&t.forEach((function(t){t.removeEventListener("keydown",$e)}))}(n,e),Ye(Array.from(n).find((function(t){return"task-add-due-date"===t.id})),e)}(n,dn.addTaskFormState),function(t){var e=jt("#add-task-button");"visible"===t?e.addEventListener("click",Xe):"closing"===t&&e.removeEventListener("click",Xe)}(e=dn.addTaskFormState),function(t){"visible"===t?At.on(i,Ge):"closing"===t&&At.off(i,Ge)}(e),function(t){!function(t){var e=jt("#cancel-add-task-button");"visible"===t?e.addEventListener("click",_e):"closing"===t&&e.removeEventListener("click",_e)}(t)}(dn.addTaskFormState)}function _e(){At.emit(u)}function Je(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var a=Me(t),r=document.createElement("div");r.setAttribute("id","main-content"),r.appendChild(a);var i,o=document.createElement("div"),s=t.getType();return o.setAttribute("id","main-container"),o.appendChild(e),"project"===s&&o.appendChild(((i=document.createElement("div")).setAttribute("id","project-handling-container"),i.append(function(){var t=document.createElement("button");t.classList.add("no-bubble-button","add-button"),Nt(t,{id:"add-task-form-opener-button",type:"button","aria-label":"Add Task"}),t.textContent="add task";var e=document.createElement("button");e.classList.add("no-bubble-button","delete-button"),Nt(e,{id:"delete-project-button",type:"button","aria-label":"Delete Project"}),e.textContent="delete project";var n=document.createElement("div");return n.setAttribute("id","project-button-container"),n.append(e,t),n}(),function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","task-add-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),Nt(e,{type:"text",id:"task-add-title",required:!0,placeholder:"what are the vibes?"});var n=document.createElement("div");n.classList.add("title-container","input-container"),n.append(t,e);var a=document.createElement("label");a.classList.add("add-task-label"),a.setAttribute("for","task-add-details"),a.textContent="Details (optional)";var r=document.createElement("input");r.classList.add("add-task-input"),Nt(r,{type:"text",id:"task-add-details",placeholder:"tell me more"});var i=document.createElement("div");i.classList.add("details-container","input-container"),i.append(a,r);var o=document.createElement("label");o.classList.add("add-task-label"),o.setAttribute("for","task-add-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("add-task-input"),Nt(s,{type:"text",id:"task-add-due-date",required:!0,"aria-label":"Enter Due Date",placeholder:"Select a date"});var d=document.createElement("div");d.classList.add("due-date-container","input-container"),d.append(o,s);var c=document.createElement("button");c.classList.add("add-task-button","bubble-button"),Nt(c,{id:"add-task-button",type:"button","aria-label":"Add Task",name:"add-task-button",form:"add-task-form"}),c.textContent="add";var u=document.createElement("button");u.classList.add("add-task-button","bubble-button"),Nt(u,{id:"cancel-add-task-button",type:"button","aria-label":"Cancel Add Task"}),u.textContent="cancel";var l=document.createElement("div");l.classList.add("add-task-button-container"),l.append(c,u);var m=document.createElement("form");m.setAttribute("id","add-task-form"),m.append(n,i,d,l);var f=document.createElement("div");return f.classList.add("add-task-form-container"),Nt(f,{id:"add-task-form-container","data-hidden":!0,"aria-label":"hidden"}),f.appendChild(m),f}()),i)),o.appendChild(r),o.appendChild(function(){var t=document.createElement("h2");t.classList.add("delete-confirmation-heading"),t.textContent="please confirm:";var e=document.createElement("button");e.classList.add("delete-confirmation-button","bubble-button"),e.textContent="delete";var n=document.createElement("button");n.classList.add("delete-confirmation-button","bubble-button"),n.textContent="cancel";var a=document.createElement("div");a.classList.add("delete-confirmation-button-container"),a.appendChild(e),a.appendChild(n);var r=document.createElement("div");r.classList.add("delete-confirmation-modal"),r.appendChild(t),r.appendChild(a);var i=document.createElement("dialog");return i.classList.add("delete-confirmation-dialog"),i.setAttribute("aria-hidden","true"),i.appendChild(r),i}()),o}function Ke(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function Ve(t,e){var n=t.getProjectArray().slice().reverse();if(e.firstChild)for(;e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),Nt(e,{type:"button","aria-label":"Project ".concat(t),"data-project-name":t}),e.textContent=t;var n=Ke(),a=document.createElement("li");return a.classList.add("project-li","nav-li"),e.setAttribute("aria-label","Project ".concat(t)),a.append(n,e),a}(t.getName()))}))}var tn=!1;function en(){var t,e,n,r=Re.projectObject,i=jt("#project-nav-list");a.deleteProject(r),Tt(),Re.taskListHasTaskItems()&&(At.off(l,Ie),He.isEditTaskFormEventPublished=!1),t=jt("#main-container"),e=t.parentNode,n=Je(yt("all tasks",a.getAllTasks())),t.remove(),e.appendChild(n),function(){var t=jt("#project-nav-list"),e=t.closest(".zig-zag-nav").querySelector('.nav-link[data-page-name="all tasks"]');Ve(a,t),e.setAttribute("aria-current","true")}(),Ve(a,i),dn.isAddTaskButtonListenerAttached=!1}function nn(t){var e="delete"===t.target.textContent,n="cancel"===t.target.textContent;if(e||n){var a=this.parentNode.parentNode;e?(en(),Pt(a),At.off(u,Ue),At.off(f,an),tn=!1):n&&(Pt(a),At.off(f,an),tn=!1)}}function an(){Mt(jt(".delete-confirmation-dialog")),jt(".delete-confirmation-button-container").addEventListener("click",nn)}function rn(){!0!==tn&&(tn=!0,At.on(f,an)),At.emit(f)}function on(t){return on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},on(t)}function sn(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==on(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!==on(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===on(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var dn=sn(sn(sn(sn({linkOrProjectName:"null",linkType:"link"},"linkOrProjectName",null),"addTaskFormState","hidden"),"isDeleteProjectButtonListenerAttached",!1),"isAddTaskButtonListenerAttached",!1);function cn(t){var e=function(t){var e=t.hasAttribute("data-project-name"),n=t.hasAttribute("data-page-name");if(e){var r=a.getProjectArray(),i=t.getAttribute("data-project-name"),o=r.find((function(t){return t.getName()===i}));return dn.linkType="project",o}if(n){var s=t.getAttribute("data-page-name"),d=function(t,e){var n=new Date;return({"all tasks":function(){return e},priorities:function(){return e.filter((function(t){return!0===t.getPriority()}))},today:function(){var t=ot(n,"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()===t}))},"next 7 days":function(){var t=ot(st(n,7),"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()<=t}))}}[t]||function(){return e})()}(s,a.getAllTasks()),c=yt(s,d);return dn.linkType="link",c}}(t),n=e.getName(),r=e.getType(),i=Je(e),o=i.querySelector("#task-list");dn.isAddTaskButtonListenerAttached&&(jt("#add-task-form-opener-button").removeEventListener("click",_e),dn.isAddTaskButtonListenerAttached=!1,At.off(u,Ue));var s,d,c=jt("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(c),c.appendChild(i),dn.linkOrProjectName=n,"project"===r&&(s=e,Re.projectObject=a.getProjectObject(s),jt("#delete-project-button").addEventListener("click",rn),dn.isDeleteProjectButtonListenerAttached=!0,function(t){var e=jt("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",_e),dn.isAddTaskButtonListenerAttached=!0)}(d=r),function(t){"project"===t&&At.on(u,Ue)}(d)),St(o)&&ze(o),t.addEventListener("transitionend",Cn,{once:!0})}var un="all tasks";function ln(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(jt(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page"),un=t.textContent.toLowerCase()}(e),function(t){At.emit(o,t)}(e))}function mn(){var t;!0===kn.open?At.on(o,cn):!1===kn.open&&At.off(o,cn),t=jt(".zig-zag-nav"),!0===kn.open?t.addEventListener("click",ln):!1===kn.open&&t.removeEventListener("click",ln)}function fn(){var t=jt("#add-project-form"),e=t.querySelector("#project-name-input").value.trim().toLowerCase();if(!e)return alert("Enter Project Name");t.reset();var n=kt(e);a.addProject(n);var r=jt("#project-nav-list");Ve(a,r),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(r),wn(),pn.projectFormState="hidden",Tt()}function hn(){At.emit(r)}function gn(t){"Enter"===t.key&&(t.preventDefault(),At.emit(r))}var pn={projectFormState:"hidden"};function bn(t){pn.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",bn)}function vn(){var t,e,n=jt("#add-project-form"),a=pn.projectFormState,i=jt("#project-name-input");"hidden"===a?(Nt(n,{"data-hidden":"false","aria-label":"visible"}),pn.projectFormState="visible"):"visible"===a&&(Nt(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,pn.projectFormState="closing",t.addEventListener("animationend",bn),i.value=""),function(t,e){!function(t,e){"visible"===e?t.addEventListener("keydown",gn):"closing"===e&&t.removeEventListener("keydown",gn)}(t,e)}(i,pn.projectFormState),function(t){var e=jt("#add-project-button");"visible"===t?e.addEventListener("click",hn):"closing"===t&&e.removeEventListener("click",hn)}(e=pn.projectFormState),function(t){"visible"===t?At.on(r,fn):"closing"===t&&At.off(r,fn)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",wn):"closing"===t&&e.removeEventListener("click",wn)}(t)}(pn.projectFormState)}function wn(){At.emit(c)}function yn(){var t=jt("#new-project-button");!0===kn.open?t.addEventListener("click",wn):!1===kn.open&&t.removeEventListener("click",wn),function(t){!0===t.open?At.on(c,vn):!1===t.open&&At.off(c,vn)}(kn)}var kn={open:!1,animating:!1,zigZagNavReference:null};function En(){kn.open=!1,kn.animating=!1,kn.zigZagNavReference.removeEventListener("animationend",En),kn.zigZagNavReference.setAttribute("aria-hidden",!0),kn.zigZagNavReference.setAttribute("data-visibility",!1),yn(),mn(),At.on(s,Tn),At.off(d,Tn)}function xn(){kn.animating=!0,kn.zigZagNavReference.setAttribute("data-visibility","closing"),kn.zigZagNavReference.addEventListener("animationend",En)}function Tn(){kn.open=!0,kn.animating=!1,kn.zigZagNavReference.setAttribute("aria-hidden",!1),kn.zigZagNavReference.setAttribute("data-visibility",!0),mn(),yn(),At.on(d,xn),At.off(s,Tn)}function Cn(){var t=jt(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),At.emit(d);else{if(!0===kn.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),At.emit(s)}}function Dn(t){var e=document.head.querySelector('meta[name="color-scheme"]');e||((e=document.createElement("meta")).setAttribute("name","color-scheme"),document.head.appendChild(e)),e.setAttribute("content","light"===t?"light dark":"dark light")}function Ln(t){var e=t.checked?"light":"dark";a.setSavedTheme(e),function(t,e){try{localStorage.setItem("savedTheme",e)}catch(t){console.error("Error setting localStorage item:",t)}}(0,e),document.body.classList.toggle("light-mode","light"===e),Dn(e)}var Sn={projectArrayItemExists:null,savedThemeItemExists:null};var jn={menu:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},projects:{listElements:[]}};const An=t.p+"f0f19e6f57687481453e.webp";const Nn=t.p+"e7124316bf43e6e2e0ba.svg";var Mn,Pn,On,qn,Yn;!function(){if(xt("localStorage")){var t={projectArray:localStorage.getItem("projectArray"),savedTheme:localStorage.getItem("savedTheme")};if(t.projectArray){var e=function(){var t,e=JSON.parse(localStorage.getItem("projectArray"));return t=[],e.forEach((function(e){var n=kt(e.name);e.taskArray.forEach((function(t){var a=Et(t.name,e.name,t.dueDate,t.details,t.priority,t.completed);n.addTask(a)})),t.push(n)})),t}();a.setProjectArray(e),Sn.projectArrayItemExists=!0}if(t.savedTheme){var n=t.savedTheme;a.setSavedTheme(n),Sn.savedThemeItemExists=!0}}}(),qn=jt("#content"),Yn=yt("all tasks",a.getAllTasks()),qn.append(function(){var t=document.createElement("img");t.classList.add("header-logo"),Nt(t,{alt:"Priority Logo","aria-label":"Priority Logo",src:An});var e=document.createElement("h1");e.classList.add("header-title"),e.textContent="<pr{io}rity>";var n=document.createElement("div");n.classList.add("header-left"),n.append(t,e);var a=document.createElement("div");a.classList.add("header-right"),a.append(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox"),"enabled"===localStorage.getItem("lightMode")?(e.checked=!0,e.setAttribute("data-checked","true"),e.setAttribute("aria-label","Toggle Dark Mode")):null===localStorage.getItem("lightMode")&&(e.checked=!1,e.setAttribute("data-checked","false"),e.setAttribute("aria-label","Toggle Light Mode"));var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var a=document.createElement("i");a.classList.add("fa-solid","fa-sun"),a.setAttribute("id","sun");var r=document.createElement("i");return r.classList.add("fa-solid","fa-moon"),r.setAttribute("id","moon"),n.appendChild(a),n.appendChild(r),t.appendChild(e),t.appendChild(n),t}(),function(t){var e=document.createElement("div");e.classList.add("nav-toggle-bars");var n=document.createElement("button");return n.classList.add("nav-toggle-button"),Nt(n,{"aria-label":"Open Navigation Menu","aria-expanded":!1,"aria-controls":"nav-primary-aria"}),n.appendChild(e),n}());var r=document.createElement("header");return r.append(n,a),r}(),function(t,e,n,a,r){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=s,i.appendChild(n);var a=document.createElement("ul");a.classList.add("nav-ul");var r=t[s].listElements,o=document.createDocumentFragment();r.forEach((function(t,e){var n=t[0],a=(t[1],document.createElement("button"));a.classList.add("nav-link"),"All Tasks"===n&&a.setAttribute("aria-current","page");var r=document.createElement("li");r.classList.add("nav-li"),a.textContent=n,a.setAttribute("data-page-name",n.toLowerCase()),r.appendChild(a),o.appendChild(r)})),a.appendChild(o),e.appendChild(n),e.appendChild(a),i.appendChild(e)};for(var s in t)o();return i}(jn),(Pn=Je(Yn),(On=document.createElement("main")).appendChild(Pn),On),function(){var t=document.createElement("img");t.classList.add("cyclone-studios-logo"),Nt(t,{src:Nn,alt:"Cyclone Studios logo"});var e=document.createElement("a");e.classList.add("cyclone-studios-logo-link"),Nt(e,{href:"https://www.cyclonestud.io",rel:"noopener noreferrer",target:"_blank",type:"button","aria-label":"Cyclone Studios link"}),e.appendChild(t);var n=(new Date).getFullYear(),a="©".concat(n),r=document.createElement("p");r.classList.add("footer-paragraph"),r.textContent=a;var i=document.createElement("div");i.classList.add("cyclone-logo-container"),i.append(e,r);var o=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"johnKeysCloud",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M8.20003216,0 C3.67186256,0 0,3.67233045 0,8.2025137 C0,11.8266603 2.34955472,14.9012922 5.60770169,15.9859115 C6.01749428,16.0618219 6.16798309,15.8079721 6.16798309,15.5913056 C6.16798309,15.3957396 6.16033003,14.7495356 6.15685721,14.064154 C3.87553694,14.5603383 3.3941657,13.0963596 3.3941657,13.0963596 C3.02115925,12.1482506 2.48370842,11.896202 2.48370842,11.896202 C1.7397535,11.3870871 2.53978801,11.3975087 2.53978801,11.3975087 C3.36323189,11.4554066 3.79681972,12.242817 3.79681972,12.242817 C4.52816959,13.4968196 5.71510182,13.1342505 6.18303197,12.9247247 C6.25660428,12.3945093 6.46915364,12.0327122 6.70363321,11.8278826 C4.88233278,11.6204154 2.96765212,10.9170854 2.96765212,7.77413412 C2.96765212,6.87864774 3.28798748,6.14688355 3.81257603,5.57247278 C3.72742766,5.36584187 3.44677247,4.53159853 3.89200067,3.40175461 C3.89200067,3.40175461 4.58058343,3.18129256 6.14759636,4.24255971 C6.80164386,4.06076054 7.50315322,3.96966796 8.20003216,3.96658007 C8.89691109,3.96966796 9.59893494,4.06076054 10.2542687,4.24255971 C11.8194166,3.18129256 12.5070347,3.40175461 12.5070347,3.40175461 C12.9533562,4.53159853 12.6725723,5.36584187 12.587424,5.57247278 C13.1131701,6.14688355 13.4313189,6.87858341 13.4313189,7.77413412 C13.4313189,10.9245478 11.5130368,11.6182925 9.68710595,11.8213208 C9.98120223,12.0758783 10.2432714,12.5750862 10.2432714,13.3403025 C10.2432714,14.4377879 10.2337533,15.3211158 10.2337533,15.5913056 C10.2337533,15.8095804 10.3813481,16.0653602 10.7970574,15.9848178 C14.0534036,14.8989763 16.4,11.825438 16.4,8.2025137 C16.4,3.67233045 12.7286519,0 8.20003216,0");var i=document.createElementNS("http://www.w3.org/2000/svg","path");Nt(i,{d:"M3.07518929,11.6824029 C3.05731167,11.723257 2.99359073,11.7355197 2.93568001,11.7075092 C2.87662002,11.6806603 2.84341872,11.6248974 2.86257332,11.5838496 C2.88013169,11.5417693 2.94385264,11.5300229 3.00278493,11.5582916 C3.06197262,11.5850759 3.09568471,11.6413552 3.07518929,11.6824029 M3.47564797,12.0435714 C3.436828,12.0799722 3.36091196,12.0630626 3.30938611,12.0055571 C3.25613634,11.9481806 3.24617596,11.8715065 3.28557057,11.8345248 C3.32560367,11.7981885 3.39922115,11.8151627 3.45259861,11.8726037 C3.50584838,11.9306256 3.51619186,12.0068479 3.47558413,12.0436359 M3.75038868,12.5056811 C3.70045904,12.5407266 3.61886048,12.5078755 3.5684839,12.4346866 C3.51861811,12.3615623 3.51861811,12.2737872 3.56956933,12.2386127 C3.62013745,12.2034381 3.70045904,12.235063 3.75153796,12.307671 C3.8013399,12.3820861 3.8013399,12.4698612 3.75032483,12.5057457 M4.2149514,13.0409152 C4.1703212,13.0906114 4.07531442,13.0773161 4.0057194,13.0094195 C3.93459201,12.9430719 3.91473508,12.8489074 3.95949298,12.7991467 C4.00463397,12.7493214 4.10021539,12.7633267 4.1703212,12.8306424 C4.24100164,12.8968609 4.26258248,12.9917354 4.21501525,13.0409152 M4.81538402,13.2216286 C4.79578249,13.2860399 4.70422354,13.3153413 4.6120261,13.2879762 C4.51995636,13.259772 4.45968324,13.1842596 4.4782632,13.1191383 C4.49741779,13.0542751 4.58935983,13.0237475 4.68225961,13.0530489 C4.77420165,13.081124 4.83460247,13.1560554 4.81544787,13.2216286 M5.49881989,13.2982381 C5.50111844,13.3661347 5.42290385,13.422414 5.32610931,13.4236402 C5.22874013,13.4257701 5.15001476,13.3708461 5.14899318,13.3041113 C5.14899318,13.2355693 5.22542,13.1798063 5.32272533,13.1781928 C5.41951987,13.1762566 5.49881989,13.2307933 5.49881989,13.2982381 M6.17012451,13.2722283 C6.18174496,13.3384468 6.11444849,13.4064725 6.01835628,13.4245438 C5.92386029,13.4419697 5.83638766,13.4011156 5.82432026,13.3354779 C5.81257211,13.2675814 5.88114555,13.1996203 5.97545,13.1820007 C6.07173375,13.1650911 6.15786557,13.2049126 6.17012451,13.2722283","fill-rule":"nonzero"});var o=document.createElementNS("http://www.w3.org/2000/svg","g");o.setAttribute("fill",e),o.append(r,i);var s=document.createElementNS("http://www.w3.org/2000/svg","g");Nt(s,{stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}),s.appendChild(o);var d=document.createElementNS("http://www.w3.org/2000/svg","svg");d.classList.add("git-hub-svg"),Nt(d,{viewBox:"0 0 17 16",version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:t,height:t}),d.appendChild(s);var c=document.createElement("a");return c.classList.add("git-hub-logo-link"),Nt(c,{href:a?"https://github.com/".concat(n,"/").concat(a):"https://github.com/".concat(n),rel:"noopener noreferrer",target:"_blank",type:"button","aria-label":"GitHub profile link"}),c.appendChild(d),c}("1.5rem","white","johnkeyscloud","priority"),s=document.createElement("footer");return s.append(i,o),s}()),(Mn=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),Mn.insertBefore(function(){var t=document.createElement("input");Nt(t,{id:"project-name-input",type:"text",placeholder:"Enter Project Name","max-length":"24"});var e=document.createElement("button");Nt(e,{id:"add-project-button",class:"bubble-button",type:"button",required:!0,name:"add-project",form:"add-project-form","aria-label":"Add Project"}),e.textContent="add";var n=document.createElement("button");Nt(n,{id:"cancel-add-project-button",class:"bubble-button",type:"button","aria-label":"Cancel Add Project"}),n.textContent="cancel";var a=document.createElement("div");a.setAttribute("id","project-input-container"),a.append(Ke(),t);var r=document.createElement("div");r.setAttribute("id","project-buttons-container"),r.append(e,n);var i=document.createElement("form");Nt(i,{id:"add-project-form","aria-label":"hidden","data-hidden":!0}),i.append(a,r);var o=document.createElement("button");o.classList.add("no-bubble-button","add-button"),Nt(o,{id:"new-project-button",type:"button","aria-label":"New Project"}),o.textContent="New Project";var s=document.createElement("div");return s.setAttribute("id","add-project-container"),s.append(o,i),s}(),Mn.lastChild),Mn.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),function(){var t;t=jt(".zig-zag-nav"),kn.zigZagNavReference=t,At.on(s,Tn),jt(".nav-toggle-button").addEventListener("click",Cn);var e,n,r=jt("#theme-toggle-checkbox");if(function(t){var e;e=function(){At.emit(m,t)},t.addEventListener("change",e),At.on(m,Ln)}(r),e=r,n=a.getSavedTheme()||(window.matchMedia("(prefers-color-scheme: light)").matches?"light":"dark"),e.checked="light"===n,document.body.classList.toggle("light-mode","light"===n),Dn(n),Sn.projectArrayItemExists){var i=jt("#project-nav-list");Ve(a,i);var o=jt("#task-list");St(o)&&ze(o)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,