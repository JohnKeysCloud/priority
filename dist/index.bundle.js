(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e,n=(e=[],{addTaskToProject:function(t,n){e.find((function(e){return e.getName()===t})).addTask(n)},getProjectArray:function(){return[].concat(e)},arrangeProjectArray:function(t){return[].concat(e).filter(t)},getProjectArrayLength:function(){return e.length},addProject:function(t){e.push(t)},deleteProject:function(t){e.splice(e.indexOf(t),1)},getAllTasks:function(){return e.flatMap((function(t){return t.getTaskArray()}))},getProjectObject:function(t){return e.find((function(e){return e.getName()===t}))}});Math.pow(10,8);const r=6048e5,a=864e5,i=6e4,o=36e5;function s(t,e){const n=e?.additionalDigits??2,r=function(t){const e={},n=t.split(d.dateTimeDelimiter);let r;if(n.length>2)return e;if(/:/.test(n[0])?r=n[0]:(e.date=n[0],r=n[1],d.timeZoneDelimiter.test(e.date)&&(e.date=t.split(d.timeZoneDelimiter)[0],r=t.substr(e.date.length,t.length))),r){const t=d.timezone.exec(r);t?(e.time=r.replace(t[1],""),e.timezone=t[1]):e.time=r}return e}(t);let a;if(r.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};const a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:t.slice((r[1]||r[2]).length)}}(r.date,n);a=function(t,e){if(null===e)return new Date(NaN);const n=t.match(u);if(!n)return new Date(NaN);const r=!!n[4],a=m(n[1]),i=m(n[2])-1,o=m(n[3]),s=m(n[4]),d=m(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,d)?function(t,e,n){const r=new Date(0);r.setUTCFullYear(t,0,4);const a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,d):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(f[e]||(p(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(p(t)?366:365)}(e,a)?(t.setUTCFullYear(e,i,Math.max(a,o)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);const s=a.getTime();let b,g=0;if(r.time&&(g=function(t){const e=t.match(c);if(!e)return NaN;const n=h(e[1]),r=h(e[2]),a=h(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*o+r*i+1e3*a:NaN}(r.time),isNaN(g)))return new Date(NaN);if(!r.timezone){const t=new Date(s+g),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return b=function(t){if("Z"===t)return 0;const e=t.match(l);if(!e)return 0;const n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*o+a*i):NaN}(r.timezone),isNaN(b)?new Date(NaN):new Date(s+g+b)}const d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},u=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(t){return t?parseInt(t):1}function h(t){return t&&parseFloat(t.replace(",","."))||0}const f=[31,null,31,30,31,30,31,31,30,31,30,31];function p(t){return t%400==0||t%4==0&&t%100!=0}function b(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function g(t,e){const n=b(t),r=b(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function y(t,e){var n={name:t,tasks:e,type:"link"};return{getName:function(){return n.name},getType:function(){return n.type},getShallowCopy:function(){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(Object(n),!0).forEach((function(e){var r,a,i;r=t,a=e,i=n[e],(a=function(t){var e=function(t,e){if("object"!==w(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==w(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===w(e)?e:String(e)}(a))in r?Object.defineProperty(r,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[a]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},n)},sortTaskArray:function(){n.tasks.sort((function(t,e){var n=t.getDueDate(),r=e.getDueDate();return g(s(n),s(r))}))},getTaskArray:function(){return n.tasks}}}const k=t.p+"f0f19e6f57687481453e.webp";var x="showNav",E="hideNav",A="toggleAddProjectForm",T="toggelAddTaskForm",C="toggleEditTaskForm",D="addNewProject",L="addNewTask",M="handleMain";function N(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=b(t);return!isNaN(Number(n))}const S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function P(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const j={date:P({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:P({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:P({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;r=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;r=t.values[a]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function O(t){return(e,n={})=>{const r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;const o=i[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let u;return u=t.valueCallback?t.valueCallback(d):d,u=n.valueCallback?n.valueCallback(u):u,{value:u,rest:e.slice(o.length)}}}var H;const W={code:"en-US",formatDistance:(t,e,n)=>{let r;const a=S[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:j,formatRelative:(t,e,n,r)=>q[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(H={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(H.matchPattern);if(!n)return null;const r=n[0],a=t.match(H.parsePattern);if(!a)return null;let i=H.valueCallback?H.valueCallback(a[0]):a[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(r.length)}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let F={};function Q(){return F}function I(t){const e=b(t);return e.setHours(0,0,0,0),e}function B(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function z(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function G(t){const e=b(t);return function(t,e){const n=I(t),r=I(e),i=n.getTime()-B(n),o=r.getTime()-B(r);return Math.round((i-o)/a)}(e,function(t){const e=b(t),n=z(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function X(t,e){const n=Q(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=b(t),i=a.getDay(),o=(i<r?7:0)+i-r;return a.setDate(a.getDate()-o),a.setHours(0,0,0,0),a}function R(t){return X(t,{weekStartsOn:1})}function $(t){const e=b(t),n=e.getFullYear(),r=z(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const a=R(r),i=z(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const o=R(i);return e.getTime()>=a.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function U(t){const e=b(t),n=R(e).getTime()-function(t){const e=$(t),n=z(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),R(n)}(e).getTime();return Math.round(n/r)+1}function Z(t,e){const n=b(t),r=n.getFullYear(),a=Q(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,o=z(t,0);o.setFullYear(r+1,0,i),o.setHours(0,0,0,0);const s=X(o,e),d=z(t,0);d.setFullYear(r,0,i),d.setHours(0,0,0,0);const u=X(d,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}function K(t,e){const n=b(t),a=X(n,e).getTime()-function(t,e){const n=Q(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=Z(t,e),i=z(t,0);return i.setFullYear(a,0,r),i.setHours(0,0,0,0),X(i,e)}(n,e).getTime();return Math.round(a/r)+1}function V(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const J={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return V("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):V(n+1,2)},d:(t,e)=>V(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>V(t.getHours()%12||12,e.length),H:(t,e)=>V(t.getHours(),e.length),m:(t,e)=>V(t.getMinutes(),e.length),s:(t,e)=>V(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return V(Math.floor(r*Math.pow(10,n-3)),e.length)}},_={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return J.y(t,e)},Y:function(t,e,n,r){const a=Z(t,r),i=a>0?a:1-a;return"YY"===e?V(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):V(i,e.length)},R:function(t,e){return V($(t),e.length)},u:function(t,e){return V(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return V(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return J.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const a=K(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):V(a,e.length)},I:function(t,e,n){const r=U(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):V(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):J.d(t,e)},D:function(t,e,n){const r=G(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):V(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return V(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return V(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return V(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return J.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):J.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):V(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):V(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):J.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):J.s(t,e)},S:function(t,e){return J.S(t,e)},X:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return et(a);case"XXXX":case"XX":return nt(a);default:return nt(a,":")}},x:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return et(a);case"xxxx":case"xx":return nt(a);default:return nt(a,":")}},O:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+tt(a,":");default:return"GMT"+nt(a,":")}},z:function(t,e,n,r){const a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+tt(a,":");default:return"GMT"+nt(a,":")}},t:function(t,e,n,r){const a=r._originalDate||t;return V(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return V((r._originalDate||t).getTime(),e.length)}};function tt(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;return 0===i?n+String(a):n+String(a)+e+V(i,2)}function et(t,e){return t%60==0?(t>0?"-":"+")+V(Math.abs(t)/60,2):nt(t,e)}function nt(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+V(Math.floor(r/60),2)+e+V(r%60,2)}const rt=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},at=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},it={p:at,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return rt(t,e);let i;switch(r){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",rt(r,e)).replace("{{time}}",at(a,e))}},ot=["D","DD"],st=["YY","YYYY"];function dt(t){return-1!==ot.indexOf(t)}function ut(t){return-1!==st.indexOf(t)}function ct(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const lt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,mt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ht=/^'([^]*?)'?$/,ft=/''/g,pt=/[a-zA-Z]/;function bt(t,e,n){const r=Q(),a=n?.locale??r.locale??W,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=b(t);if(!N(s))throw new RangeError("Invalid time value");const d={firstWeekContainsDate:i,weekStartsOn:o,locale:a,_originalDate:s};return e.match(mt).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,it[e])(t,a.formatLong):t})).join("").match(lt).map((function(r){if("''"===r)return"'";const i=r[0];if("'"===i)return function(t){const e=t.match(ht);return e?e[1].replace(ft,"'"):t}(r);const o=_[i];if(o)return!n?.useAdditionalWeekYearTokens&&ut(r)&&ct(r,e,String(t)),!n?.useAdditionalDayOfYearTokens&&dt(r)&&ct(r,e,String(t)),o(s,r,a.localize,d);if(i.match(pt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function gt(t,e){const n=b(t);return isNaN(e)?z(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function wt(t){var e,r=t.target,a=r.tagName.toLowerCase();if("button"===a||"input"===a){var i=r.closest(".task-item");if(i){var o=(e=i.querySelector(".task-item-title").textContent.toLowerCase(),n.getAllTasks().find((function(t){return t.getName()===e}))),s={"task-item-checkbox":function(){return e=o,void(!0===(n=(t=r).checked)?(e.setCompleted(!0),t.setAttribute("data-checked","true")):!1===n&&(e.setCompleted(!1),t.setAttribute("data-checked","false")));var t,e,n},"task-priority-star-button":function(){return e=o,n=(t=r).getAttribute("data-checked"),function(t,e){"false"===e?t.setAttribute("data-checked","true"):"true"===e&&t.setAttribute("data-checked","false")}(t,n),void("false"===n?e.setPriority(!0):"true"===n&&e.setPriority(!1));var t,e,n},"modify-task-button":function(){return De(o)}}[r.className];s&&s()}}}class vt{subPriority=0;validate(t,e){return!0}}class yt extends vt{constructor(t,e,n,r,a){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=r,a&&(this.subPriority=a)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class kt extends vt{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:z(t,function(t,e){const n=e instanceof Date?z(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class xt{run(t,e,n,r){const a=this.parse(t,e,n,r);return a?{setter:new yt(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}validate(t,e,n){return!0}}const Et=/^(1[0-2]|0?\d)/,At=/^(3[0-1]|[0-2]?\d)/,Tt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Ct=/^(5[0-3]|[0-4]?\d)/,Dt=/^(2[0-3]|[0-1]?\d)/,Lt=/^(2[0-4]|[0-1]?\d)/,Mt=/^(1[0-1]|0?\d)/,Nt=/^(1[0-2]|0?\d)/,St=/^[0-5]?\d/,Pt=/^[0-5]?\d/,jt=/^\d/,qt=/^\d{1,2}/,Yt=/^\d{1,3}/,Ot=/^\d{1,4}/,Ht=/^-?\d+/,Wt=/^-?\d/,Ft=/^-?\d{1,2}/,Qt=/^-?\d{1,3}/,It=/^-?\d{1,4}/,Bt=/^([+-])(\d{2})(\d{2})?|Z/,zt=/^([+-])(\d{2})(\d{2})|Z/,Gt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Xt=/^([+-])(\d{2}):(\d{2})|Z/,Rt=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function $t(t,e){return t?{value:e(t.value),rest:t.rest}:t}function Ut(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function Zt(t,e){const n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};const r="+"===n[1]?1:-1,a=n[2]?parseInt(n[2],10):0,s=n[3]?parseInt(n[3],10):0,d=n[5]?parseInt(n[5],10):0;return{value:r*(a*o+s*i+1e3*d),rest:e.slice(n[0].length)}}function Kt(t){return Ut(Ht,t)}function Vt(t,e){switch(t){case 1:return Ut(jt,e);case 2:return Ut(qt,e);case 3:return Ut(Yt,e);case 4:return Ut(Ot,e);default:return Ut(new RegExp("^\\d{1,"+t+"}"),e)}}function Jt(t,e){switch(t){case 1:return Ut(Wt,e);case 2:return Ut(Ft,e);case 3:return Ut(Qt,e);case 4:return Ut(It,e);default:return Ut(new RegExp("^-?\\d{1,"+t+"}"),e)}}function _t(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function te(t,e){const n=e>0,r=n?e:1-e;let a;if(r<=50)a=t||100;else{const e=r+50;a=t+100*Math.floor(e/100)-(t>=e%100?100:0)}return n?a:1-a}function ee(t){return t%400==0||t%4==0&&t%100!=0}const ne=[31,28,31,30,31,30,31,31,30,31,30,31],re=[31,29,31,30,31,30,31,31,30,31,30,31];function ae(t,e,n){const r=Q(),a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,i=b(t),o=i.getDay(),s=7-a;return gt(i,e<0||e>6?e-(o+s)%7:((e%7+7)%7+s)%7-(o+s)%7)}function ie(t,e){const n=b(t);return gt(n,e-function(t){let e=b(t).getDay();return 0===e&&(e=7),e}(n))}const oe={G:new class extends xt{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends xt{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return $t(Vt(4,t),r);case"yo":return $t(n.ordinalNumber(t,{unit:"year"}),r);default:return $t(Vt(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const r=t.getFullYear();if(n.isTwoDigitYear){const e=te(n.year,r);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const a="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(a,0,1),t.setHours(0,0,0,0),t}},Y:new class extends xt{priority=130;parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return $t(Vt(4,t),r);case"Yo":return $t(n.ordinalNumber(t,{unit:"year"}),r);default:return $t(Vt(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,r){const a=Z(t,r);if(n.isTwoDigitYear){const e=te(n.year,a);return t.setFullYear(e,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),X(t,r)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),X(t,r)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends xt{priority=130;parse(t,e){return Jt("R"===e?4:e.length,t)}set(t,e,n){const r=z(t,0);return r.setFullYear(n,0,4),r.setHours(0,0,0,0),R(r)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends xt{priority=130;parse(t,e){return Jt("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends xt{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return Vt(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends xt{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return Vt(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends xt{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"M":return $t(Ut(Et,t),r);case"MM":return $t(Vt(2,t),r);case"Mo":return $t(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends xt{priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"L":return $t(Ut(Et,t),r);case"LL":return $t(Vt(2,t),r);case"Lo":return $t(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends xt{priority=100;parse(t,e,n){switch(e){case"w":return Ut(Ct,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n,r){return X(function(t,e,n){const r=b(t),a=K(r,n)-e;return r.setDate(r.getDate()-7*a),r}(t,n,r),r)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends xt{priority=100;parse(t,e,n){switch(e){case"I":return Ut(Ct,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,e,n){return R(function(t,e){const n=b(t),r=U(n)-e;return n.setDate(n.getDate()-7*r),n}(t,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends xt{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return Ut(At,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return Vt(e.length,t)}}validate(t,e){const n=ee(t.getFullYear()),r=t.getMonth();return n?e>=1&&e<=re[r]:e>=1&&e<=ne[r]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends xt{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return Ut(Tt,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return Vt(e.length,t)}}validate(t,e){return ee(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends xt{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends xt{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return $t(Vt(e.length,t),a);case"eo":return $t(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends xt{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return $t(Vt(e.length,t),a);case"co":return $t(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=ae(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends xt{priority=90;parse(t,e,n){const r=t=>0===t?7:t;switch(e){case"i":case"ii":return Vt(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return $t(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return $t(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return $t(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return $t(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=ie(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends xt{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends xt{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends xt{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(_t(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends xt{priority=70;parse(t,e,n){switch(e){case"h":return Ut(Nt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const r=t.getHours()>=12;return r&&n<12?t.setHours(n+12,0,0,0):r||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends xt{priority=70;parse(t,e,n){switch(e){case"H":return Ut(Dt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends xt{priority=70;parse(t,e,n){switch(e){case"K":return Ut(Mt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends xt{priority=70;parse(t,e,n){switch(e){case"k":return Ut(Lt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return Vt(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const r=n<=24?n%24:n;return t.setHours(r,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends xt{priority=60;parse(t,e,n){switch(e){case"m":return Ut(St,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends xt{priority=50;parse(t,e,n){switch(e){case"s":return Ut(Pt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return Vt(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends xt{priority=30;parse(t,e){return $t(Vt(e.length,t),(t=>Math.floor(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends xt{priority=10;parse(t,e){switch(e){case"X":return Zt(Bt,t);case"XX":return Zt(zt,t);case"XXXX":return Zt(Gt,t);case"XXXXX":return Zt(Rt,t);default:return Zt(Xt,t)}}set(t,e,n){return e.timestampIsSet?t:z(t,t.getTime()-B(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends xt{priority=10;parse(t,e){switch(e){case"x":return Zt(Bt,t);case"xx":return Zt(zt,t);case"xxxx":return Zt(Gt,t);case"xxxxx":return Zt(Rt,t);default:return Zt(Xt,t)}}set(t,e,n){return e.timestampIsSet?t:z(t,t.getTime()-B(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends xt{priority=40;parse(t){return Kt(t)}set(t,e,n){return[z(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends xt{priority=20;parse(t){return Kt(t)}set(t,e,n){return[z(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},se=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,de=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ue=/^'([^]*?)'?$/,ce=/''/g,le=/\S/,me=/[a-zA-Z]/;function he(t,e,n,r){const a=Object.assign({},Q()),i=r?.locale??a.locale??W,o=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,s=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0;if(""===e)return""===t?b(n):z(n,NaN);const d={firstWeekContainsDate:o,weekStartsOn:s,locale:i},u=[new kt],c=e.match(de).map((t=>{const e=t[0];return e in it?(0,it[e])(t,i.formatLong):t})).join("").match(se),l=[];for(let a of c){!r?.useAdditionalWeekYearTokens&&ut(a)&&ct(a,e,t),!r?.useAdditionalDayOfYearTokens&&dt(a)&&ct(a,e,t);const o=a[0],s=oe[o];if(s){const{incompatibleTokens:e}=s;if(Array.isArray(e)){const t=l.find((t=>e.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${a}\` at the same time`)}else if("*"===s.incompatibleTokens&&l.length>0)throw new RangeError(`The format string mustn't contain \`${a}\` and any other token at the same time`);l.push({token:o,fullToken:a});const r=s.run(t,a,i.match,d);if(!r)return z(n,NaN);u.push(r.setter),t=r.rest}else{if(o.match(me))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===a?a="'":"'"===o&&(a=a.match(ue)[1].replace(ce,"'")),0!==t.indexOf(a))return z(n,NaN);t=t.slice(a.length)}}if(t.length>0&&le.test(t))return z(n,NaN);const m=u.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>u.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let h=b(n);if(isNaN(h.getTime()))return z(n,NaN);const f={};for(const t of m){if(!t.validate(h,d))return z(n,NaN);const e=t.set(h,f,d);Array.isArray(e)?(h=e[0],Object.assign(f,e[1])):h=e}return z(n,h)}function fe(t,e){for(var n in e)t.setAttribute(n,e[n])}function pe(t){var e=t.getTaskArray(),n=t.getType();if(0===e.length&&"link"===n)return function(){var t=document.createElement("p");t.setAttribute("id","placeholder-text"),t.classList.add("hvr-wobble-vertical"),t.textContent="nothing to see here...";var e=document.createElement("li");return e.setAttribute("id","placeholder-container"),e.appendChild(t),e}();if(e.length>0){var r=document.createDocumentFragment();return e.length>1&&t.sortTaskArray(),e.forEach((function(t){r.appendChild(function(t){var e=t.getName().toLowerCase(),n=t.getDetails(),r=t.getDueDate(),a=t.getCompleted(),i=t.getPriority(),o=document.createElement("input");o.setAttribute("type","checkbox"),o.setAttribute("data-checked",a?"true":"false"),o.classList.add("task-item-checkbox"),o.checked=!!a;var s=document.createElement("div");s.classList.add("task-checkbox-container"),s.appendChild(o);var d=document.createElement("h4");d.classList.add("task-item-title"),d.textContent=e;var u=document.createElement("p");u.classList.add("task-item-details"),u.textContent=n;var c,l=document.createElement("p");l.classList.add("task-item-date"),l.textContent="Due ".concat((c={year:"numeric",month:"short",day:"numeric"},he(r,"yyyy-MM-dd",new Date).toLocaleDateString("en-us",c)));var m=document.createElement("span");m.classList.add("task-priority-star-icon","material-symbols-outlined"),m.textContent="star";var h=document.createElement("button");h.classList.add("task-priority-star-button"),fe(h,{"aria-label":"Prioritize Task",type:"button","data-checked":i?"true":"false"}),h.appendChild(m);var f=document.createElement("button");f.classList.add("modify-task-button"),f.setAttribute("type","button"),f.setAttribute("aria-label","Edit Task");var p=document.createElement("i");p.classList.add("fa-solid","fa-ellipsis-vertical"),f.appendChild(p);var b=document.createElement("div");b.classList.add("task-item-button-container"),b.appendChild(h),b.appendChild(f);var g=document.createElement("div");g.classList.add("task-right-side-container"),g.appendChild(l),g.appendChild(b);var w=document.createElement("li");return w.classList.add("task-item"),w.appendChild(s),w.appendChild(d),""!==n.trim()&&w.appendChild(u),w.appendChild(g),w}(t))})),r}}function be(t){var e=document.createElement("ul");e.setAttribute("id","task-list");var n=pe(t);return n&&e.appendChild(n),e}function ge(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}function we(){var t=ge("#edit-task-form"),e=t.querySelector("#edit-task-title"),r=t.querySelector("#edit-task-details"),a=t.querySelector("#edit-task-due-date"),i=e.value.trim().toLowerCase(),o=r.value.trim(),s=a.value;return i?s?s<(new Date).toISOString().slice(0,10)?alert("Enter Valid Due Date"):(t.reset(),xe.setName(i),xe.setDetails(o),xe.setDueDate(s),De(),void("project"===Fe.linkType?Ne(Fe.projectName):"link"===Fe.linkType&&function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:activeLink,e=ge("#main-content"),r=e.querySelector("#task-list"),a=be(y(t,n.getAllTasks()));r.remove(),e.appendChild(a),Me(a)&&Le(a)}(We))):alert("Enter Task Due Date"):alert("Enter Task Name")}function ve(t){if(t.target.classList.contains("edit-task-button")){var e=t.target.getAttribute("id"),n="cancel-edit-task-button"===e;"save-edit-task-button"===e?we():n&&De()}}function ye(t){t.close(),fe(t,{"data-hidden":"hidden","aria-label":"hidden"})}var ke,xe,Ee={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var n=0;n<this.events[t].length;n++)if(this.events[t][n]===e){this.events[t].splice(n,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach((function(t){t(e)}))}},Ae=!1;function Te(t){var e=ge(".edit-task-button-container");"hidden"===t?e.removeEventListener("click",ve):"visible"===t&&e.addEventListener("click",ve)}function Ce(t){var e,n,r,a=ge("#edit-task-modal"),i=a.getAttribute("data-hidden");"hidden"===i?(ke="visible",function(t){var e=ge("#edit-task-modal"),n=e.querySelector("#edit-task-title"),r=e.querySelector("#edit-task-details"),a=e.querySelector("#edit-task-due-date"),i=t.getName(),o=t.getDetails(),s=t.getDueDate();n.value=i,r.value=o,a.value=s}(t),(r=a).showModal(),fe(r,{"data-hidden":"visible","aria-label":"visible"}),Te(ke)):"visible"===i&&(ke="closing",n=ye,(e=a).setAttribute("data-hidden","closing"),e.addEventListener("animationend",(function t(){n(e),e.removeEventListener("animationend",t),ke="hidden"})),Te(ke)),xe=t}function De(t){Ee.emit(C,t)}function Le(t){var e,n;e=ge("#content"),n=function(){var t=document.createElement("h2");t.setAttribute("id","edit-task-heading"),t.textContent="Edit Task";var e=document.createElement("dialog");return fe(e,{id:"edit-task-modal","aria-label":"hidden","data-hidden":"hidden"}),e.appendChild(t),e.appendChild(function(){var t=document.createElement("label");t.classList.add("edit-task-label"),t.setAttribute("for","edit-task-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("edit-task-input"),e.setAttribute("type","text"),e.setAttribute("id","edit-task-title"),e.setAttribute("required","true"),e.setAttribute("placeholder","what are the vibes?"),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var n=document.createElement("div");n.classList.add("title-container"),n.classList.add("input-container"),n.appendChild(t),n.appendChild(e);var r=document.createElement("label");r.classList.add("edit-task-label"),r.setAttribute("for","edit-task-details"),r.textContent="Details (optional)";var a=document.createElement("input");a.classList.add("edit-task-input"),a.setAttribute("type","text"),a.setAttribute("id","edit-task-details"),a.setAttribute("placeholder","tell me more"),a.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var i=document.createElement("div");i.classList.add("details-container"),i.classList.add("input-container"),i.appendChild(r),i.appendChild(a);var o=document.createElement("label");o.classList.add("edit-task-label"),o.setAttribute("for","edit-task-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("edit-task-input"),s.setAttribute("type","date"),s.setAttribute("id","edit-task-due-date"),s.setAttribute("required",!0),s.setAttribute("placeholder","yyyy-mm-dd"),s.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),we())}));var d=document.createElement("div");d.classList.add("due-date-container"),d.classList.add("input-container"),d.appendChild(o),d.appendChild(s);var u=document.createElement("button");u.classList.add("edit-task-button"),u.setAttribute("id","save-edit-task-button"),u.setAttribute("type","button"),u.setAttribute("aria-label","Edit Task"),u.setAttribute("form","edit-task-form"),u.textContent="save";var c=document.createElement("button");c.classList.add("edit-task-button"),c.setAttribute("id","cancel-edit-task-button"),c.setAttribute("type","button"),c.setAttribute("aria-label","Cancel Edit Task"),c.textContent="cancel";var l=document.createElement("div");l.classList.add("edit-task-button-container"),l.appendChild(u),l.appendChild(c);var m=document.createElement("form");m.setAttribute("id","edit-task-form"),m.appendChild(n),m.appendChild(i),m.appendChild(d),m.appendChild(l);var h=document.createElement("div");return h.classList.add("edit-task-form-container"),h.appendChild(m),h}()),e}(),e.appendChild(n),function(t){t.addEventListener("click",wt)}(t),function(t){var e,n;(e=t.querySelectorAll(".task-item-details"),n=[],e.forEach((function(t){t.clientWidth<t.scrollWidth&&n.push(t)})),n).forEach((function(t){var e,n,r;n=(e=t).scrollWidth-e.clientWidth,r=-1,function t(a){var i=e.scrollLeft+.5*r;i>=n?r=-1:i<=0&&(r=1),e.scrollLeft=i,requestAnimationFrame(t)}()}))}(t),Ae||(Ee.on(C,Ce),Ae=!0)}function Me(t){var e=t.firstChild;return!(e&&e.hasAttribute("id","placeholder-container")||!e)}function Ne(t){var e=ge("#task-list"),r=e.parentNode,a=n.getProjectObject(t);e.remove();var i=be(a);r.appendChild(i),Me(i)&&Le(i)}function Se(){var t=ge("#add-task-form"),e=t.querySelector("#task-add-title"),r=t.querySelector("#task-add-details"),a=t.querySelector("#task-add-due-date"),i=e.value.trim().toLowerCase(),o=r.value.trim(),s=a.value,d=(new Date).toISOString().slice(0,10);if(!i)return alert("Enter Task Name");if(!s)return alert("Enter Task Due Date");if(s<d)return alert("Enter Valid Due Date");t.reset();var u=function(t,e,n,r){if("string"!=typeof t&&"string"!=typeof r&&"string"!=typeof n)throw new Error("⚠️ name, details & due-date, must all be strings");var a={name:t,projectName:e,dueDate:n,details:r,priority:!1,completed:!1};return{getName:function(){return a.name},setName:function(t){a.name=t},getDetails:function(){return a.details},setDetails:function(t){a.details=t},getDueDate:function(){return a.dueDate},setDueDate:function(t){a.dueDate=t},getPriority:function(){return a.priority},setPriority:function(t){a.priority=t},getCompleted:function(){return a.completed},setCompleted:function(t){a.completed=t},setProjectName:function(t){a.project=t},getProjectName:function(){return a.projectName}}}(i,c,s,o);u.setProjectName(c);var c=Fe.projectName.toLowerCase();n.addTaskToProject(c,u),Oe(),Ne(c)}function Pe(){Ee.emit(L)}var je={formState:"hidden",isAddTaskButtonListenerAttached:!1};function qe(t){je.formState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",qe)}function Ye(){var t,e,n=ge(".add-task-form-container"),r=je.formState;"hidden"===r?(fe(n,{"data-hidden":"false","aria-label":"visible"}),je.formState="visible"):"visible"===r&&(fe(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,je.formState="closing",t.addEventListener("animationend",qe)),function(t){var e=ge("#add-task-button");"visible"===t?e.addEventListener("click",Pe):"closing"===t&&e.removeEventListener("click",Pe)}(e=je.formState),function(t){"visible"===t?Ee.on(L,Se):"closing"===t&&Ee.off(L,Se)}(e),function(t){!function(t){var e=ge("#cancel-add-task-button");"visible"===t?e.addEventListener("click",Oe):"closing"===t&&e.removeEventListener("click",Oe)}(t)}(je.formState)}function Oe(){Ee.emit(T)}function He(t){var e=document.createElement("h2"),n=t.getName();e.setAttribute("id","main-heading"),e.textContent=n;var r=be(t),a=document.createElement("div");a.setAttribute("id","main-content"),a.appendChild(r);var i,o=document.createElement("div"),s=t.getType();return o.appendChild(e),"project"===s&&o.appendChild(((i=document.createElement("div")).setAttribute("id","add-task-container"),i.appendChild(function(){var t=document.createElement("button");t.setAttribute("id","add-task-form-opener-button"),t.setAttribute("type","button"),t.setAttribute("aria-label","Add Task"),t.textContent="add task";var e=document.createElement("div");return e.setAttribute("id","add-task-form-opener-button-container"),e.appendChild(t),e}()),i.appendChild(function(){var t=document.createElement("label");t.classList.add("add-task-label"),t.setAttribute("for","task-add-title"),t.textContent="Title";var e=document.createElement("input");e.classList.add("add-task-input"),e.setAttribute("type","text"),e.setAttribute("id","task-add-title"),e.setAttribute("required","true"),e.setAttribute("placeholder","what are the vibes?"),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(L))}));var n=document.createElement("div");n.classList.add("title-container"),n.classList.add("input-container"),n.appendChild(t),n.appendChild(e);var r=document.createElement("label");r.classList.add("add-task-label"),r.setAttribute("for","task-add-details"),r.textContent="Details (optional)";var a=document.createElement("input");a.classList.add("add-task-input"),a.setAttribute("type","text"),a.setAttribute("id","task-add-details"),a.setAttribute("placeholder","tell me more"),a.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(L))}));var i=document.createElement("div");i.classList.add("details-container"),i.classList.add("input-container"),i.appendChild(r),i.appendChild(a);var o=document.createElement("label");o.classList.add("add-task-label"),o.setAttribute("for","task-add-due-date"),o.textContent="Due Date";var s=document.createElement("input");s.classList.add("add-task-input"),s.setAttribute("type","date"),s.setAttribute("id","task-add-due-date"),s.setAttribute("required",!0),s.setAttribute("placeholder","yyyy-mm-dd"),s.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(L))}));var d=document.createElement("div");d.classList.add("due-date-container"),d.classList.add("input-container"),d.appendChild(o),d.appendChild(s);var u=document.createElement("button");u.classList.add("add-task-button"),u.setAttribute("id","add-task-button"),u.setAttribute("type","button"),u.setAttribute("aria-label","Add Task"),u.setAttribute("name","add-task-button"),u.setAttribute("form","add-task-form"),u.textContent="add";var c=document.createElement("button");c.classList.add("add-task-button"),c.setAttribute("id","cancel-add-task-button"),c.setAttribute("type","button"),c.setAttribute("aria-label","Cancel Add Task"),c.textContent="cancel";var l=document.createElement("div");l.classList.add("add-task-button-container"),l.appendChild(u),l.appendChild(c);var m=document.createElement("form");m.setAttribute("id","add-task-form"),m.appendChild(n),m.appendChild(i),m.appendChild(d),m.appendChild(l);var h=document.createElement("div");return h.classList.add("add-task-form-container"),h.setAttribute("aria-label","hidden"),h.setAttribute("data-hidden",!0),h.appendChild(m),h}()),i)),o.setAttribute("id","main-container"),o.appendChild(a),o}var We,Fe={linkType:null,projectName:null};function Qe(t){var e=function(t){var e=t.hasAttribute("data-project-name"),r=t.hasAttribute("data-page-name");if(e){var a=n.getProjectArray(),i=t.getAttribute("data-project-name"),o=a.find((function(t){return t.getName()===i}));return Fe.linkType="project",o}if(r){var s=t.getAttribute("data-page-name"),d=function(t,e){var n=new Date;return({"all tasks":function(){return e},priorities:function(){return e.filter((function(t){return!0===t.getPriority()}))},today:function(){var t=bt(n,"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()===t}))},"next 7 days":function(){var t=bt(gt(n,7),"yyyy-MM-dd");return e.filter((function(e){return e.getDueDate()<=t}))}}[t]||function(){return e})()}(s,n.getAllTasks()),u=y(s,d);return Fe.linkType="link",u}}(t),r=e.getName(),a=e.getType(),i=He(e),o=i.querySelector("#task-list");je.isAddTaskButtonListenerAttached&&(ge("#add-task-form-opener-button").removeEventListener("click",Oe),je.isAddTaskButtonListenerAttached=!1,Ee.off(T,Ye));var s,d=ge("main");!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(d),d.appendChild(i),"project"===a&&(Fe.projectName=r,function(t){var e=ge("#add-task-form-opener-button");"project"===t&&(e.addEventListener("click",Oe),je.isAddTaskButtonListenerAttached=!0)}(s=a),function(t){"project"===t&&Ee.on(T,Ye)}(s)),Me(o)&&Le(o),t.addEventListener("transitionend",en,{once:!0})}function Ie(t){var e=t.target,n=function(t){var e=t.classList.contains("nav-link"),n=t.hasAttribute("aria-current");if(e&&!n)return!0}(e);n&&(function(t){!function(t){for(var e=0;e<t.length;e++)if(t[e].hasAttribute("aria-current")){t[e].removeAttribute("aria-current");break}}(ge(".zig-zag-nav").getElementsByClassName("nav-link")),t.setAttribute("aria-current","page"),We=t.textContent.toLowerCase()}(e),function(t){Ee.emit(M,t)}(e))}function Be(){var t;!0===Ve.open?Ee.on(M,Qe):!1===Ve.open&&Ee.off(M,Qe),t=ge(".zig-zag-nav"),!0===Ve.open?t.addEventListener("click",Ie):!1===Ve.open&&t.removeEventListener("click",Ie)}function ze(){var t=document.createElement("div");t.classList.add("list-icon-container"),t.setAttribute("aria-hidden",!0);var e=document.createElement("div");return e.classList.add("list-icon-bars"),t.appendChild(e),t}function Ge(){var t=ge("#add-project-form"),e=t.querySelector("#project-name-input").value.trim().toLowerCase();if(!e)return alert("Enter Project Name");t.reset();var r=function(t){if("string"!=typeof t)throw new Error("name must be a string");var e={name:t,tasks:[],type:"project"};return{getName:function(){return e.name},setName:function(t){e.name=t},getType:function(){return e.type},addTask:function(t){e.tasks.push(t)},sortTaskArray:function(){e.tasks.sort((function(t,e){var n=t.getDueDate(),r=e.getDueDate();return g(s(n),s(r))}))},getTaskArray:function(){return e.tasks}}}(e);n.addProject(r);var a=ge("#project-nav-list");(function(t,e){for(var n=t.getProjectArray().slice().reverse();e.firstChild;)e.removeChild(e.firstChild);n.forEach((function(t){e.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-link"),e.setAttribute("type","button"),e.setAttribute("aria-label","Project ".concat(t)),e.setAttribute("data-project-name",t),e.textContent=t;var n=ze(),r=document.createElement("li");return r.classList.add("project-li"),r.classList.add("nav-li"),e.setAttribute("aria-label","Project ".concat(t)),r.appendChild(n),r.appendChild(e),r}(t.getName()))}))})(n,a),function(t){var e;(e=t).scrollWidth>e.clientWidth?e.style.overflow="auto":e.style.overflow="hidden"}(a),Ze(),Re.projectFormState="hidden"}function Xe(){Ee.emit(D)}var Re={projectFormState:"hidden"};function $e(t){Re.projectFormState="hidden";var e=t.target;e.setAttribute("data-hidden","true"),e.removeEventListener("animationend",$e)}function Ue(){var t,e,n=ge("#add-project-form"),r=Re.projectFormState;if("hidden"===r)fe(n,{"data-hidden":"false","aria-label":"visible"}),Re.projectFormState="visible";else if("visible"===r){fe(n,{"data-hidden":"closing","aria-label":"hidden"}),t=n,Re.projectFormState="closing",t.addEventListener("animationend",$e),ge("#project-name-input").value=""}(function(t){var e=ge("#add-project-button");"visible"===t?e.addEventListener("click",Xe):"closing"===t&&e.removeEventListener("click",Xe)})(e=Re.projectFormState),function(t){"visible"===t?Ee.on(D,Ge):"closing"===t&&Ee.off(D,Ge)}(e),function(t){!function(t){var e=document.getElementById("cancel-add-project-button");"visible"===t?e.addEventListener("click",Ze):"closing"===t&&e.removeEventListener("click",Ze)}(t)}(Re.projectFormState)}function Ze(){Ee.emit(A)}function Ke(){var t=document.getElementById("new-project-button");!0===Ve.open?t.addEventListener("click",Ze):!1===Ve.open&&t.removeEventListener("click",Ze),function(t){!0===t.open?Ee.on(A,Ue):!1===t.open&&Ee.off(A,Ue)}(Ve)}var Ve={open:!1,animating:!1};function Je(){Ve.open=!1,Ve.animating=!1;var t=document.querySelector(".zig-zag-nav");t.removeEventListener("animationend",Je),t.setAttribute("aria-hidden",!0),t.setAttribute("data-visibility",!1),Ke(),Be()}function _e(){Ve.animating=!0;var t=document.querySelector(".zig-zag-nav");t.setAttribute("data-visibility","closing"),t.addEventListener("animationend",Je)}function tn(){Ve.open=!0,Ve.animating=!1;var t=document.querySelector(".zig-zag-nav");t.setAttribute("aria-hidden",!1),t.setAttribute("data-visibility",!0),Be(),Ke()}function en(){var t=ge(".nav-toggle-button");if(t.classList.contains("active"))t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),Ee.emit(E);else{if(!0===Ve.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),Ee.emit(x)}}var nn,rn,an,on=document.getElementById("content");on.appendChild(function(){var t=document.createElement("header"),e=document.createElement("div");e.classList.add("header-left");var n=document.createElement("img");n.classList.add("header-logo"),n.setAttribute("src",k),n.setAttribute("alt","Priority Logo");var r=document.createElement("h1");r.classList.add("header-title"),r.textContent="<pr{io}rity>",e.appendChild(n),e.appendChild(r);var a=document.createElement("div");return a.classList.add("header-right"),a.appendChild(function(){var t=document.createElement("div");t.setAttribute("id","theme-toggle-container");var e=document.createElement("input");e.setAttribute("type","checkbox"),e.setAttribute("id","theme-toggle-checkbox");var n=document.createElement("label");n.setAttribute("id","theme-toggle-label"),n.setAttribute("for","theme-toggle-checkbox");var r=document.createElement("i");r.classList.add("fa-solid","fa-sun"),r.setAttribute("id","sun");var a=document.createElement("i");return a.classList.add("fa-solid","fa-moon"),a.setAttribute("id","moon"),n.appendChild(r),n.appendChild(a),t.appendChild(e),t.appendChild(n),t}()),a.appendChild(function(t){var e=document.createElement("button");e.classList.add("nav-toggle-button"),e.setAttribute("aria-label","Open Navigation Menu"),e.setAttribute("aria-expanded",!1),e.setAttribute("aria-controls","nav-primary-aria");var n=document.createElement("div");return n.classList.add("nav-toggle-bars"),e.appendChild(n),e.addEventListener("click",en),e}()),t.appendChild(e),t.appendChild(a),content.appendChild(t),t}()),on.appendChild(function(t,e,n,r,a){var i=document.createElement("nav");i.classList.add("zig-zag-nav"),i.setAttribute("id","nav-primary-aria"),i.setAttribute("aria-label","Main Navigation"),i.setAttribute("aria-hidden",!0),i.setAttribute("data-visibility",!1);var o=function(){var e=document.createElement("div");e.classList.add("nav-list-container");var n=document.createElement("h2");n.classList.add("nav-list-heading"),n.textContent=s,i.appendChild(n);var r=document.createElement("ul");r.classList.add("nav-ul");var a=t[s].listElements,o=document.createDocumentFragment();a.forEach((function(t,e){var n=t[0],r=(t[1],document.createElement("button"));r.classList.add("nav-link"),"All Tasks"===n&&r.setAttribute("aria-current","page");var a=document.createElement("li");a.classList.add("nav-li"),r.textContent=n,r.setAttribute("data-page-name",n.toLowerCase()),a.appendChild(r),o.appendChild(a)})),r.appendChild(o),e.appendChild(n),e.appendChild(r),i.appendChild(e)};for(var s in t)o();return Ee.on(x,tn),Ee.on(E,_e),i}({Home:{listElements:[["All Tasks","#"],["Today","#"],["Next 7 Days","#"],["Priorities","#"]]},Projects:{listElements:[]}})),(nn=document.querySelector(".nav-list-container:nth-child(2)")).setAttribute("id","project-nav-list-container"),nn.insertBefore(function(){var t=document.createElement("input");t.setAttribute("id","project-name-input"),t.setAttribute("type","text"),t.setAttribute("placeholder","Enter Project Name"),t.setAttribute("max-length",24),t.addEventListener("keydown",(function(t){"Enter"===t.key&&(t.preventDefault(),Ee.emit(D))}));var e=document.createElement("button");e.setAttribute("id","add-project-button"),e.setAttribute("type","button"),e.setAttribute("required",!0),e.setAttribute("name","add-project"),e.setAttribute("form","add-project-form"),e.setAttribute("aria-label","Add Project"),e.textContent="add";var n=document.createElement("button");n.setAttribute("id","cancel-add-project-button"),n.setAttribute("type","button"),n.setAttribute("aria-label","Cancel Add Project"),n.textContent="cancel";var r=document.createElement("div");r.setAttribute("id","project-input-container"),r.appendChild(ze()),r.appendChild(t);var a=document.createElement("div");a.setAttribute("id","project-buttons-container"),a.appendChild(e),a.appendChild(n);var i=document.createElement("form");i.setAttribute("id","add-project-form"),i.setAttribute("aria-label","hidden"),i.setAttribute("data-hidden",!0),i.appendChild(r),i.appendChild(a);var o=document.createElement("button");o.setAttribute("id","new-project-button"),o.setAttribute("type","button"),o.setAttribute("aria-label","New Project"),o.textContent="New Project";var s=document.createElement("div");return s.setAttribute("id","add-project-container"),s.appendChild(o),s.appendChild(i),s}(),nn.lastChild),nn.querySelector(".nav-ul").setAttribute("id","project-nav-list"),document.querySelectorAll(".nav-list-container:not(#project-nav-list-container) .nav-link").forEach((function(t){"all tasks"===t.getAttribute("data-page-name")||"today"===t.getAttribute("data-page-name")||"next 7 days"===t.getAttribute("data-page-name")?t.setAttribute("data-arrange-method","sort"):"priorities"===t.getAttribute("data-page-name")&&t.setAttribute("data-arrange-method","filter")})),on.appendChild((rn=He(y("all tasks",n.getAllTasks())),(an=document.createElement("main")).appendChild(rn),an))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,